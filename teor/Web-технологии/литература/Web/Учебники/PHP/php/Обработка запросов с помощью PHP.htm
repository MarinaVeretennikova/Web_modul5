<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://www.intuit.ru/department/pl/plphp/4/plphp_4.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251"><LINK 
href="Обработка запросов с помощью PHP.files/printable.css" type=text/css 
rel=stylesheet>
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY leftMargin=0 topMargin=6 marginwidth="0" marginheight="6">
<DIV align=left><SPAN style="FONT-WEIGHT: bold; COLOR: #000000">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD colSpan=3 height=8><IMG height=8 
      src="Обработка запросов с помощью PHP.files/empty.gif" width=1></TD></TR>
  <TR>
    <TD class=orang colSpan=3 height=1><IMG height=1 
      src="Обработка запросов с помощью PHP.files/empty.gif" width=1></TD></TR>
  <TR>
    <TD colSpan=3 height=8><IMG height=8 
      src="Обработка запросов с помощью PHP.files/empty.gif" width=1></TD></TR>
  <TR vAlign=top>
    <TD><IMG height=1 src="Обработка запросов с помощью PHP.files/empty.gif" 
      width=8></TD>
    <TD><!-- content -->
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=head>Язык программирования PHP</TD></TR>
        <TR>
          <TD height=4><IMG height=4 
            src="Обработка запросов с помощью PHP.files/empty.gif" 
width=1></TD></TR>
        <TR>
          <TD class=orang height=1><IMG height=1 
            src="Обработка запросов с помощью PHP.files/empty.gif" 
width=1></TD></TR>
        <TR>
          <TD height=8><IMG height=8 
            src="Обработка запросов с помощью PHP.files/empty.gif" 
width=1></TD></TR>
        <TR>
          <TD><SPAN class=headsub>4. Лекция: Обработка запросов с помощью PHP: 
            версия для печати и PDA</SPAN> <BR><SPAN class=rtxt>Лекция посвящена 
            изучению способов отправки данных на сервер и их обработке с помощью 
            PHP. Рассматриваются основные понятия клиент-серверных технологий. 
            Рассматривается понятие HTML-формы и отправка данных с ее помощью. 
            Дается краткая характеристика методов Post и Get. Рассматривается 
            механизм получения данных из HTML-форм и их обработка с помощью PHP. 
            Пример – создание формы для регистрации пользователей на сайте, 
            отправка «универсального письма» всем зарегистрировавшимся. 
          </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG height=8 
            src="Обработка запросов с помощью PHP.files/empty.gif" 
width=1></TD></TR>
        <TR>
          <TD class=orang height=1><IMG height=1 
            src="Обработка запросов с помощью PHP.files/empty.gif" 
width=1></TD></TR>
        <TR>
          <TD height=8><IMG height=8 
            src="Обработка запросов с помощью PHP.files/empty.gif" 
width=1></TD></TR>
        <TR>
          <TD>
            <H3>Основы клиент-серверных технологий</H3>
            <P>В самом начале курса мы уже говорили о том, что PHP – это 
            скриптовый язык, обрабатываемый <SPAN class=keyword>сервером</SPAN>. 
            Сейчас мы хотим уточнить, что же такое <SPAN 
            class=keyword>сервер</SPAN>, какие функции он выполняет и какие 
            вообще бывают <SPAN class=keyword>серверы</SPAN>. Если речь идет о 
            <SPAN class=keyword>сервере</SPAN>, невольно всплывает в памяти 
            понятие <SPAN class=keyword>клиента</SPAN>. Все потому, что эти два 
            понятия неразрывно связаны. Объединяет их компьютерная <SPAN 
            class=keyword>архитектура клиент-сервер</SPAN>. Обычно, когда 
            говорят «<SPAN class=keyword>сервер</SPAN>», имеют в виду <SPAN 
            class=keyword>сервер</SPAN> в <SPAN class=keyword>архитектуре 
            клиент-сервер</SPAN>, а когда говорят «<SPAN 
            class=keyword>клиент</SPAN>» – имеют в виду <SPAN 
            class=keyword>клиент</SPAN> в этой же <SPAN 
            class=keyword>архитектуре</SPAN>. Так что же это за архитектура? 
            Суть ее в том, чтобы разделить функции между двумя подсистемами: 
            <SPAN class=keyword>клиентом</SPAN>, который отправляет запрос на 
            выполнение каких-либо действий, и <SPAN 
            class=keyword>сервером</SPAN>, который выполняет этот запрос. 
            Взаимодействие между <SPAN class=keyword>клиентом</SPAN> и <SPAN 
            class=keyword>сервером</SPAN> происходит посредством стандартных 
            специальных протоколов, таких как TCP/IP и z39.50. На самом деле 
            протоколов очень много, они различаются по уровням. Мы рассмотрим 
            только протокол прикладного уровня <SPAN class=keyword>HTTP</SPAN> 
            (чуть позднее), поскольку для решения наших программистских задач 
            нужен только он. А пока вернемся к <SPAN 
            class=keyword>клиент-серверной архитектуре</SPAN> и разберемся, что 
            же такое <SPAN class=keyword>клиент</SPAN> и что такое <SPAN 
            class=keyword>сервер</SPAN>.</P>
            <P><A name=keyword-context.1></A><SPAN class=keyword>Сервер</SPAN> 
            представляет собой набор программ, которые контролируют выполнение 
            различных процессов. Соответственно, этот набор программ установлен 
            на каком-то компьютере. Часто компьютер, на котором установлен <SPAN 
            class=keyword>сервер</SPAN>, и называют <SPAN 
            class=keyword>сервером</SPAN>. Основная функция компьютера-сервера – 
            по запросу <SPAN class=keyword>клиента</SPAN> запустить какой-либо 
            определенный процесс и отправить <SPAN class=keyword>клиенту</SPAN> 
            результаты его работы. </P>
            <P><A name=keyword-context.2></A><SPAN class=keyword>Клиентом</SPAN> 
            называют любой процесс, который пользуется услугами <SPAN 
            class=keyword>сервера</SPAN>. <SPAN class=keyword>Клиентом</SPAN> 
            может быть как пользователь, так и программа. Основная задача <SPAN 
            class=keyword>клиента</SPAN> – выполнение приложения и осуществление 
            связи с <SPAN class=keyword>сервером</SPAN>, когда этого требует 
            приложение. То есть <SPAN class=keyword>клиент</SPAN> должен 
            предоставлять пользователю интерфейс для работы с приложением, 
            реализовывать логику его работы и при необходимости отправлять 
            задания <SPAN class=keyword>серверу</SPAN>.</P>
            <P>Взаимодействие между <SPAN class=keyword>клиентом</SPAN> и <SPAN 
            class=keyword>сервером</SPAN> начинается по инициативе <SPAN 
            class=keyword>клиента</SPAN>. <SPAN class=keyword>Клиент</SPAN> 
            запрашивает вид обслуживания, устанавливает сеанс, получает нужные 
            ему результаты и сообщает об окончании работы.</P>
            <P>Услугами одного <SPAN class=keyword>сервера</SPAN> чаще всего 
            пользуется несколько <SPAN class=keyword>клиентов</SPAN> 
            одновременно. Поэтому каждый <SPAN class=keyword>сервер</SPAN> 
            должен иметь достаточно большую производительность и обеспечивать 
            безопасность данных.</P>
            <P>Логичнее всего устанавливать <SPAN class=keyword>сервер</SPAN> на 
            компьютере, входящем в какую-либо сеть, локальную или глобальную. 
            Однако можно устанавливать <SPAN class=keyword>сервер</SPAN> и на 
            отдельно стоящий компьютер (тогда он будет являться одновременно и 
            <SPAN class=keyword>клиентом</SPAN> и <SPAN 
            class=keyword>сервером</SPAN>).</P>
            <P>Существует множество типов <SPAN class=keyword>серверов</SPAN>. 
            Вот лишь некоторые из них.</P>
            <UL>
              <LI><B>Видеосервер</B> 
              <P>Такой <SPAN class=keyword>сервер</SPAN> специально приспособлен 
              к обработке изображений, хранению видеоматериалов, видеоигр и т.п. 
              В связи с этим компьютер, на котором установлен видеосервер, 
              должен иметь высокую производительность и большую память.</P>
              <LI><B>Поисковый</B> <SPAN class=keyword>сервер</SPAN> 
              предназначен для поиска информации в Internet.
              <LI><B>Почтовый</B> <SPAN class=keyword>сервер</SPAN> 
              предоставляет услуги в ответ на запросы, присланные по электронной 
              почте.
              <LI><B>Сервер WWW</B><SPAN class=keyword></SPAN> предназначен для 
              работы в Internet.
              <LI><B>Сервер баз данных</B> выполняет обработку запросов к базам 
              данных.
              <LI><SPAN class=keyword>Сервер</SPAN> защиты данных предназначен 
              для обеспечения безопасности данных (содержит, например, средства 
              для идентификации паролей).
              <LI><B>Сервер приложений</B><SPAN class=keyword></SPAN> 
              предназначен для выполнения прикладных процессов. С одной стороны 
              взаимодействует с <SPAN class=keyword>клиентами</SPAN>, получая 
              задания, а с другой – работает с базами данных, подбирая 
              необходимые для обработки данные.
              <LI><B>Сервер удаленного доступа</B> обеспечивает коллективный 
              удаленный доступ к данным.
              <LI><B>Файловый сервер</B><SPAN class=keyword></SPAN> обеспечивает 
              функционирование распределенных ресурсов, предоставляет услуги 
              поиска, хранения, архивирования данных и возможность 
              одновременного доступа к ним нескольких пользователей.</LI></UL>
            <P>Обычно на компьютере-<SPAN class=keyword>сервере</SPAN> работает 
            сразу несколько программ-<SPAN class=keyword>серверов</SPAN>. Одна 
            занимается электронной почтой, другая распределением файлов, третья 
            предоставляет web-страницы.</P>
            <P>Из всех типов <SPAN class=keyword>серверов</SPAN> нас в основном 
            интересует <SPAN class=keyword>сервер WWW</SPAN>. Часто его называют 
            <SPAN class=keyword>web-сервером</SPAN>, <SPAN 
            class=keyword>http-сервером</SPAN> или даже просто <SPAN 
            class=keyword>сервером</SPAN>. Что представляет собой <SPAN 
            class=keyword>web-сервер</SPAN>? Во-первых, это хранилище 
            информационных ресурсов. Во-вторых, эти ресурсы хранятся и 
            предоставляются пользователям в соответствии со стандартами Internet 
            (такими, как протокол передачи данных <SPAN 
            class=keyword>HTTP</SPAN>). Как предоставляются данные в 
            соответствии с этим протоколом, мы рассмотрим чуть позже. Работа с 
            документами <SPAN class=keyword>web-сервера</SPAN> осуществляется 
            при помощи браузера (например, IE, Opera или Mozilla), который 
            отсылает <SPAN class=keyword>серверу</SPAN> запросы, созданные в 
            соответствии с протоколом <SPAN class=keyword>HTTP</SPAN>. В 
            процессе выполнения задания <SPAN class=keyword>сервер</SPAN> может 
            связываться с другими <SPAN class=keyword>серверами</SPAN>.</P>
            <P>Далее в ходе лекции, говоря «<SPAN class=keyword>сервер</SPAN>», 
            мы будем подразумевать <SPAN class=keyword>web-сервер</SPAN>.</P>
            <P>В качестве примеров <SPAN class=keyword>web-серверов</SPAN> можно 
            привести <SPAN class=keyword>сервер</SPAN> <SPAN 
            class=keyword>Apache</SPAN> группы <SPAN 
            class=keyword>Apache</SPAN>, Internet Information Server (IIS) 
            компании Microsoft, SunOne фирмы Sun Microsystems,WebLogic фирмы BEA 
            Systems, IAS (Inprise Application Server) фирмы Borland, WebSphere 
            фирмы IBM, OAS (Oracle Application Server).</P>
            <P>На <A 
            href="http://www.intuit.ru/department/pl/plphp/4/plphp_4.html#image.4.1">рис. 
            4.1</A> и в <A 
            href="http://www.intuit.ru/department/pl/plphp/4/plphp_4.html#table.4.1">таблице 
            4.1</A> приведена статистика использования различных <SPAN 
            class=keyword>серверов</SPAN> среди всех доменов Internet от 
            NetCraft <A href="http://news.netcraft.com/" 
            target=_blank>http://news.netcraft.com/</A>.</P>
            <P align=left><A name=image.4.1></A><IMG height=186 
            alt="Статистика использования ведущих web-серверов" 
            src="Обработка запросов с помощью PHP.files/4-1.jpg" 
            width=307><BR><B>Рис. 4.1.</B>&nbsp; Статистика использования 
            ведущих web-серверов</P>
            <DIV class=xml_table_env><A name=table.4.1></A>
            <TABLE class=xml_table cellSpacing=1 cellPadding=2 border=0>
              <CAPTION>Таблица 4.1. Ведущие разработчики web-серверов</CAPTION>
              <TBODY>
              <TR>
                <TH bgColor=#d8d8d8>Разработчик</TH>
                <TH bgColor=#d8d8d8>Февраль 2004</TH>
                <TH bgColor=#d8d8d8>Проценты</TH>
                <TH bgColor=#d8d8d8>Март 2004</TH>
                <TH bgColor=#d8d8d8>Проценты</TH>
                <TH bgColor=#d8d8d8>Изменение</TH></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                  class=keyword>Apache</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>31703884</TD>
                <TD vAlign=top bgColor=#eaeaea>67.21</TD>
                <TD vAlign=top bgColor=#eaeaea>32280582</TD>
                <TD vAlign=top bgColor=#eaeaea>67.20</TD>
                <TD vAlign=top bgColor=#eaeaea>-0.01</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea>Microsoft</TD>
                <TD vAlign=top bgColor=#eaeaea>9849971</TD>
                <TD vAlign=top bgColor=#eaeaea>20.88</TD>
                <TD vAlign=top bgColor=#eaeaea>10099760 </TD>
                <TD vAlign=top bgColor=#eaeaea>21.02</TD>
                <TD vAlign=top bgColor=#eaeaea>0.14</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea>SunONE</TD>
                <TD vAlign=top bgColor=#eaeaea>1657295</TD>
                <TD vAlign=top bgColor=#eaeaea>3.51</TD>
                <TD vAlign=top bgColor=#eaeaea>1651575</TD>
                <TD vAlign=top bgColor=#eaeaea>3.44</TD>
                <TD vAlign=top bgColor=#eaeaea>-0.07</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea>Zeus</TD>
                <TD vAlign=top bgColor=#eaeaea>755227</TD>
                <TD vAlign=top bgColor=#eaeaea>1.60</TD>
                <TD vAlign=top bgColor=#eaeaea>762716</TD>
                <TD vAlign=top bgColor=#eaeaea>1.59</TD>
                <TD vAlign=top bgColor=#eaeaea>-0.01</TD></TR></TBODY></TABLE></DIV>
            <P>Как видно из приведенной таблицы, <SPAN 
            class=keyword>сервер</SPAN> <SPAN class=keyword>Apache</SPAN> 
            занимает лидирующие позиции. Все, что мы когда-либо будем говорить о 
            <SPAN class=keyword>web-серверах</SPAN>, ориентировано на <SPAN 
            class=keyword>Apache</SPAN>, если не указано иное. О том, как 
            установить его на свой компьютер, мы уже рассказывали в самой первой 
            лекции. А теперь, как было обещано, обратимся к протоколу <SPAN 
            class=keyword>HTTP</SPAN>.</P>
            <H3>Протокол HTTP и способы передачи данных на сервер</H3>
            <P>Internet построен по многоуровневому принципу, от физического 
            уровня, связанного с физическими аспектами передачи двоичной 
            информации, и до прикладного уровня, обеспечивающего интерфейс между 
            пользователем и сетью.</P>
            <P><A name=keyword-context.3></A><SPAN class=keyword_def>HTTP</SPAN> 
            (HyperText Transfer Protocol, <SPAN class=keyword>протокол передачи 
            гипертекста</SPAN>) – это протокол прикладного уровня, разработанный 
            для обмена гипертекстовой информацией в Internet.</P>
            <P><A name=keyword-context.4></A><A name=keyword-context.5></A><SPAN 
            class=keyword>HTTP</SPAN> предоставляет набор методов для указания 
            целей запроса, отправляемого <SPAN class=keyword>серверу</SPAN>. Эти 
            методы основаны на дисциплине ссылок, где для указания ресурса, к 
            которому должен быть применен данный метод, используется 
            универсальный идентификатор ресурсов (Universal Resource Identifier) 
            в виде местонахождения ресурса (Universal Resource Locator, <SPAN 
            class=keyword_def>URL</SPAN>) или в виде его универсального имени 
            (Universal Resource Name, <SPAN class=keyword_def>URN</SPAN>).</P>
            <P>Сообщения по сети при использовании протокола <SPAN 
            class=keyword>HTTP</SPAN> передаются в формате, схожем с форматом 
            почтового сообщения Internet (RFC-822) или с форматом сообщений MIME 
            (Multipurpose Internet Mail Exchange).</P>
            <P><SPAN class=keyword>HTTP</SPAN> используется для коммуникаций 
            между различными пользовательскими программами и 
            программами-шлюзами, предоставляющими доступ к существующим 
            Internet-протоколам, таким как SMTP (протокол электронной почты), 
            NNTP (протокол передачи новостей), FTP (протокол передачи файлов), 
            Gopher и WAIS. <SPAN class=keyword>HTTP</SPAN> разработан для того, 
            чтобы позволять таким шлюзам через промежуточные программы-<SPAN 
            class=keyword>серверы</SPAN> (proxy) передавать данные без 
            потерь.</P>
            <P>Протокол реализует <SPAN class=keyword>принцип 
            запрос/ответ</SPAN>. Запрашивающая программа – <SPAN 
            class=keyword>клиент</SPAN> инициирует взаимодействие с отвечающей 
            программой – <SPAN class=keyword>сервером</SPAN> и посылает запрос, 
            содержащий:</P>
            <UL>
              <LI>метод доступа;
              <LI>адрес URI;
              <LI>версию протокола;
              <LI>сообщение (похожее по форме на MIME) с информацией о типе 
              передаваемых данных, информацией о <SPAN 
              class=keyword>клиенте</SPAN>, пославшем запрос, и, возможно, с 
              содержательной частью (телом) сообщения.</LI></UL>
            <P>Ответ <SPAN class=keyword>сервера</SPAN> содержит:</P>
            <UL>
              <LI>строку состояния, в которую входит версия протокола и код 
              возврата (успех или ошибка);
              <LI>сообщение (в форме, похожей на MIME), в которое входит 
              информация <SPAN class=keyword>сервера</SPAN>, метаинформация 
              (т.е. информация о содержании сообщения) и тело сообщения.</LI></UL>
            <P>В протоколе не указывается, кто должен открывать и закрывать 
            соединение между <SPAN class=keyword>клиентом</SPAN> и <SPAN 
            class=keyword>сервером</SPAN>. На практике соединение, как правило, 
            открывает <SPAN class=keyword>клиент</SPAN>, а <SPAN 
            class=keyword>сервер</SPAN> после отправки ответа инициирует его 
            разрыв.</P>
            <P>Давайте рассмотрим более подробно, в какой форме отправляются 
            запросы на <SPAN class=keyword>сервер</SPAN>.</P>
            <H4>Форма запроса клиента</H4>
            <P><SPAN class=keyword>Клиент</SPAN> отсылает <SPAN 
            class=keyword>серверу</SPAN> запрос в одной из двух форм: в полной 
            или сокращенной. Запрос в первой форме называется соответственно 
            <SPAN class=keyword>полным запросом</SPAN>, а во второй форме – 
            простым запросом.</P>
            <P><A name=keyword-context.6></A><SPAN class=keyword_def>Простой 
            запрос</SPAN> содержит метод доступа и адрес ресурса. Формально это 
            можно записать так: </P>
            <DIV class=example><PRE>&lt;Простой-Запрос&gt; := &lt;Метод&gt; &lt;символ пробел&gt;
    &lt;Запрашиваемый-URI&gt; &lt;символ новой строки&gt;
</PRE></DIV>
            <P>В качестве метода могут быть указаны <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN>, <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN>, <SPAN class=texample><SPAN 
            class=keyword>HEAD</SPAN></SPAN>, <SPAN class=texample>PUT</SPAN>, 
            <SPAN class=texample>DELETE</SPAN> и другие. О наиболее 
            распространенных из них мы поговорим немного позже. В качестве 
            запрашиваемого URI чаще всего используется <SPAN 
            class=keyword>URL</SPAN>-адрес ресурса.</P>
            <P>Пример <SPAN class=keyword>простого запроса</SPAN>: </P>
            <DIV class=example><PRE>GET http://phpbook.info/
</PRE></DIV>
            <P>Здесь <SPAN class=texample><SPAN class=keyword>GET</SPAN></SPAN> 
            – это метод доступа, т.е. метод, который должен быть применен к 
            запрашиваемому ресурсу, а <SPAN 
            class=texample>http://phpbook.info/</SPAN> – это <SPAN 
            class=keyword>URL</SPAN>-адрес запрашиваемого ресурса.</P>
            <P><A name=keyword-context.7></A><SPAN class=keyword>Полный 
            запрос</SPAN> содержит строку состояния, несколько заголовков 
            (заголовок запроса, общий заголовок или заголовок содержания) и, 
            возможно, тело запроса. Формально общий вид <SPAN 
            class=keyword>полного запроса</SPAN> можно записать так: </P>
            <DIV class=example><PRE>&lt;Полный запрос&gt; := &lt;Строка Состояния&gt; 
    (&lt;Общий заголовок&gt;|&lt;Заголовок запроса&gt;|
    &lt;Заголовок содержания&gt;)
    &lt;символ новой строки&gt;
    [&lt;содержание запроса&gt;]
</PRE></DIV>
            <P>Квадратные скобки здесь обозначают необязательные элементы 
            заголовка, через вертикальную черту перечислены альтернативные 
            варианты. Элемент <SPAN class=texample>&lt;Строка 
            состояния&gt;</SPAN> содержит <SPAN class=keyword>метод 
            запроса</SPAN> и URI ресурса (как и <SPAN class=keyword>простой 
            запрос</SPAN>) и, кроме того, используемую версию протокола <SPAN 
            class=keyword>HTTP</SPAN>. Например, для вызова внешней программы 
            можно задействовать следующую строку состояния:</P>
            <DIV class=example><PRE>POST http://phpbook.info/cgi-bin/test HTTP/1.0
</PRE></DIV>
            <P>В данном случае используется метод <SPAN 
            class=keyword>POST</SPAN> и протокол <SPAN class=keyword>HTTP</SPAN> 
            версии 1.0.</P>
            <P>В обеих формах запроса важное место занимает URI запрашиваемого 
            ресурса. Чаще всего URI используется в виде <SPAN 
            class=keyword>URL</SPAN>-адреса ресурса. При обращении к <SPAN 
            class=keyword>серверу</SPAN> можно применять как полную форму <SPAN 
            class=keyword>URL</SPAN>, так и упрощенную.</P>
            <P>Полная форма содержит тип протокола доступа, адрес <SPAN 
            class=keyword>сервера</SPAN> ресурса и адрес ресурса на <SPAN 
            class=keyword>сервере</SPAN> (<A 
            href="http://www.intuit.ru/department/pl/plphp/4/plphp_4.html#image.4.2">рисунок 
            4.2</A>).</P>
            <P>В сокращенной форме опускают протокол и адрес <SPAN 
            class=keyword>сервера</SPAN>, указывая только местоположение ресурса 
            от корня <SPAN class=keyword>сервера</SPAN>. Полную форму 
            используют, если возможна пересылка запроса другому <SPAN 
            class=keyword>серверу</SPAN>. Если же работа происходит только с 
            одним <SPAN class=keyword>сервером</SPAN>, то чаще применяют 
            сокращенную форму.</P>
            <P align=left><A name=image.4.2></A><IMG height=110 
            alt="Полная форма URL" 
            src="Обработка запросов с помощью PHP.files/4-2.gif" 
            width=365><BR><B>Рис. 4.2.</B>&nbsp; Полная форма URL</P>
            <P>Далее мы рассмотрим наиболее распространенные <SPAN 
            class=keyword>методы отправки запросов</SPAN>.</P>
            <H4>Методы</H4>
            <P>Как уже говорилось, любой запрос <SPAN 
            class=keyword>клиента</SPAN> к <SPAN class=keyword>серверу</SPAN> 
            должен начинаться с указания метода. Метод сообщает о цели запроса 
            <SPAN class=keyword>клиента</SPAN>. Протокол <SPAN 
            class=keyword>HTTP</SPAN> поддерживает достаточно много методов, но 
            реально используются только три: <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN>, <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN> и <SPAN class=texample><SPAN 
            class=keyword>HEAD</SPAN></SPAN>. Метод <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN> позволяет получить любые данные, 
            идентифицированные с помощью URI в запросе ресурса. Если URI 
            указывает на программу, то возвращается результат работы программы, 
            а не ее текст (если, конечно, текст не есть результат ее работы). 
            Дополнительная информация, необходимая для обработки запроса, 
            встраивается в сам запрос (в строку статуса). При использовании 
            метода <SPAN class=texample><SPAN class=keyword>GET</SPAN></SPAN> в 
            поле тела ресурса возвращается собственно затребованная информация 
            (текст HTML-документа, например).</P>
            <P>Существует разновидность метода <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN> – условный <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN>. Этот метод 
            сообщает <SPAN class=keyword>серверу</SPAN> о том, что на запрос 
            нужно ответить, только если выполнено условие, содержащееся в поле 
            if-Modified-Since заголовка запроса. Если говорить более точно, то 
            тело ресурса передается в ответ на запрос, если этот ресурс 
            изменялся после даты, указанной в if-Modified-Since.</P>
            <P>Метод <SPAN class=texample><SPAN class=keyword>HEAD</SPAN></SPAN> 
            аналогичен методу <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN>, только не возвращает тело ресурса и 
            не имеет условного аналога. Метод <SPAN class=texample><SPAN 
            class=keyword>HEAD</SPAN></SPAN> используют для получения информации 
            о ресурсе. Это может пригодиться, например, при решении задачи 
            тестирования гипертекстовых ссылок.</P>
            <P>Метод <SPAN class=texample><SPAN class=keyword>POST</SPAN></SPAN> 
            разработан для передачи на <SPAN class=keyword>сервер</SPAN> такой 
            информации, как аннотации ресурсов, новостные и почтовые сообщения, 
            данные для добавления в базу данных, т.е. для передачи информации 
            большого объема и достаточно важной. В отличие от методов <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN> и <SPAN 
            class=texample><SPAN class=keyword>HEAD</SPAN></SPAN>, в <SPAN 
            class=texample><SPAN class=keyword>POST</SPAN></SPAN> передается 
            тело ресурса, которое и является информацией, получаемой из полей 
            форм или других источников ввода.</P>
            <P>До сих пор мы только теоретизировали, знакомились с основными 
            понятиями. Теперь пора научиться использовать все это на практике. 
            Далее в лекции мы рассмотрим, как посылать запросы <SPAN 
            class=keyword>серверу</SPAN> и как обрабатывать его ответы.</P>
            <H3>Использование HTML-форм для передачи данных на сервер</H3>
            <P>Как передавать данные <SPAN class=keyword>серверу</SPAN>? Для 
            этого в языке HTML есть специальная конструкция – формы. Формы 
            предназначены для того чтобы получать от пользователя информацию. 
            Например, вам нужно знать логин и пароль пользователя для того, 
            чтобы определить, на какие страницы сайта его можно допускать. Или 
            вам необходимы личные данные пользователя, чтобы была возможность с 
            ним связаться. Формы как раз и применяются для ввода такой 
            информации. В них можно вводить текст или выбирать подходящие 
            варианты из списка. Данные, записанные в форму, отправляются для 
            обработки специальной программе (например, скрипту на PHP) на <SPAN 
            class=keyword>сервере</SPAN>. В зависимости от введенных 
            пользователем данных эта программа может формировать различные 
            web-страницы, отправлять запросы к базе данных, запускать различные 
            приложения и т.п.</P>
            <P>Разберемся с синтаксисом <SPAN class=keyword>HTML-форм</SPAN>. 
            Возможно, многие с ним знакомы, но мы все же повторим основные 
            моменты, поскольку это важно.</P>
            <P>Итак, для создания формы в языке HTML используется тег <SPAN 
            class=texample><SPAN class=keyword>FORM</SPAN></SPAN>. Внутри него 
            находится одна или несколько команд <SPAN class=texample><SPAN 
            class=keyword>INPUT</SPAN></SPAN>. С помощью атрибутов <SPAN 
            class=texample><SPAN class=keyword>action</SPAN></SPAN> и <SPAN 
            class=texample><SPAN class=keyword>method</SPAN></SPAN> тега <SPAN 
            class=texample><SPAN class=keyword>FORM</SPAN></SPAN> задаются имя 
            программы, которая будет обрабатывать данные формы, и метод запроса, 
            соответственно. Команда <SPAN class=texample><SPAN 
            class=keyword>INPUT</SPAN></SPAN> определяет тип и различные 
            характеристики запрашиваемой информации. Отправка данных формы 
            происходит после нажатия кнопки <SPAN class=texample><SPAN 
            class=keyword>input</SPAN></SPAN> типа <SPAN class=texample><SPAN 
            class=keyword>submit</SPAN></SPAN>. Создадим форму для регистрации 
            участников заочной школы программирования.</P><A 
            name=example.4.0></A>
            <DIV class=example><PRE>&lt;h2&gt;Форма для регистрации участников&lt;/h2&gt;
&lt;form action="1.php" method=POST&gt; &lt;!--создаем форму--&gt;
&lt;!--данные формы будет обрабатывать файл 1.php, при 
    отправке запроса будет использован метод POST--&gt;
Имя &lt;br&gt;&lt;input type=text name="first_name" 
    value="Введите Ваше имя"&gt;&lt;br&gt;
Фамилия &lt;br&gt;&lt;input type=text name="last_name"&gt;&lt;br&gt;
E-mail &lt;br&gt;&lt;input type=text name="email"&gt;&lt;br&gt;
&lt;p&gt;
Выберите курс, который вы бы хотели посещать:&lt;br&gt;
&lt;input type=radio name="kurs" value="PHP"&gt;PHP&lt;br&gt;
&lt;input type=radio name="kurs" value="Lisp"&gt;Lisp&lt;br&gt;
&lt;input type=radio name="kurs" value="Perl"&gt;Perl&lt;br&gt;
&lt;input type=radio name="kurs" value="Unix"&gt;Unix&lt;br&gt;
&lt;P&gt;Что вы хотите, чтобы мы знали о вас? &lt;BR&gt;
&lt;textarea name="comment" cols=32 rows=5&gt;&lt;/textarea&gt;
&lt;P&gt;&lt;input name="confirm" type=checkbox 
    checked&gt;Подтвердить получение &lt;br&gt;
&lt;input type=submit value="Отправить"&gt;
&lt;input type=reset value="Отменить"&gt;
&lt;/form&gt;
</PRE><SPAN class=objectName>Листинг 4.0. form.html</SPAN></DIV>
            <P>После обработки браузером этот файл будет выглядеть примерно 
            так:</P>
            <P align=left><A name=image.4.3></A><IMG height=247 
            alt="Пример html-формы" 
            src="Обработка запросов с помощью PHP.files/4-3.gif" 
            width=227><BR><B>Рис. 4.3.</B>&nbsp; Пример html-формы</P>
            <P>Вот так создаются и выглядят <SPAN 
            class=keyword>HTML-формы</SPAN>. Будем считать, что мы научились или 
            вспомнили, как их создавать. Как мы видим, в форме можно указывать 
            метод передачи данных. Посмотрим, что будет происходить, если 
            указать метод <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN> или <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN>, и в чем будет разница.</P>
            <H4>Для метода GET</H4>
            <P>При отправке данных формы с помощью метода <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN> содержимое 
            формы добавляется к <SPAN class=keyword>URL</SPAN> после знака 
            вопроса в виде пар <SPAN class=texample>имя=значения</SPAN>, 
            объединенных с помощью амперсанта <SPAN 
            class=texample>&amp;</SPAN>:</P>
            <DIV class=example><PRE>action?name1=value1&amp;name2=value2&amp;name3=value3
</PRE></DIV>
            <P>Здесь <SPAN class=texample><SPAN 
            class=keyword>action</SPAN></SPAN> – это <SPAN 
            class=keyword>URL</SPAN>-адрес программы, которая должна 
            обрабатывать форму (это либо программа, заданная в атрибуте <SPAN 
            class=texample><SPAN class=keyword>action</SPAN></SPAN> тега <SPAN 
            class=texample><SPAN class=keyword>form</SPAN></SPAN>, либо сама 
            текущая программа, если этот атрибут опущен). Имена <SPAN 
            class=texample>name1</SPAN>, <SPAN class=texample>name2</SPAN>, 
            <SPAN class=texample>name3</SPAN> соответствуют именам элементов 
            формы, а <SPAN class=texample>value1</SPAN>, <SPAN 
            class=texample>value2</SPAN>, <SPAN class=texample>value3</SPAN> – 
            значениям этих элементов. Все специальные символы, включая <SPAN 
            class=texample>=</SPAN> и <SPAN class=texample>&amp;</SPAN>, в 
            именах или значениях этих параметров будут опущены. Поэтому не стоит 
            использовать в названиях или значениях элементов формы эти символы и 
            символы кириллицы в идентификаторах.</P>
            <P>Если в поле для ввода ввести какой-нибудь служебный символ, то он 
            будет передан в его шестнадцатеричном коде, например, символ <SPAN 
            class=texample>$</SPAN> заменится на <SPAN 
            class=texample>%24</SPAN>. Так же передаются и русские буквы.</P>
            <P>Для полей ввода текста и пароля (это элементы <SPAN 
            class=texample><SPAN class=keyword>input</SPAN></SPAN> с атрибутом 
            <SPAN class=texample>type=text</SPAN> и <SPAN 
            class=texample>type=password</SPAN>), значением будет то, что введет 
            пользователь. Если пользователь ничего не вводит в такое поле, то в 
            строке запроса будет присутствовать элемент <SPAN 
            class=texample>name=</SPAN>, где <SPAN class=texample>name</SPAN> 
            соответствует имени этого элемента формы.</P>
            <P>Для кнопок типа checkbox и radio button значение <SPAN 
            class=texample>value</SPAN> определяется атрибутом <SPAN 
            class=texample>VALUE</SPAN> в том случае, когда кнопка отмечена. Не 
            отмеченные кнопки при составлении строки запроса игнорируются 
            целиком. Несколько кнопок типа checkbox могут иметь один атрибут 
            <SPAN class=texample>NAME</SPAN> (и различные <SPAN 
            class=texample>VALUE</SPAN>), если это необходимо. Кнопки типа radio 
            button предназначены для одного из всех предложенных вариантов и 
            поэтому должны иметь одинаковый атрибут <SPAN 
            class=texample>NAME</SPAN> и различные атрибуты <SPAN 
            class=texample>VALUE</SPAN>.</P>
            <P>В принципе создавать <SPAN class=keyword>HTML-форму</SPAN> для 
            передачи данных методом <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN> не обязательно. Можно просто 
            добавить в строку <SPAN class=keyword>URL</SPAN> нужные переменные и 
            их значения.</P><A name=example.4.1></A>
            <DIV class=example><PRE>http://phpbook.info/test.php?id=10&amp;user=pit
</PRE><SPAN class=objectName>Пример 4.1. Передача данных в 
            URL</SPAN></DIV>
            <P>В связи с этим у передачи данных методом <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN> есть один 
            существенный недостаток – любой может подделать значения параметров. 
            Поэтому не советуем использовать этот метод для доступа к защищенным 
            паролем страницам, для передачи информации, влияющей на безопасность 
            работы программы или <SPAN class=keyword>сервера</SPAN>. Кроме того, 
            не стоит применять метод <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN> для передачи информации, которую не 
            разрешено изменять пользователю.</P>
            <P>Несмотря на все эти недостатки, использовать метод <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN> достаточно 
            удобно при отладке скриптов (тогда можно видеть значения и имена 
            передаваемых переменных) и для передачи параметров, не влияющих на 
            безопасность.</P>
            <H4>Для метода POST</H4>
            <P>Содержимое формы кодируется точно так же, как для метода <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN> (см. выше), но 
            вместо добавления строки к <SPAN class=keyword>URL</SPAN> содержимое 
            запроса посылается блоком данных как часть операции <SPAN 
            class=texample><SPAN class=keyword>POST</SPAN></SPAN>. Если 
            присутствует атрибут <SPAN class=texample>ACTION</SPAN>, то значение 
            <SPAN class=keyword>URL</SPAN>, которое там находится, определяет, 
            куда посылать этот блок данных. Этот метод, как уже отмечалось, 
            рекомендуется для передачи больших по объему блоков данных.</P>
            <P>Информация, введенная пользователем и отправленная <SPAN 
            class=keyword>серверу</SPAN> с помощью метода <SPAN 
            class=texample><SPAN class=keyword>POST</SPAN></SPAN>, подается на 
            стандартный ввод программе, указанной в атрибуте <SPAN 
            class=texample><SPAN class=keyword>action</SPAN></SPAN>, или 
            текущему скрипту, если этот атрибут опущен. Длина посылаемого файла 
            передается в <SPAN class=keyword>переменной окружения</SPAN> <SPAN 
            class=texample>CONTENT_LENGTH</SPAN>, а тип данных – в переменной 
            <SPAN class=texample>CONTENT_TYPE</SPAN>.</P>
            <P>Передать данные методом <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN> можно только с помощью <SPAN 
            class=keyword>HTML-формы</SPAN>, поскольку данные передаются в теле 
            запроса, а не в заголовке, как в <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN>. Соответственно и изменить значение 
            параметров можно, только изменив значение, введенное в форму. При 
            использовании <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN> пользователь не видит передаваемые 
            <SPAN class=keyword>серверу</SPAN> данные.</P>
            <P>Основное преимущество <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN> запросов – это их большая 
            безопасность и функциональность по сравнению с GET-запросами. 
            Поэтому метод <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN> чаще используют для передачи важной 
            информации, а также информации большого объема. Тем не менее не 
            стоит целиком полагаться на безопасность этого механизма, поскольку 
            данные <SPAN class=texample><SPAN class=keyword>POST</SPAN></SPAN> 
            запроса также можно подделать, например создав html-файл на своей 
            машине и заполнив его нужными данными. Кроме того, не все <SPAN 
            class=keyword>клиенты</SPAN> могут применять метод <SPAN 
            class=texample><SPAN class=keyword>POST</SPAN></SPAN>, что 
            ограничивает варианты его использования.</P>
            <P><A name=keyword-context.8></A>При отправке данных на <SPAN 
            class=keyword>сервер</SPAN> любым методом передаются не только сами 
            данные, введенные пользователем, но и ряд переменных, называемых 
            <SPAN class=keyword>переменными окружения</SPAN>, характеризующих 
            <SPAN class=keyword>клиента</SPAN>, историю его работы, пути к 
            файлам и т.п. Вот некоторые из <SPAN class=keyword>переменных 
            окружения</SPAN>:</P>
            <UL>
              <LI><A name=keyword-context.9></A><SPAN class=texample><SPAN 
              class=keyword_def>REMOTE_ADDR</SPAN></SPAN> – IP-адрес хоста 
              (компьютера), отправляющего запрос;
              <LI><A name=keyword-context.10></A><SPAN class=texample><SPAN 
              class=keyword_def>REMOTE_HOST</SPAN></SPAN> – имя хоста, с 
              которого отправлен запрос;
              <LI><A name=keyword-context.11></A><SPAN class=texample><SPAN 
              class=keyword_def>HTTP_REFERER</SPAN></SPAN> – адрес страницы, 
              ссылающейся на текущий скрипт; 
              <LI><A name=keyword-context.12></A><SPAN class=texample><SPAN 
              class=keyword_def>REQUEST_METHOD</SPAN></SPAN> – метод, который 
              был использован при отправке запроса;
              <LI><A name=keyword-context.13></A><SPAN class=texample><SPAN 
              class=keyword_def>QUERY_STRING</SPAN></SPAN> – информация, 
              находящаяся в <SPAN class=keyword>URL</SPAN> после знака вопроса; 
              <LI><A name=keyword-context.14></A><SPAN class=texample><SPAN 
              class=keyword_def>SCRIPT_NAME</SPAN></SPAN> – виртуальный путь к 
              программе, которая должна выполняться;
              <LI><A name=keyword-context.15></A><SPAN class=texample><SPAN 
              class=keyword_def>HTTP_USER_AGENT</SPAN></SPAN> – информация о 
              браузере, который использует <SPAN 
            class=keyword>клиент</SPAN></LI></UL>
            <H3>Обработка запросов с помощью PHP</H3>
            <P>До сих пор мы упоминали только, что запросы <SPAN 
            class=keyword>клиента</SPAN> обрабатываются на <SPAN 
            class=keyword>сервере</SPAN> с помощью специальной программы. На 
            самом деле эту программу мы можем написать сами, в том числе и на 
            языке PHP, и она будет делать с полученными данными все, что мы 
            захотим. Для того чтобы написать эту программу, необходимо 
            познакомиться с некоторыми правилами и инструментами, предлагаемыми 
            для этих целей PHP.</P>
            <P>Внутри PHP-скрипта существует несколько способов получения 
            доступа к данным, переданным <SPAN class=keyword>клиентом</SPAN> по 
            протоколу <SPAN class=keyword>HTTP</SPAN>. До версии PHP 4.1.0 
            доступ к таким данным осуществлялся по именам переданных переменных 
            (напомним, что данные передаются в виде пар «имя переменной, символ 
            «=», значение переменной»). Таким образом, если, например, было 
            передано <SPAN class=texample>first_name=Nina</SPAN>, то внутри 
            скрипта появлялась переменная <SPAN 
            class=texample>$first_name</SPAN> со значением <SPAN 
            class=texample>Nina</SPAN>. Если требовалось различать, каким 
            методом были переданы данные, то использовались ассоциативные 
            массивы <SPAN class=texample><SPAN 
            class=keyword>$HTTP_POST_VARS</SPAN></SPAN> и <SPAN 
            class=texample><SPAN class=keyword>$HTTP_GET_VARS</SPAN></SPAN>, 
            ключами которых являлись имена переданных переменных, а значениями – 
            соответственно значения этих переменных. Таким образом, если пара 
            <SPAN class=texample>first_name</SPAN>=<SPAN 
            class=texample>Nina</SPAN> передана методом <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN>, то <SPAN 
            class=texample>$HTTP_GET_VARS["first_name"]="Nina"</SPAN>.</P>
            <P>Использовать в программе имена переданных переменных напрямую 
            небезопасно. Поэтому было решено начиная с PHP 4.1.0 задействовать 
            для обращения к переменным, переданным с помощью HTTP-запросов, 
            специальный массив – <SPAN class=texample><SPAN 
            class=keyword>$_REQUEST</SPAN></SPAN>. Этот массив содержит данные, 
            переданные методами <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN> и <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN>, а также с помощью <SPAN 
            class=keyword>HTTP</SPAN> cookies. Это суперглобальный ассоциативный 
            массив, т.е. его значения можно получить в любом месте программы, 
            используя в качестве ключа имя соответствующей переменной (элемента 
            формы).</P>
            <P><B>Пример 4.2.</B> Допустим, мы создали форму для регистрации 
            участников заочной школы программирования, как в приведенном выше 
            примере. Тогда в файле <SPAN class=texample>1.php</SPAN>, 
            обрабатывающем эту форму, можно написать следующее:</P><A 
            name=example.4.2></A>
            <DIV class=example><PRE>&lt;?php
$str = "Здравствуйте, 
    ".$_REQUEST["first_name"]. " 
    ".$_REQUEST["last_name"]."! &lt;br&gt;";
$str .="Вы выбрали для изучения курс по 
    ".$_REQUEST["kurs"];
echo $str;
?&gt;
</PRE><SPAN class=objectName>Пример 4.2. Файл 1.php, обрабатывающий 
            форму form.html</SPAN></DIV>
            <P>Тогда, если в форму мы ввели имя «Вася», фамилию «Петров» и 
            выбрали среди всех курсов курс по PHP, на экране браузера получим 
            такое сообщение:</P>
            <DIV class=example><PRE>Здравствуйте, Вася Петров! 
Вы выбрали для изучения курс по PHP 
</PRE></DIV>
            <P>После введения массива <SPAN class=texample><SPAN 
            class=keyword>$_REQUEST</SPAN></SPAN> массивы <SPAN 
            class=texample><SPAN class=keyword>$HTTP_POST_VARS</SPAN></SPAN> и 
            <SPAN class=texample><SPAN 
            class=keyword>$HTTP_GET_VARS</SPAN></SPAN> для однородности были 
            переименованы в <SPAN class=texample><SPAN 
            class=keyword>$_POST</SPAN></SPAN> и <SPAN class=texample><SPAN 
            class=keyword>$_GET</SPAN></SPAN> соответственно, но сами они из 
            обихода не исчезли из соображений совместимости с предыдущими 
            версиями PHP. В отличие от своих предшественников, массивы <SPAN 
            class=texample><SPAN class=keyword>$_POST</SPAN></SPAN> и <SPAN 
            class=texample><SPAN class=keyword>$_GET</SPAN></SPAN> стали 
            суперглобальными, т.е. доступными напрямую и внутри функций и 
            методов.</P>
            <P>Приведем пример использования этих массивов. Допустим, нам нужно 
            обработать форму, содержащую элементы ввода с именами <SPAN 
            class=texample>first_name</SPAN>, <SPAN 
            class=texample>last_name</SPAN>, <SPAN class=texample>kurs</SPAN> 
            (например, форму <SPAN class=texample>form.html</SPAN>, приведенную 
            выше). Данные были переданы методом <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN>, и данные, переданные другими 
            методами, мы обрабатывать не хотим. Это можно сделать следующим 
            образом:</P>
            <DIV class=example><PRE>&lt;?php
$str = "Здравствуйте, 
    ".$_POST ["first_name"]."
    ".$_POST ["last_name"] ."! &lt;br&gt;";
$str .= "Вы выбрали для изучения курс по ".
        $_POST["kurs"];
echo $str;
?&gt;
</PRE></DIV>
            <P>Тогда на экране браузера, если мы ввели имя «Вася», фамилию 
            «Петров» и выбрали среди всех курсов курс по PHP, увидим сообщение, 
            как в предыдущем примере:</P>
            <DIV class=example><PRE>Здравствуйте, Вася Петров! 
Вы выбрали для изучения курс по PHP 
</PRE></DIV>
            <P>Для того чтобы сохранить возможность обработки скриптов более 
            ранних версий, чем PHP 4.1.0, была введена директива <SPAN 
            class=texample><SPAN class=keyword>register_globals</SPAN></SPAN>, 
            разрешающая или запрещающая доступ к переменным непосредственно по 
            их именам. Если в файле настроек PHP параметр <SPAN 
            class=texample>register_globals=On</SPAN>, то к переменным, 
            переданным <SPAN class=keyword>серверу</SPAN> методами <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN> и <SPAN 
            class=texample><SPAN class=keyword>POST</SPAN></SPAN>, можно 
            обращаться просто по их именам (т.е. можно писать <SPAN 
            class=texample>$first_name</SPAN>). Если же <SPAN 
            class=texample>register_globals=Off</SPAN>, то нужно писать <SPAN 
            class=texample>$_REQUEST["first_name"]</SPAN> или <SPAN 
            class=texample>$_POST["first_name"]</SPAN>, <SPAN 
            class=texample>$_GET["first_name"]</SPAN>, <SPAN 
            class=texample>$HTTP_POST_VARS["first_name"]</SPAN>, <SPAN 
            class=texample>$HTTP_GET_VARS["first_name"]</SPAN>. С точки зрения 
            безопасности эту директиву лучше отключать (т.е. <SPAN 
            class=texample>register_globals=Off</SPAN>). При включенной 
            директиве <SPAN class=texample><SPAN 
            class=keyword>register_globals</SPAN></SPAN> перечисленные выше 
            массивы также будут содержать данные, переданные <SPAN 
            class=keyword>клиентом</SPAN>.</P>
            <P>Иногда возникает необходимость узнать значение какой-либо <SPAN 
            class=keyword>переменной окружения</SPAN>, например метод, 
            использовавшийся при передаче запроса или IP-адрес компьютера, 
            отправившего запрос. Получить такую информацию можно с помощью 
            функции <SPAN class=texample><SPAN 
            class=keyword>getenv()</SPAN></SPAN>. Она возвращает значение <SPAN 
            class=keyword>переменной окружения</SPAN>, имя которой передано ей в 
            качестве параметра. </P><A name=example.4.3></A>
            <DIV class=example><PRE>&lt;?
getenv("REQUEST_METHOD"); 
    // возвратит использованный метод
echo getenv ("REMOTE_ADDR");    
    // выведет IP-адрес пользователя, 
    // пославшего запрос
?&gt;
</PRE><SPAN class=objectName>Пример 4.3. Использование функции 
            getenv()</SPAN></DIV>
            <P>Как мы уже говорили, если используется метод <SPAN 
            class=texample><SPAN class=keyword>GET</SPAN></SPAN>, то данные 
            передаются добавлением строки запроса в виде пар 
            «имя_переменной=значение к <SPAN class=keyword>URL</SPAN>-адресу 
            ресурса». Все, что записано в <SPAN class=keyword>URL</SPAN> после 
            знака вопроса, можно получить с помощью команды</P>
            <DIV class=example><PRE>getenv("QUERY_STRING");
</PRE></DIV>
            <P>Благодаря этому можно по методу <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN> передавать данные в каком-нибудь 
            другом виде. Например, указывать только значения нескольких 
            параметров через знак плюс, а в скрипте разбирать строку запроса на 
            части или можно передавать значение всего одного параметра. В этом 
            случае в массиве <SPAN class=texample><SPAN 
            class=keyword>$_GET</SPAN></SPAN> появится пустой элемент с ключом, 
            равным этому значению (всей строке запроса), причем символ «<SPAN 
            class=texample>+</SPAN>», встретившийся в строке запроса, будет 
            заменен на подчеркивание «<SPAN class=texample>_</SPAN>».</P>
            <P>Методом <SPAN class=texample><SPAN 
            class=keyword>POST</SPAN></SPAN> данные передаются только с помощью 
            форм, и пользователь (<SPAN class=keyword>клиент</SPAN>) не видит, 
            какие именно данные отправляются <SPAN class=keyword>серверу</SPAN>. 
            Чтобы их увидеть, хакер должен подменить нашу форму своей. Тогда 
            <SPAN class=keyword>сервер</SPAN> отправит результаты обработки 
            неправильной формы не туда, куда нужно. Чтобы этого избежать, можно 
            проверять адрес страницы, с которой были посланы данные. Это можно 
            сделать опять же с помощью функции <SPAN class=texample><SPAN 
            class=keyword>getenv()</SPAN></SPAN>:</P>
            <DIV class=example><PRE>getenv("HTTP_REFERER");
</PRE></DIV>
            <P>Теперь самое время решить задачу, сформулированную в начале 
            лекции.</P>
            <H4>Пример обработки запроса с помощью PHP</H4>
            <P>Напомним, в чем состояла задача, и уточним ее формулировку. Нужно 
            написать форму для регистрации участников заочной школы 
            программирования и после регистрации отправить участнику сообщение. 
            Мы назвали это сообщение универсальным письмом, но оно будет немного 
            отличаться от того письма, которое мы составили на предыдущей 
            лекции. Здесь мы также не будем отправлять что-либо по электронной 
            почте, дабы не уподобляться спамерам, а просто сгенерируем это 
            сообщение и выведем его на экран браузера. Начальный вариант формы 
            регистрации мы уже приводили выше. Изменим его таким образом, чтобы 
            каждый регистрирующийся мог выбрать сколько угодно курсов для 
            посещения, и не будем подтверждать получение регистрационной 
            формы.</P><A name=example.4.4></A>
            <DIV class=example><PRE>&lt;h2&gt;Форма для регистрации студентов&lt;/h2&gt;
&lt;form action="1.php" method=POST&gt;
Имя &lt;br&gt;&lt;input type=text name="first_name" 
    value="Введите Ваше имя"&gt;&lt;br&gt;
Фамилия &lt;br&gt;&lt;input type=text name="last_name"&gt;&lt;br&gt;
E-mail &lt;br&gt;&lt;input type=text name="email"&gt;&lt;br&gt;
&lt;p&gt; Выберите курс, который вы бы хотели посещать:&lt;br&gt;
&lt;input type=checkbox name='kurs[]' value='PHP'&gt;PHP&lt;br&gt;
&lt;input type=checkbox name='kurs[]' value='Lisp'&gt;Lisp&lt;br&gt;
&lt;input type=checkbox name='kurs[]' value='Perl'&gt;Perl&lt;br&gt;
&lt;input type=checkbox name='kurs[]' value='Unix'&gt;Unix&lt;br&gt;
&lt;P&gt;Что вы хотите, чтобы мы знали о вас? &lt;BR&gt;
&lt;textarea name="comment" cols=32 rows=5&gt;&lt;/textarea&gt;
&lt;input type=submit value="Отправить"&gt;
&lt;input type=reset value="Отменить"&gt;
&lt;/form&gt;
</PRE><SPAN class=objectName>Листинг 4.4. 
            form_final.html</SPAN></DIV>
            <P>Здесь все достаточно просто и понятно. Единственное, что можно 
            отметить, – это способ передачи значений элемента <SPAN 
            class=texample>checkbox</SPAN>. Когда мы пишем в имени элемента 
            <SPAN class=texample>kurs[]</SPAN>, это значит, что первый 
            отмеченный элемент <SPAN class=texample>checkbox</SPAN> будет 
            записан в первый элемент массива <SPAN class=texample>kurs</SPAN>, 
            второй отмеченный <SPAN class=texample>checkbox</SPAN> – во второй 
            элемент массива и т.д. Можно, конечно, просто дать разные имена 
            элементам <SPAN class=texample>checkbox</SPAN>, но это усложнит 
            обработку данных, если курсов будет много.</P>
            <P>Скрипт, который все это будет разбирать и обрабатывать, 
            называется <SPAN class=texample>1.php</SPAN> (форма ссылается именно 
            на этот файл, что записано в ее атрибуте <SPAN class=texample><SPAN 
            class=keyword>action</SPAN></SPAN>). По умолчанию используется для 
            передачи метод <SPAN class=texample><SPAN 
            class=keyword>GET</SPAN></SPAN>, но мы указали <SPAN 
            class=texample><SPAN class=keyword>POST</SPAN></SPAN>. По полученным 
            сведениям от зарегистрировавшегося человека, скрипт генерирует 
            соответствующее сообщение. Если человек выбрал какие-то курсы, то 
            ему выводится сообщение о времени их проведения и о лекторах, 
            которые их читают. Если человек ничего не выбрал, то выводится 
            сообщение о следующем собрании заочной школы программистов 
            (ЗШП).</P><A name=example.4.5></A>
            <DIV class=example><PRE>&lt;?
// создадим массивы соответствий курс-время его 
// проведения и курс-его лектор
$times = array("PHP"=&gt;"14.30","Lisp"=&gt;"12.00",
    "Perl"=&gt;"15.00","Unix"=&gt;"14.00");
$lectors = array("PHP"=&gt;"Василий Васильевич", 
"Lisp"=&gt;"Иван Иванович", "Perl"=&gt;"Петр Петрович", "Unix"=&gt;"Семен Семенович");
define("SIGN","С уважением, администрация"); 
    // определяем подпись письма как константу
define("MEETING_TIME","18.00"); 
    // задаем время собрания студентов
$date = "12 мая"; // задаем дату проведения лекций
    //начинаем составлять текст сообщения
$str = "Здравствуйте, уважаемый " . $_POST["first_name"] 
    . " " . $_POST["last_name"]."!&lt;br&gt;";
$str .= "&lt;br&gt;Сообщаем Вам, что ";
$kurses = $_POST["kurs"];   // сохраним в этой переменной 
                                        // список выбранных курсов
if (!isset($kurses)) { // если не выбран ни один курс 
    $event = "следующее собрание студентов";
    $str .= "$event состоится $date ". MEETING_TIME . "&lt;br&gt;";
} else { // если хотя бы один курс выбран
    $event = "выбранные Вами лекции состоятся $date &lt;ul&gt;";
        //функция count вычисляет число элементов в массиве
    for ($i=0;$i&lt;count($kurses);$i++){ 
                          // для каждого выбранного курса
        $k = $kurses[$i]; // запоминаем название курса
        $lect = $lect . "&lt;li&gt;лекция по $k в $times[$k]"; 
                          // составляем сообщение
        $lect .= " (Ваш лектор, $lectors[$k])";
    }
    $event = $event . $lect . "&lt;/ul&gt;";
    $str .= "$event";
}
$str .= "&lt;br&gt;". SIGN; // добавляем подпись
echo $str; // выводим сообщение на экран
?&gt;
</PRE><SPAN class=objectName>Листинг 4.5. Скрипт 1.php, 
            обрабатывающий форму form_final.html</SPAN></DIV>
            <H3>Заключение</H3>
            <P>Подведем итоги. Мы научились отличать <SPAN 
            class=keyword>клиента</SPAN> от <SPAN class=keyword>сервера</SPAN> и 
            компьютер-<SPAN class=keyword>сервер</SPAN> от программы-<SPAN 
            class=keyword>сервера</SPAN>, познакомились с основными методами, 
            используемыми для передачи данных на <SPAN 
            class=keyword>сервер</SPAN>, изучили средства, предлагаемые языком 
            PHP для обработки клиентских запросов, и испробовали их на практике. 
            В принципе этого достаточно для того, чтобы создавать 
            клиент-серверные приложения.</P></TD></TR>
        <TR>
          <TD height=8><IMG height=8 
            src="Обработка запросов с помощью PHP.files/empty.gif" 
        width=1></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG height=1 src="Обработка запросов с помощью PHP.files/empty.gif" 
      width=8></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG height=1 
      src="Обработка запросов с помощью PHP.files/empty.gif" width=1></TD></TR>
  <TR>
    <TD class=ltxt align=middle>© 2003-2005 INTUIT.ru. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom --></BODY></HTML>
