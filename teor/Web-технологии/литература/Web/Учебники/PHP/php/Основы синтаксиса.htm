<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://www.intuit.ru/department/pl/plphp/2/plphp_2.html -->
<HTML><HEAD><TITLE>INTUIT.ru::Интернет-Университет Информационных Технологий</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251"><LINK 
href="Основы синтаксиса.files/printable.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY leftMargin=0 topMargin=6 marginwidth="0" marginheight="6">
<DIV align=left><SPAN style="FONT-WEIGHT: bold; COLOR: #000000">&nbsp;&nbsp; 
<SPAN style="FONT-SIZE: 12pt">Интернет-Университет Информационных 
Технологий</SPAN> </SPAN></DIV>&nbsp;&nbsp; <SPAN 
style="COLOR: #330066; TEXT-DECORATION: underline" 
align="rright">http://www.INTUIT.ru</SPAN> 
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD colSpan=3 height=8><IMG height=8 
      src="Основы синтаксиса.files/empty.gif" width=1></TD></TR>
  <TR>
    <TD class=orang colSpan=3 height=1><IMG height=1 
      src="Основы синтаксиса.files/empty.gif" width=1></TD></TR>
  <TR>
    <TD colSpan=3 height=8><IMG height=8 
      src="Основы синтаксиса.files/empty.gif" width=1></TD></TR>
  <TR vAlign=top>
    <TD><IMG height=1 src="Основы синтаксиса.files/empty.gif" width=8></TD>
    <TD><!-- content -->
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=head>Язык программирования PHP</TD></TR>
        <TR>
          <TD height=4><IMG height=4 src="Основы синтаксиса.files/empty.gif" 
            width=1></TD></TR>
        <TR>
          <TD class=orang height=1><IMG height=1 
            src="Основы синтаксиса.files/empty.gif" width=1></TD></TR>
        <TR>
          <TD height=8><IMG height=8 src="Основы синтаксиса.files/empty.gif" 
            width=1></TD></TR>
        <TR>
          <TD><SPAN class=headsub>2. Лекция: Основы синтаксиса: версия для 
            печати и PDA</SPAN> <BR><SPAN class=rtxt>Лекция посвящена изучению 
            основ синтаксиса PHP. Рассматриваются способы разделения инструкций, 
            создания комментариев, переменные, константы и типы данных, 
            операторы. Пример – создание заготовки письма. </SPAN></TD></TR>
        <TR>
          <TD height=8><IMG height=8 src="Основы синтаксиса.files/empty.gif" 
            width=1></TD></TR>
        <TR>
          <TD class=orang height=1><IMG height=1 
            src="Основы синтаксиса.files/empty.gif" width=1></TD></TR>
        <TR>
          <TD height=8><IMG height=8 src="Основы синтаксиса.files/empty.gif" 
            width=1></TD></TR>
        <TR>
          <TD>
            <H3></H3>
            <P>Мы приступаем к изучению <SPAN class=keyword>основных элементов 
            синтаксиса</SPAN> языка PHP. Рассмотрим способы <SPAN 
            class=keyword>разделения инструкций</SPAN> и создания <SPAN 
            class=keyword>комментариев</SPAN>, <SPAN 
            class=keyword>переменные</SPAN>, <SPAN 
            class=keyword>константы</SPAN>, типы данных и <SPAN 
            class=keyword>операторы</SPAN>. </P>
            <P>В качестве примера решим задачу <SPAN class=keyword>создания 
            заготовки электронного письма</SPAN>. Ее смысл заключается в 
            следующем. </P>
            <P>Допустим, у вас есть какое-то объявление и несколько разных 
            людей, которым нужно это объявление отправить. Для этого вы делаете 
            заготовку с содержанием объявления, внутри которого есть ряд 
            изменяющихся (в зависимости от потенциального получателя) 
            параметров. </P>
            <H3>Основной синтаксис</H3>
            <P>Первое, что нужно знать относительно синтаксиса PHP, – это то, 
            как он встраивается в HTML-код, как интерпретатор узнает, что это 
            код на языке PHP. В предыдущей лекции мы уже говорили об этом. 
            Повторяться не будем, отметим только, что в примерах мы чаще всего 
            будем использовать вариант <SPAN class=texample>&lt;?php 
            ?&gt;</SPAN>, и иногда сокращенный вариант <SPAN 
            class=texample>&lt;? ?&gt;</SPAN>. </P>
            <H3>Разделение инструкций</H3>
            <P>Программа на PHP (да и на любом другом языке программирования) – 
            это набор команд (инструкций). Обработчику программы (парсеру) 
            необходимо как-то отличать одну команду от другой. Для этого 
            используются специальные символы – разделители. В PHP инструкции 
            разделяются так же, как и в Cи или Perl, – каждое выражение 
            заканчивается точкой с запятой. </P>
            <P>Закрывающий тег «<SPAN class=texample>?&gt;</SPAN>» также 
            подразумевает конец инструкции, поэтому перед ним точку с запятой не 
            ставят. Например, два следующих фрагмента кода эквивалентны: </P>
            <DIV class=example><PRE>&lt;?php
echo "Hello, world!"; // точка с запятой
                      // в конце команды
                      // обязательна
?&gt;
&lt;?php
echo "Hello, world!" ?&gt;
&lt;!-- точка с запятой 
    опускается из-за "?&gt;" --&gt;
</PRE></DIV>
            <H3>Комментарии</H3>
            <P><A name=keyword-context.1></A>Часто при написании программ 
            возникает необходимость делать какие-либо <SPAN 
            class=keyword_def>комментарии</SPAN> к коду, которые никак не влияют 
            на сам код, а только поясняют его. Это важно при создании больших 
            программ и в случае, если несколько человек работают над одной 
            программой. При наличии <SPAN class=keyword>комментариев</SPAN> в 
            программе в ее коде разобраться гораздо проще. Кроме того, если 
            решать задачу по частям, недоделанные части решения также удобно 
            <SPAN class=keyword>комментировать</SPAN>, чтобы не забыть о них в 
            дальнейшем. Во всех языках программирования предусмотрена 
            возможность включать <SPAN class=keyword>комментарии</SPAN> в код 
            программы. PHP поддерживает несколько видов <SPAN 
            class=keyword>комментариев</SPAN>: в стиле Cи, C++ и оболочки Unix. 
            Символы <SPAN class=texample>//</SPAN> и <SPAN 
            class=texample>#</SPAN> обозначают начало однострочных <SPAN 
            class=keyword>комментариев</SPAN>, <SPAN class=texample>/*</SPAN> и 
            <SPAN class=texample>*/</SPAN> – соответственно начало и конец 
            многострочных <SPAN class=keyword>комментариев</SPAN>. </P><A 
            name=example.2.1></A>
            <DIV class=example><PRE>&lt;?php
echo "Меня зовут Вася";
  // Это однострочный комментарий 
  // в стиле С++
echo "Фамилия моя Петров"; 
/* Это многострочный комментарий.
Здесь можно написать несколько строк. 
При исполнении программы все, что
находится здесь (закомментировано),
будет игнорировано. */
echo"Я изучаю PHP в INTUIT.ru";
  # Это комментарий в стиле 
  # оболочки Unix
?&gt;
</PRE><SPAN class=objectName>Пример 2.1. Использование комментариев 
            в PHP</SPAN></DIV>
            <H3>Переменные, константы и операторы</H3>
            <P>Важным элементом каждого языка являются <SPAN 
            class=keyword>переменные</SPAN>, <SPAN 
            class=keyword>константы</SPAN> и <SPAN 
            class=keyword>операторы</SPAN>, применяемые к этим <SPAN 
            class=keyword>переменным</SPAN> и <SPAN 
            class=keyword>константам</SPAN>. Рассмотрим, как выделяются и 
            обрабатываются эти элементы в PHP. </P>
            <H4>Переменные</H4>
            <P><SPAN class=keyword>Переменная</SPAN> в PHP обозначается знаком 
            доллара, за которым следует ее имя. Например: </P>
            <DIV class=example><PRE>$my_var
</PRE></DIV>
            <P>Имя <SPAN class=keyword>переменной</SPAN> чувствительно к 
            регистру, т.е. <SPAN class=keyword>переменные</SPAN><SPAN 
            class=texample> $my_var</SPAN> и <SPAN class=texample>$My_var</SPAN> 
            различны. </P>
            <P>Имена <SPAN class=keyword>переменных</SPAN> соответствуют тем же 
            правилам, что и остальные наименования в PHP: правильное имя <SPAN 
            class=keyword>переменной</SPAN> должно начинаться с буквы или 
            символа подчеркивания с последующими в любом количестве буквами, 
            цифрами или символами подчеркивания. </P>
            <P>В PHP 3 <SPAN class=keyword>переменные</SPAN> всегда 
            присваивались по значению. То есть когда вы присваиваете выражение 
            <SPAN class=keyword>переменной</SPAN>, все значения оригинального 
            выражения копируется в эту <SPAN class=keyword>переменную</SPAN>. 
            Это означает, к примеру, что после присвоения одной <SPAN 
            class=keyword>переменной</SPAN> значения другой изменение одной из 
            них не влияет на значение другой. </P><A name=example.2.2></A>
            <DIV class=example><PRE>&lt;?php
$first = ' Text '; // Присваиваем $first
                   // значение 
                   // ' Text '
$second = $first; // Присваиваем $second
                  // значение 
                  // переменной $first
$first = ' New text '; // Изменяем
                       // значение
                       // $first 
                       // на ' New text '
echo "Переменая с именем first " .
     "равна $first &lt;br&gt;"; 
        // выводим значение $first
echo "Переменая с именем second " .
     "равна $second"; 
        // выводим значение $second
?&gt;
</PRE><SPAN class=objectName>Пример 2.2. Присваивание по 
            значению</SPAN></DIV>
            <P>Результат работы этого скрипта будет следующим: </P>
            <DIV class=example><PRE>Переменная с именем first равна New text 
Переменная с именем second равна Text 
</PRE></DIV>
            <P>PHP 4, кроме этого, предлагает еще один способ присвоения 
            значений <SPAN class=keyword>переменным</SPAN>: присвоение по 
            ссылке. Для того чтобы присвоить значение <SPAN 
            class=keyword>переменной</SPAN> по ссылке, это значение должно иметь 
            имя, т.е. оно должно быть представлено какой-либо <SPAN 
            class=keyword>переменной</SPAN>. Чтобы указать, что значение одной 
            <SPAN class=keyword>переменной</SPAN> присваивается другой <SPAN 
            class=keyword>переменной</SPAN> по ссылке, нужно перед именем первой 
            <SPAN class=keyword>переменной</SPAN> поставить знак амперсанд <SPAN 
            class=texample>&amp;</SPAN>. </P>
            <P>Рассмотрим тот же пример, что и выше, только будем присваивать 
            значение <SPAN class=keyword>переменной</SPAN><SPAN class=texample> 
            first </SPAN><SPAN class=keyword>переменной</SPAN><SPAN 
            class=texample> second</SPAN> по ссылке: </P><A 
name=example.2.3></A>
            <DIV class=example><PRE>&lt;?php
$first = ' Text '; // Присваиваем $first
                   // значение ' Text '
$second = &amp;$first;  
/* Делаем ссылку на $first через $second.
   Теперь значения этих переменных
   будут всегда совпадать */
// Изменим значение $first
// на ' New text '
$first = ' New text ';
echo "Переменная с именем first " .
     "равна $first &lt;br&gt;"; 
// выведем значения обеих переменных
echo "Переменная с именем second " .
     "равна $second";
?&gt;
</PRE><SPAN class=objectName>Пример 2.3. Присваивание по 
            ссылке</SPAN></DIV>
            <P>Этот скрипт выведет следующее: </P>
            <DIV class=example><PRE>Переменная с именем first равна New text.
Переменная с именем second равна New text. 
</PRE></DIV>
            <P>То есть вместе с <SPAN class=keyword>переменной</SPAN><SPAN 
            class=texample>$first </SPAN>изменилась и <SPAN 
            class=keyword>переменная</SPAN><SPAN class=texample> $second</SPAN>. 
            </P>
            <H4>Константы</H4>
            <P><A name=keyword-context.2></A>Для хранения постоянных величин, 
            т.е. таких величин, значение которых не меняется в ходе выполнения 
            скрипта, используются <SPAN class=keyword_def>константы</SPAN>. 
            Такими величинами могут быть математические <SPAN 
            class=keyword>константы</SPAN>, пароли, пути к файлам и т.п. 
            Основное отличие <SPAN class=keyword>константы</SPAN> от <SPAN 
            class=keyword>переменной</SPAN> состоит в том, что ей нельзя 
            присвоить значение больше одного раза и ее значение нельзя 
            аннулировать после ее объявления. Кроме того, у <SPAN 
            class=keyword>константы</SPAN> нет приставки в виде знака доллара и 
            ее нельзя определить простым присваиванием значения. Как же тогда 
            можно определить <SPAN class=keyword>константу</SPAN>? Для этого 
            существует специальная функция <SPAN class=texample>define()</SPAN>. 
            Ее синтаксис таков: </P>
            <DIV class=example><PRE>define("Имя_константы", 
       "Значение_константы", 
       [Нечувствительность_к_регистру])
</PRE></DIV>
            <P>По умолчанию имена <SPAN class=keyword>констант</SPAN> 
            чувствительны к регистру. Для каждой <SPAN 
            class=keyword>константы</SPAN> это можно изменить, указав в качестве 
            значения аргумента <SPAN 
            class=texample>Нечувствительность_к_регистру</SPAN> значение <SPAN 
            class=texample>True</SPAN>. Существует соглашение, по которому имена 
            <SPAN class=keyword>констант</SPAN> всегда пишутся в верхнем 
            регистре. </P>
            <P>Получить значение <SPAN class=keyword>константы</SPAN> можно, 
            указав ее имя. В отличие от <SPAN class=keyword>переменных</SPAN>, 
            не нужно предварять имя <SPAN class=keyword>константы</SPAN> 
            символом <SPAN class=texample>$</SPAN>. Кроме того, для получения 
            значения <SPAN class=keyword>константы</SPAN> можно использовать 
            функцию <SPAN class=texample>constant()</SPAN> с именем <SPAN 
            class=keyword>константы</SPAN> в качестве параметра. </P><A 
            name=example.2.4></A>
            <DIV class=example><PRE>&lt;?php
// определяем константу 
// PASSWORD
define("PASSWORD","qwerty"); 
// определяем регистронезависимую 
// константу PI со значением 3.14
define("PI","3.14", True);
// выведет значение константы PASSWORD, 
// т.е. qwerty  
echo (PASSWORD);
// тоже выведет qwerty  
echo constant("PASSWORD");
echo (password);
/* выведет password и предупреждение, 
   поскольку мы ввели регистрозависимую
   константу PASSWORD */
// выведет 3.14, поскольку константа PI 
// регистронезависима по определению
echo pi;    
?&gt;
</PRE><SPAN class=objectName>Пример 2.4. Константы в 
PHP</SPAN></DIV>
            <P>Кроме <SPAN class=keyword>переменных</SPAN>, объявляемых 
            пользователем, о которых мы только что рассказали, в PHP существует 
            ряд <SPAN class=keyword>констант</SPAN>, определяемых самим 
            интерпретатором. Например, <SPAN class=keyword>константа</SPAN><SPAN 
            class=texample> __FILE__</SPAN> хранит имя файла программы (и путь к 
            нему), которая выполняется в данный момент, <SPAN 
            class=texample>__FUNCTION__</SPAN> содержит имя функции, <SPAN 
            class=texample>__CLASS__</SPAN> – имя класса, <SPAN 
            class=texample>PHP_VERSION</SPAN> – версия интерпретатора PHP. 
            Полный список предопределенных <SPAN class=keyword>констант</SPAN> 
            можно получить, прочитав руководство по PHP. </P>
            <H4>Операторы</H4>
            <P><A name=keyword-context.3></A><SPAN 
            class=keyword_def>Операторы</SPAN> позволяют выполнять различные 
            действия с <SPAN class=keyword>переменными</SPAN>, <SPAN 
            class=keyword>константами</SPAN> и выражениями. Мы еще не упоминали 
            о том, что такое выражение. Выражение можно определить как все, что 
            угодно, что имеет значение. <SPAN class=keyword>Переменные</SPAN> и 
            <SPAN class=keyword>константы</SPAN> – это основные и наиболее 
            простые формы выражений. Существует множество операций (и 
            соответствующих им <SPAN class=keyword>операторов</SPAN>), которые 
            можно производить с выражениями. Рассмотрим некоторые из них 
            подробнее. </P>
            <DIV class=xml_table_env><A name=table.2.1></A>
            <TABLE class=xml_table cellSpacing=1 cellPadding=2 border=0>
              <CAPTION>Таблица 2.1. Арифметические операторы</CAPTION>
              <TBODY>
              <TR>
                <TH bgColor=#d8d8d8>Обозначение</TH>
                <TH bgColor=#d8d8d8>Название</TH>
                <TH bgColor=#d8d8d8>Пример</TH></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
class=texample>+</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Сложение</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a + 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
class=texample>-</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Вычитание</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a - 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
class=texample>*</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Умножение</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a * 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
class=texample>/</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Деление</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a / 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
class=texample>%</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Остаток от деления</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a % 
                  $b</SPAN></TD></TR></TBODY></TABLE></DIV>
            <DIV class=xml_table_env><A name=table.2.2></A>
            <TABLE class=xml_table cellSpacing=1 cellPadding=2 border=0>
              <CAPTION>Таблица 2.2. Строковые операторы</CAPTION>
              <TBODY>
              <TR>
                <TH bgColor=#d8d8d8>Обозначение</TH>
                <TH bgColor=#d8d8d8>Название</TH>
                <TH bgColor=#d8d8d8>Пример</TH></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
class=texample>.</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                  class=keyword>Конкатенация</SPAN> (<SPAN 
                  class=keyword>сложение строк</SPAN>)</TD>
                <TD vAlign=top bgColor=#eaeaea>
                  <DIV class=example><PRE>$c = $a . $b</PRE></DIV>(это строка, состоящая из <SPAN 
                  class=texample>$a</SPAN> и <SPAN 
              class=texample>$b</SPAN>)</TD></TR></TBODY></TABLE></DIV>
            <DIV class=xml_table_env><A name=table.2.3></A>
            <TABLE class=xml_table cellSpacing=1 cellPadding=2 border=0>
              <CAPTION>Таблица 2.3. Операторы присваивания</CAPTION>
              <TBODY>
              <TR>
                <TH bgColor=#d8d8d8>Обозначение</TH>
                <TH bgColor=#d8d8d8>Название</TH>
                <TH bgColor=#d8d8d8>Описание</TH>
                <TH bgColor=#d8d8d8>Пример</TH></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
class=texample>=</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Присваивание</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                  class=keyword>Переменной</SPAN> слева от <SPAN 
                  class=keyword>оператора</SPAN> будет присвоено значение, 
                  полученное в результате выполнения каких-либо операций или 
                  <SPAN class=keyword>переменной</SPAN>/<SPAN 
                  class=keyword>константы</SPAN> с правой стороны</TD>
                <TD vAlign=top bgColor=#eaeaea>
                  <DIV class=example><PRE>$a = ($b = 4) +5;</PRE></DIV>(<SPAN 
                  class=texample>$a</SPAN> будет равна <SPAN 
                  class=texample>9</SPAN>, <SPAN class=texample>$b</SPAN> будет 
                  равна <SPAN class=texample>4</SPAN>)</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>+=</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea>Сокращение. Прибавляет к <SPAN 
                  class=keyword>переменной</SPAN> число и затем присваивает ей 
                  полученное значение</TD>
                <TD vAlign=top bgColor=#eaeaea>
                  <DIV class=example><PRE>$a += 5;</PRE></DIV>(эквивалентно <SPAN class=texample>$a 
                  = $a + 5;</SPAN>)</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>.=</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea>Сокращенно обозначает 
                  комбинацию операций <SPAN class=keyword>конкатенации</SPAN> и 
                  присваивания (сначала добавляется строка, потом полученная 
                  строка записывается в <SPAN 
class=keyword>переменную</SPAN>)</TD>
                <TD vAlign=top bgColor=#eaeaea>
                  <DIV class=example><PRE>$b = "Привет ";
$b .= "всем";
</PRE></DIV>(эквивалентно <SPAN class=texample>$b = $b . 
                  "всем";</SPAN>) 
                  <P>В результате: <SPAN class=texample>$b="Привет 
                  всем"</SPAN></P></TD></TR></TBODY></TABLE></DIV>
            <DIV class=xml_table_env><A name=table.2.4></A>
            <TABLE class=xml_table cellSpacing=1 cellPadding=2 border=0>
              <CAPTION>Таблица 2.4. Логические операторы</CAPTION>
              <TBODY>
              <TR>
                <TH bgColor=#d8d8d8>Обозначение</TH>
                <TH bgColor=#d8d8d8>Название</TH>
                <TH bgColor=#d8d8d8>Описание</TH>
                <TH bgColor=#d8d8d8>Пример</TH></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>and</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>И</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a</SPAN> 
                  и <SPAN class=texample>$b</SPAN> истинны (<SPAN 
                  class=texample>True</SPAN>)</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a and 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                  class=texample>&amp;&amp;</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>И</TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a 
                  &amp;&amp; $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>or</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Или</TD>
                <TD vAlign=top bgColor=#eaeaea>Хотя бы одна из <SPAN 
                  class=keyword>переменных</SPAN><SPAN class=texample> $a</SPAN> 
                  или <SPAN class=texample>$b</SPAN> истинна (возможно, что и 
                  обе)</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a or 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>||</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Или</TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a || 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>xor</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Исключающее или</TD>
                <TD vAlign=top bgColor=#eaeaea>Одна из <SPAN 
                  class=keyword>переменных</SPAN> истинна. Случай, когда они обе 
                  истинны, исключается</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a xor 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
class=texample>!</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Инверсия (NOT)</TD>
                <TD vAlign=top bgColor=#eaeaea>Если <SPAN 
                  class=texample>$a=True</SPAN>, то <SPAN 
                  class=texample>!$a=False</SPAN> и наоборот</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>! 
                $a</SPAN></TD></TR></TBODY></TABLE></DIV>
            <DIV class=xml_table_env><A name=table.2.5></A>
            <TABLE class=xml_table cellSpacing=1 cellPadding=2 border=0>
              <CAPTION>Таблица 2.5. Операторы сравнения</CAPTION>
              <TBODY>
              <TR>
                <TH bgColor=#d8d8d8>Обозначение</TH>
                <TH bgColor=#d8d8d8>Название</TH>
                <TH bgColor=#d8d8d8>Пример</TH>
                <TH bgColor=#d8d8d8>Описание</TH></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>==</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Равенство</TD>
                <TD vAlign=top bgColor=#eaeaea>Значения <SPAN 
                  class=keyword>переменных</SPAN> равны</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a == 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>===</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Эквивалентность</TD>
                <TD vAlign=top bgColor=#eaeaea>Равны значения и <SPAN 
                  class=keyword>типы </SPAN><SPAN 
                class=keyword>переменных</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a === 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>!=</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Неравенство</TD>
                <TD vAlign=top bgColor=#eaeaea>Значения <SPAN 
                  class=keyword>переменных</SPAN> не равны</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a != 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                  class=texample>&lt;&gt;</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Неравенство</TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a 
                  &lt;&gt; $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>!==</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Неэквивалентность</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                  class=keyword>Переменные</SPAN> не эквивалентны</TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a !== 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>&lt;</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Меньше</TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a &lt; 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>&gt;</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Больше</TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a &gt; 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                  class=texample>&lt;=</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Меньше или равно</TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a &lt;= 
                  $b</SPAN></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                  class=texample>&gt;=</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Больше или равно</TD>
                <TD vAlign=top bgColor=#eaeaea></TD>
                <TD vAlign=top bgColor=#eaeaea><SPAN class=texample>$a &gt;= 
                  $b</SPAN></TD></TR></TBODY></TABLE></DIV>
            <DIV class=xml_table_env><A name=table.2.6></A>
            <TABLE class=xml_table cellSpacing=1 cellPadding=2 border=0>
              <CAPTION>Таблица 2.6. Операторы инкремента и декремента</CAPTION>
              <TBODY>
              <TR>
                <TH bgColor=#d8d8d8>Обозначение</TH>
                <TH bgColor=#d8d8d8>Название</TH>
                <TH bgColor=#d8d8d8>Описание</TH>
                <TH bgColor=#d8d8d8>Пример</TH></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>++$a</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Пре-<SPAN 
                  class=keyword>инкремент</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Увеличивает <SPAN 
                  class=texample>$a</SPAN> на единицу и возвращает <SPAN 
                  class=texample>$a</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>
                  <DIV class=example><PRE>&lt;?
$a=4;
echo "Должно быть 4:" .$a++;
echo "Должно быть 5:" .$a;
?&gt;
</PRE></DIV></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>$a++</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Пост-<SPAN 
                  class=keyword>инкремент</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Возвращает <SPAN 
                  class=texample>$a</SPAN>, затем увеличивает <SPAN 
                  class=texample>$a</SPAN> на единицу</TD>
                <TD vAlign=top bgColor=#eaeaea></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>--$a</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Пре-<SPAN 
                  class=keyword>декремент</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Уменьшает <SPAN 
                  class=texample>$a</SPAN> на единицу и возвращает <SPAN 
                  class=texample>$a</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea></TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>$a--</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Пост-<SPAN 
                  class=keyword>декремент</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Возвращает <SPAN 
                  class=texample>$a</SPAN>, затем уменьшает <SPAN 
                  class=texample>$a</SPAN> на единицу</TD>
                <TD vAlign=top bgColor=#eaeaea></TD></TR></TBODY></TABLE></DIV>
            <H3>Типы данных</H3>
            <P>PHP поддерживает восемь простых <SPAN class=keyword>типов 
            данных</SPAN>. </P>
            <P>Четыре скалярных <SPAN class=keyword>типа</SPAN>: </P>
            <UL>
              <LI><SPAN class=keyword>boolean (логический)</SPAN>; 
              <LI><SPAN class=keyword>integer (целый)</SPAN>; 
              <LI><SPAN class=keyword>float (с плавающей точкой)</SPAN>; 
              <LI><SPAN class=keyword>string (строковый)</SPAN>. </LI></UL>
            <P>Два смешанных <SPAN class=keyword>типа</SPAN>: </P>
            <UL>
              <LI><SPAN class=keyword>array (массив)</SPAN>; 
              <LI><SPAN class=keyword>object (объект)</SPAN>. </LI></UL>
            <P>И два специальных <SPAN class=keyword>типа</SPAN>: </P>
            <UL>
              <LI><SPAN class=keyword>resource (ресурс)</SPAN>; 
              <LI><SPAN class=keyword>NULL</SPAN>. </LI></UL>
            <P>В PHP не принято явное объявление <SPAN class=keyword>типов 
            </SPAN><SPAN class=keyword>переменных</SPAN>. Предпочтительнее, 
            чтобы это делал сам интерпретатор во время выполнения программы в 
            зависимости от контекста, в котором используется <SPAN 
            class=keyword>переменная</SPAN>. Рассмотрим по порядку все 
            перечисленные <SPAN class=keyword>типы данных</SPAN>. </P>
            <H4>Тип boolean (булев или логический тип)</H4>
            <P><A name=keyword-context.4></A>Этот простейший <SPAN 
            class=keyword>тип</SPAN> выражает истинность значения, то есть <SPAN 
            class=keyword>переменная</SPAN> этого <SPAN 
            class=keyword>типа</SPAN> может иметь только два значения – истина 
            <SPAN class=texample>TRUE</SPAN> или ложь <SPAN 
            class=texample>FALSE</SPAN>. <SPAN class=keyword></SPAN></P>
            <P>Чтобы определить булев <SPAN class=keyword>тип</SPAN>, используют 
            ключевое слово <SPAN class=texample>TRUE</SPAN> или <SPAN 
            class=texample>FALSE</SPAN>. Оба регистронезависимы. </P><A 
            name=example.2.5></A>
            <DIV class=example><PRE>&lt;?php
$test = True;
?&gt;
</PRE><SPAN class=objectName>Пример 2.5. Логический тип</SPAN></DIV>
            <P>Логические <SPAN class=keyword>переменные</SPAN> используются в 
            различных <SPAN class=keyword>управляющих конструкциях</SPAN> 
            (циклах, условиях и т.п., более подробно речь о них пойдет в одной 
            из следующих лекций). Иметь <SPAN class=keyword>логический 
            тип</SPAN>, т.е. принимать только два значения, истину или ложь, 
            могут также и некоторые <SPAN class=keyword>операторы</SPAN> 
            (например, <SPAN class=keyword>оператор</SPAN> равенства). Они также 
            используются в <SPAN class=keyword>управляющих конструкциях</SPAN> 
            для проверки каких-либо условий. Например, в условной конструкции 
            проверяется истинность значения <SPAN class=keyword>оператора</SPAN> 
            или <SPAN class=keyword>переменной</SPAN> и в зависимости от 
            результата проверки выполняются те или иные действия. Здесь условие 
            может быть истинно или ложно, что как раз и отражает <SPAN 
            class=keyword>переменная</SPAN> и <SPAN 
            class=keyword>оператор</SPAN><SPAN class=keyword> логического 
            типа</SPAN>. </P><A name=example.2.6></A>
            <DIV class=example><PRE>&lt;?php
// Оператор '==' проверяет равенство
// и возвращает 
// булево значение
if ($know == False) { // если $know 
                      // имеет значение 
                      // false
echo"Изучай PHP!";  
}
if (!$know) { // то же самое, что
              // и выше, т.е. проверка 
              // имеет ли $know значение
              // false
echo"Изучай PHP!";  
}
/* оператор == проверяет, совпадает ли
   значение переменной $action со строкой
   "Изучить PHP". Если совпадает, то
   возвращает true, иначе – false.
   Если возвращено true, то выполняется
   то, что внутри фигурных скобок */
if ($action == "Изучить PHP")
{ echo"Начал изучать"; }
?&gt;
</PRE><SPAN class=objectName>Пример 2.6. Использование логического 
            типа</SPAN></DIV>
            <H4>Тип integer (целые)</H4><A name=keyword-context.5></A>
            <P>Этот <SPAN class=keyword>тип</SPAN> задает число из множества 
            целых чисел <SPAN class=texample>Z = {..., -2, -1, 0, 1, 2, 
            ...}</SPAN>. Целые могут быть указаны в десятичной, 
            шестнадцатеричной или восьмеричной системе счисления, по желанию с 
            предшествующим знаком «<SPAN class=texample>-</SPAN>» или «<SPAN 
            class=texample>+</SPAN>». </P>
            <P>Если вы используете восьмеричную систему счисления, вы должны 
            предварить число <SPAN class=texample>0</SPAN> (нулем), для 
            использования шестнадцатеричной системы нужно поставить перед числом 
            <SPAN class=texample>0x</SPAN>. </P><SPAN class=keyword></SPAN>
            <DIV class=example><PRE>&lt;?php
# десятичное число
$a = 1234;
# отрицательное число  
$a = -123;
# восьмеричное число (эквивалентно
# 83 в десятичной системе) 
$a = 0123;
# шестнадцатеричное число (эквивалентно
# 26 в десятичной системе)
$a = 0x1A;
?&gt; 
</PRE></DIV>
            <P>Размер <SPAN class=keyword>целого</SPAN> зависит от платформы, 
            хотя, как правило, максимальное значение около двух миллиардов (это 
            32-битное знаковое). Беззнаковые <SPAN class=keyword>целые</SPAN> 
            PHP не поддерживает. </P>
            <P>Если вы определите число, превышающее пределы <SPAN 
            class=keyword>целого типа</SPAN>, оно будет интерпретировано как 
            <SPAN class=keyword>число с плавающей точкой</SPAN>. Также если вы 
            используете <SPAN class=keyword>оператор</SPAN>, результатом работы 
            которого будет число, превышающее пределы <SPAN 
            class=keyword>целого</SPAN>, вместо него будет возвращено <SPAN 
            class=keyword>число с плавающей точкой</SPAN>. </P>
            <P>В PHP не существует <SPAN class=keyword>оператора</SPAN> деления 
            <SPAN class=keyword>целых</SPAN>. Результатом <SPAN 
            class=texample>1/2</SPAN> будет <SPAN class=keyword>число с 
            плавающей точкой</SPAN><SPAN class=texample> 0.5</SPAN>. Вы можете 
            привести значение к <SPAN class=keyword>целому</SPAN>, что всегда 
            округляет его в меньшую сторону, либо использовать функцию <SPAN 
            class=texample>round()</SPAN>, округляющую значение по стандартным 
            правилам. Для преобразования <SPAN class=keyword>переменной</SPAN> к 
            конкретному <SPAN class=keyword>типу</SPAN> нужно перед <SPAN 
            class=keyword>переменной</SPAN> указать в скобках нужный <SPAN 
            class=keyword>тип</SPAN>. Например, для преобразования <SPAN 
            class=keyword>переменной</SPAN><SPAN class=texample> $a=0.5</SPAN> к 
            <SPAN class=keyword>целому типу</SPAN> необходимо написать <SPAN 
            class=texample>(integer)(0.5)</SPAN> или <SPAN 
            class=texample>(integer) $a</SPAN> или использовать сокращенную 
            запись <SPAN class=texample>(int)(0.5)</SPAN>. Возможность явного 
            приведения <SPAN class=keyword>типов</SPAN> по такому принципу 
            существует для всех <SPAN class=keyword>типов данных</SPAN> 
            (конечно, не всегда значение одного <SPAN class=keyword>типа</SPAN> 
            можно перевести в другой <SPAN class=keyword>тип</SPAN>). Мы не 
            будем углубляться во все тонкости приведения <SPAN 
            class=keyword>типов</SPAN>, поскольку PHP делает это автоматически в 
            зависимости от контекста. </P>
            <H4>Тип float (числа с плавающей точкой)</H4>
            <P><SPAN class=keyword>Числа с плавающей точкой</SPAN> (они же числа 
            двойной точности или действительные числа) могут быть определены при 
            помощи любого из следующих синтаксисов: </P>
            <DIV class=example><PRE>&lt;?php
$a = 1.234;
$b = 1.2e3;
$c = 7E-10;
?&gt; 
</PRE></DIV>
            <P>Размер <SPAN class=keyword>целого</SPAN> зависит от платформы, 
            хотя максимум, как правило, <SPAN class=texample>~1.8e308</SPAN> с 
            точностью около <SPAN class=texample>14</SPAN> десятичных цифр. </P>
            <H4>Тип string (строки)</H4>
            <P><A name=keyword-context.6></A><SPAN 
            class=keyword_def>Строка</SPAN> – это набор символов. В PHP символ – 
            это то же самое, что байт, это значит, что существует ровно <SPAN 
            class=texample>256</SPAN> различных символов. Это также означает, 
            что PHP не имеет встроенной поддержки Unicode. В PHP практически не 
            существует ограничений на размер <SPAN class=keyword>строк</SPAN>, 
            поэтому нет абсолютно никаких причин беспокоиться об их длине. </P>
            <P><SPAN class=keyword>Строка</SPAN> в PHP может быть определена 
            тремя различными <SPAN class=keyword>способами</SPAN>: </P>
            <UL>
              <LI>с помощью <SPAN class=keyword>одинарных кавычек</SPAN>; 
              <LI>с помощью <SPAN class=keyword>двойных кавычек</SPAN>; 
              <LI><SPAN class=keyword>heredoc-синтаксисом</SPAN>. </LI></UL>
            <H5>Одинарные кавычки</H5>
            <P>Простейший <SPAN class=keyword>способ</SPAN> определить <SPAN 
            class=keyword>строку</SPAN> – это заключить ее в <SPAN 
            class=keyword>одинарные кавычки</SPAN> «<SPAN 
            class=texample>'</SPAN>». Чтобы использовать <SPAN 
            class=keyword>одинарную кавычку</SPAN> внутри <SPAN 
            class=keyword>строки</SPAN>, как и во многих других языках, перед 
            ней необходимо поставить символ обратной косой черты «<SPAN 
            class=texample>\</SPAN>», т. е. экранировать ее. Если обратная косая 
            черта должна идти перед <SPAN class=keyword>одинарной 
            кавычкой</SPAN> либо быть в конце <SPAN class=keyword>строки</SPAN>, 
            необходимо продублировать ее «<SPAN class=texample>\\'</SPAN>». </P>
            <P>Если внутри <SPAN class=keyword>строки</SPAN>, заключенной в 
            <SPAN class=keyword>одинарные кавычки</SPAN>, обратный слэш «<SPAN 
            class=texample>\</SPAN>» встречается перед любым другим символом 
            (отличным от «<SPAN class=texample>\</SPAN>» и «<SPAN 
            class=texample>'</SPAN>» ), то он рассматривается как обычный символ 
            и выводится, как и все остальные. Поэтому обратную косую черту 
            необходимо экранировать, только если она находится в конце <SPAN 
            class=keyword>строки</SPAN>, перед закрывающей кавычкой. </P>
            <P><A name=keyword-context.7></A>В PHP существует ряд комбинаций 
            символов, начинающихся с символа обратной косой черты. Их называют 
            <SPAN class=keyword_def>управляющими последовательностями</SPAN>, и 
            они имеют специальные значения, о которых мы расскажем немного 
            позднее. Так вот, в отличие от двух других синтаксисов, <SPAN 
            class=keyword>переменные</SPAN> и <SPAN class=keyword>управляющие 
            последовательности</SPAN> для специальных символов, встречающиеся в 
            <SPAN class=keyword>строках</SPAN>, заключенных в <SPAN 
            class=keyword>одинарные кавычки</SPAN>, не <SPAN 
            class=keyword>обрабатываются</SPAN>. </P><A name=example.2.7></A>
            <DIV class=example><PRE>&lt;?php
echo 'Также вы можете вставлять в строки
    символ новой строки таким образом,
    поскольку это нормально';

// Выведет: Чтобы вывести ' надо
// перед ней поставить \
echo 'Чтобы вывести \' надо перед' .
     'ней поставить \\';
// Выведет: Вы хотите удалить C:\*.*?
echo 'Вы хотите удалить C:\\*.*?';
// Выведет: Вы хотите удалить C:\*.*?
echo 'Вы хотите удалить C:\*.*?';
// Выведет: Это не вставит: \n
// новую строку
echo 'Это не вставит: \n новую строку';
// Выведет: Переменные $expand также
// $either не подставляются
echo 'Переменные $expand также $either' .
     'не подставляются';
?&gt; 
</PRE><SPAN class=objectName>Пример 2.7. Использование управляющих 
            последовательностей</SPAN></DIV>
            <H5>Двойные кавычки</H5>
            <P>Если <SPAN class=keyword>строка</SPAN> заключена в <SPAN 
            class=keyword>двойные кавычки</SPAN> «<SPAN 
            class=texample>"</SPAN>», PHP распознает большее количество <SPAN 
            class=keyword>управляющих последовательностей</SPAN> для специальных 
            символов. Некоторые из них приведены в <A 
            href="http://www.intuit.ru/department/pl/plphp/2/plphp_2.html#table.2.7">таблице 
            2.7</A>. </P>
            <DIV class=xml_table_env><A name=table.2.7></A>
            <TABLE class=xml_table cellSpacing=1 cellPadding=2 border=0>
              <CAPTION>Таблица 2.7. Управляющие последовательности</CAPTION>
              <TBODY>
              <TR>
                <TH bgColor=#d8d8d8>Последовательность</TH>
                <TH bgColor=#d8d8d8>Значение</TH></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>\n</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Новая <SPAN 
                  class=keyword>строка</SPAN> (<SPAN class=texample>LF</SPAN> 
                  или <SPAN class=texample>0x0A (10)</SPAN> в ASCII)</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>\r</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Возврат каретки (<SPAN 
                  class=texample>CR</SPAN> или <SPAN class=texample>0x0D 
                  (13)</SPAN> в ASCII)</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>\t</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Горизонтальная табуляция (<SPAN 
                  class=texample>HT</SPAN> или <SPAN class=texample>0x09 
                  (9)</SPAN> в ASCII)</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>\\</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Обратная косая черта</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>\$</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Знак доллара</TD></TR>
              <TR>
                <TD vAlign=top bgColor=#eaeaea><SPAN 
                class=texample>\"</SPAN></TD>
                <TD vAlign=top bgColor=#eaeaea>Двойная 
            кавычка</TD></TR></TBODY></TABLE></DIV>
            <P>Повторяем, если вы захотите экранировать любой другой символ, 
            обратная косая черта также будет напечатана! </P>
            <P>Самым важным свойством <SPAN class=keyword>строк</SPAN> в <SPAN 
            class=keyword>двойных кавычках</SPAN> является <SPAN 
            class=keyword>обработка переменных</SPAN>. </P>
            <H5>Heredoc</H5><A name=keyword-context.8></A>
            <P>Другой <SPAN class=keyword>способ определения строк</SPAN> – это 
            использование <SPAN class=keyword_def>heredoc-синтаксиса</SPAN>. В 
            этом случае <SPAN class=keyword>строка</SPAN> должна начинаться с 
            символа <SPAN class=texample>&lt;&lt;&lt;</SPAN>, после которого 
            идет идентификатор. Заканчивается <SPAN class=keyword>строка</SPAN> 
            этим же идентификатором. Закрывающий идентификатор должен начинаться 
            в первом столбце <SPAN class=keyword>строки</SPAN>. Кроме того, 
            идентификатор должен соответствовать тем же правилам именования, что 
            и все остальные метки в PHP: содержать только буквенно-цифровые 
            символы и знак подчеркивания и начинаться не с цифры или знака 
            подчеркивания. </P>
            <P><SPAN class=keyword>Heredoc</SPAN>-текст ведет себя так же, как и 
            <SPAN class=keyword>строка</SPAN> в <SPAN class=keyword>двойных 
            кавычках</SPAN>, при этом их не имея. Это означает, что вам нет 
            необходимости экранировать кавычки в <SPAN 
            class=keyword>heredoc</SPAN>, но вы по-прежнему можете использовать 
            перечисленные выше <SPAN class=keyword>управляющие 
            последовательности</SPAN>. <SPAN class=keyword>Переменные</SPAN> 
            внутри <SPAN class=keyword>heredoc</SPAN> тоже <SPAN 
            class=keyword>обрабатываются</SPAN>. </P><A name=example.2.8></A>
            <DIV class=example><PRE>&lt;?php
$str = &lt;&lt;&lt;EOD
Пример строки,охватывающей несколько
строчек, с использованием
heredoc-синтаксиса
EOD;
// Здесь идентификатор – EOD. Ниже
// идентификатор EOT
$name = 'Вася';
echo &lt;&lt;&lt;EOT
Меня зовут "$name". 
EOT;
// это выведет "Меня зовут "Вася"."
?&gt; 
</PRE><SPAN class=objectName>Пример 2.8. Использование 
            heredoc-синтаксиса</SPAN></DIV>
            <P>Замечание: Поддержка heredoc была добавлена в PHP 4. </P>
            <H4>Тип array (массив)</H4><A name=keyword-context.9></A>
            <P><SPAN class=keyword_def>Массив</SPAN> в PHP представляет собой 
            упорядоченную карту – <SPAN class=keyword>тип</SPAN>, который 
            преобразует <SPAN class=keyword>значения</SPAN> в <SPAN 
            class=keyword>ключи</SPAN>. Этот <SPAN class=keyword>тип</SPAN> 
            оптимизирован в нескольких направлениях, поэтому вы можете 
            использовать его как собственно <SPAN class=keyword>массив</SPAN>, 
            список (вектор), хеш-таблицу (являющуюся реализацией карты), стэк, 
            очередь и т.д. Поскольку вы можете иметь в качестве <SPAN 
            class=keyword>значения</SPAN> другой <SPAN 
            class=keyword>массив</SPAN> PHP, можно также легко эмулировать 
            деревья. </P>
            <P>Определить <SPAN class=keyword>массив</SPAN> можно с помощью 
            конструкции <SPAN class=texample><SPAN 
            class=keyword>array</SPAN>()</SPAN> или непосредственно задавая 
            <SPAN class=keyword>значения</SPAN> его элементам. </P>
            <H5>Определение при помощи array()</H5>
            <DIV class=example><PRE>array ([key] =&gt; value,
       [key1] =&gt; value1, ... )
</PRE></DIV>
            <P>Языковая конструкция <SPAN class=texample><SPAN 
            class=keyword_def>array</SPAN>()</SPAN> принимает в качестве 
            параметров пары <SPAN class=keyword>ключ</SPAN><SPAN class=texample> 
            =&gt; </SPAN><SPAN class=keyword_def>значение</SPAN>, разделенные 
            запятыми. Символ <SPAN class=texample>=&gt;</SPAN> устанавливает 
            соответствие между <SPAN class=keyword>значением</SPAN> и его <SPAN 
            class=keyword>ключом</SPAN>. <SPAN class=keyword>Ключ</SPAN> может 
            быть как <SPAN class=keyword>целым числом</SPAN>, так и <SPAN 
            class=keyword>строкой</SPAN>, а <SPAN class=keyword>значение</SPAN> 
            может быть любого имеющегося в PHP <SPAN class=keyword>типа</SPAN>. 
            Числовой <SPAN class=keyword>ключ </SPAN><SPAN 
            class=keyword>массива</SPAN> часто называют индексом. Индексирование 
            <SPAN class=keyword>массива</SPAN> в PHP начинается с нуля. <SPAN 
            class=keyword>Значение</SPAN> элемента <SPAN 
            class=keyword>массива</SPAN> можно получить, указав после имени 
            <SPAN class=keyword>массива</SPAN> в <SPAN class=keyword>квадратных 
            скобках </SPAN><SPAN class=keyword>ключ</SPAN> искомого элемента. 
            Если <SPAN class=keyword_def>ключ </SPAN><SPAN 
            class=keyword>массива</SPAN> представляет собой стандартную запись 
            <SPAN class=keyword>целого числа</SPAN>, то он рассматривается как 
            число, в противном случае – как <SPAN class=keyword>строка</SPAN>. 
            Поэтому запись <SPAN class=texample>$a["1"]</SPAN> равносильна 
            записи <SPAN class=texample>$a[1]</SPAN>, так же как и <SPAN 
            class=texample>$a["-1"]</SPAN> равносильно <SPAN 
            class=texample>$a[-1]</SPAN>. </P><A name=example.2.9></A>
            <DIV class=example><PRE>&lt;?php
$books = array ("php" =&gt;
                "PHP users guide",
                12 =&gt; true);
echo $books["php"];
//выведет "PHP users guide"
echo $books[12];     //выведет 1
?&gt; 
</PRE><SPAN class=objectName>Пример 2.9. Массивы в PHP</SPAN></DIV>
            <P>Если для элемента <SPAN class=keyword>ключ</SPAN> не задан, то в 
            качестве <SPAN class=keyword>ключа</SPAN> берется максимальный 
            числовой <SPAN class=keyword>ключ</SPAN>, увеличенный на единицу. 
            Если указать <SPAN class=keyword>ключ</SPAN>, которому уже было 
            присвоено какое-то <SPAN class=keyword>значение</SPAN>, то оно будет 
            перезаписано. Начиная с PHP 4.3.0, если максимальный <SPAN 
            class=keyword>ключ</SPAN> – отрицательное число, то следующим <SPAN 
            class=keyword>ключом </SPAN><SPAN class=keyword>массива</SPAN> будет 
            ноль (<SPAN class=texample>0</SPAN>). </P><A name=example.2.10></A>
            <DIV class=example><PRE>&lt;?php
// массивы $arr и $arr1 эквиваленты
$arr = array(5 =&gt; 43, 32, 56, "b" =&gt; 12);
$arr1 = array(5 =&gt; 43, 6 =&gt; 32,
              7 =&gt; 56, "b" =&gt; 12);
?&gt; 
</PRE><SPAN class=objectName>Пример 2.10. Массивы в PHP</SPAN></DIV>
            <P>Если использовать в качестве <SPAN 
            class=keyword>ключа</SPAN><SPAN class=texample> TRUE</SPAN> или 
            <SPAN class=texample>FALSE</SPAN>, то его <SPAN 
            class=keyword>значение</SPAN> переводится соответственно в единицу и 
            ноль <SPAN class=keyword>типа integer</SPAN>. Если использовать 
            <SPAN class=keyword>NULL</SPAN>, то вместо <SPAN 
            class=keyword>ключа</SPAN> получим пустую <SPAN 
            class=keyword>строку</SPAN>. Можно использовать и саму пустую <SPAN 
            class=keyword>строку</SPAN> в качестве <SPAN 
            class=keyword>ключа</SPAN>, при этом ее надо брать в кавычки. Так 
            что это не то же самое, что использование пустых <SPAN 
            class=keyword>квадратных скобок</SPAN>. Нельзя использовать в 
            качестве <SPAN class=keyword>ключа</SPAN><SPAN class=keyword> 
            массивы</SPAN> и <SPAN class=keyword>объекты</SPAN>. </P>
            <H5>Определение с помощью синтаксиса квадратных скобок</H5>
            <P>Создать <SPAN class=keyword>массив</SPAN> можно, просто записывая 
            в него <SPAN class=keyword>значения</SPAN>. Как мы уже говорили, 
            <SPAN class=keyword>значение</SPAN> элемента <SPAN 
            class=keyword>массива</SPAN> можно получить с помощью <SPAN 
            class=keyword>квадратных скобок</SPAN>, внутри которых нужно указать 
            его <SPAN class=keyword>ключ</SPAN> например, <SPAN 
            class=texample>$book["php"]</SPAN>. Если указать новый <SPAN 
            class=keyword>ключ</SPAN> и новое <SPAN 
            class=keyword>значение</SPAN> например, <SPAN 
            class=texample>$book["new_key"]="new_value"</SPAN>, то в <SPAN 
            class=keyword>массив</SPAN> добавится новый элемент. Если мы не 
            укажем <SPAN class=keyword>ключ</SPAN>, а только присвоим <SPAN 
            class=keyword>значение</SPAN><SPAN class=texample> 
            $book[]="new_value"</SPAN>, то новый элемент <SPAN 
            class=keyword>массива</SPAN> будет иметь числовой <SPAN 
            class=keyword>ключ</SPAN>, на единицу больший максимального 
            существующего. Если <SPAN class=keyword>массив</SPAN>, в который мы 
            добавляем <SPAN class=keyword>значения</SPAN>, еще не существует, то 
            он будет <SPAN class=keyword>создан</SPAN>. </P>
            <DIV class=example><PRE>&lt;?
$books["key"]= value; // добавили в массив
                    // $books значение 
                    // value с ключом key
$books[] = value1; /* добавили в массив
                      значение value1 с
                      ключом 13, поскольку
                      максимальный ключ у
                      нас был 12 */
?&gt;
</PRE></DIV>
            <P>Для того чтобы изменить конкретный элемент <SPAN 
            class=keyword>массива</SPAN>, нужно просто присвоить ему с его <SPAN 
            class=keyword>ключом</SPAN> новое <SPAN 
            class=keyword>значение</SPAN>. Изменить <SPAN 
            class=keyword>ключ</SPAN> элемента нельзя, можно только <SPAN 
            class=keyword>удалить элемент </SPAN>(пару <SPAN 
            class=keyword>ключ</SPAN>/<SPAN class=keyword>значение</SPAN>) и 
            добавить новую. <A name=keyword-context.10></A><A 
            name=keyword-context.11></A>Чтобы <SPAN class=keyword_def>удалить 
            элемент </SPAN><SPAN class=keyword>массива</SPAN>, нужно 
            использовать функцию <SPAN class=texample><SPAN 
            class=keyword_def>unset</SPAN>()</SPAN>. </P>
            <DIV class=example><PRE>&lt;?php
$books = array ("php" =&gt;
                "PHP users guide",
                12 =&gt; true);

$books[] =
 "Book about Perl"; // добавили элемент
                    // с ключом (индексом)
                    // 13 это эквивалентно 
                    // $books[13] =
                    // "Book about Perl";
$books["lisp"] =
 123456; /* Это добавляет к массиву новый
            элемент с ключом "lisp" и
            значением 123456 */
unset($books[12]); // Это удаляет элемент
                   // c ключом 12 из массива 
unset ($books); // удаляет массив полностью
?&gt; 
</PRE></DIV>
            <P>Заметим, что, когда используются пустые <SPAN 
            class=keyword>квадратные скобки</SPAN>, максимальный числовой <SPAN 
            class=keyword>ключ</SPAN> ищется среди <SPAN 
            class=keyword>ключей</SPAN>, существующих в <SPAN 
            class=keyword>массиве</SPAN> с момента последнего <SPAN 
            class=keyword>переиндексирования</SPAN>. <SPAN 
            class=keyword_def>Переиндексировать массив</SPAN> можно с помощью 
            функции <SPAN class=texample><SPAN 
            class=keyword_def>array_values</SPAN>()</SPAN>. </P><A 
            name=example.2.11></A>
            <DIV class=example><PRE>&lt;?php
$arr =
 array ("a","b","c"); /* Создаем массив
                         со значениями
                         "a", "b" и "c".
                         Поскольку ключи
                         не указаны, они
                         будут 0,1,2
                         соответственно */
print_r($arr); // выводим массив (и ключи,
               // и значения)
unset($arr[0]);
unset($arr[1]);
unset($arr[2]); 
         // удаляем из него все значения 
print_r($arr);  // выводим массив (и ключи,
                // и значения)
$arr[] = "aa";  // добавляем новый элемент
                // в массив. 
                // Его индексом (ключом)
                // будет 3, а не 0
print_r($arr);

$arr =
 array_values($arr); // переиндексируем
                     // массив 
$arr[] = "bb"; // ключом этого элемента
               // будет 1
print_r($arr);
?&gt;
</PRE><SPAN class=objectName>Пример 2.11. Переиндексация 
            массива</SPAN></DIV>
            <P>Результатом работы этого скрипта будет: </P>
            <DIV class=example><PRE>Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c ) 
Array ( ) 
Array ( [3] =&gt; aa ) 
Array ( [0] =&gt; aa [1] =&gt; bb ) 
</PRE></DIV>
            <H4>Тип object (объекты)</H4>
            <P><A name=keyword-context.12></A><SPAN 
            class=keyword_def>Объекты</SPAN> – <SPAN class=keyword>тип 
            данных</SPAN>, пришедший из объектно-ориентированного 
            программирования (ООП). Согласно принципам ООП, класс – это набор 
            <SPAN class=keyword>объектов</SPAN>, обладающих определенными 
            свойствами и методами работы с ним, а <SPAN 
            class=keyword>объект</SPAN> соответственно – экземпляр класса. 
            Например, программисты – это класс людей, которые пишут программы, 
            изучают компьютерную литературу и, кроме того, как все люди, имеют 
            имя и фамилию. Теперь, если взять одного конкретного программиста, 
            Васю Иванова, то можно сказать, что он является <SPAN 
            class=keyword>объектом</SPAN> класса программистов, обладает теми же 
            свойствами, что и другие программисты, тоже имеет имя, пишет 
            программы и т.п. </P>
            <P>В PHP для доступа к методам <SPAN class=keyword>объекта</SPAN> 
            используется <SPAN class=keyword>оператор</SPAN><SPAN 
            class=texample> -&gt;</SPAN>. Для инициализации <SPAN 
            class=keyword>объекта</SPAN> используется выражение <SPAN 
            class=texample>new</SPAN>, создающее в <SPAN 
            class=keyword>переменной</SPAN> экземпляр <SPAN 
            class=keyword>объекта</SPAN>. </P><A name=example.2.12></A>
            <DIV class=example><PRE>&lt;?php
//создаем класс людей
class Person
{
// метод, который обучает человека PHP
    function know_php()
        {
            echo "Теперь я знаю PHP";
        }    
}
$bob = new Person; // создаем объект
                   // класса человек
$bob -&gt; know_php(); // обучаем его PHP
?&gt;
</PRE><SPAN class=objectName>Пример 2.12. Объекты в PHP</SPAN></DIV>
            <P>Более подробно реализацию принципов ООП в языке PHP мы рассмотрим 
            в одной из следующих лекций. </P>
            <H4>Тип resource (ресурсы)</H4>
            <P><A name=keyword-context.13></A><SPAN 
            class=keyword_def>Ресурс</SPAN> – это специальная <SPAN 
            class=keyword>переменная</SPAN>, содержащая ссылку на внешний <SPAN 
            class=keyword>ресурс</SPAN> (например, соединение с базой данных). 
            <SPAN class=keyword>Ресурсы</SPAN> создаются и используются 
            специальными функциями (например, <SPAN 
            class=texample>mysql_connect()</SPAN>, <SPAN 
            class=texample>pdf_new()</SPAN> и т.п.). </P>
            <H4>Тип Null</H4>
            <P>Специальное значение <SPAN class=keyword>NULL</SPAN> говорит о 
            том, что <SPAN class=keyword>переменная</SPAN> не имеет значения. 
            </P>
            <P><SPAN class=keyword>Переменная</SPAN> считается <SPAN 
            class=keyword>NULL</SPAN>, если: </P>
            <UL>
              <LI>ей была присвоена <SPAN class=keyword>константа</SPAN><SPAN 
              class=keyword> NULL</SPAN> (<SPAN class=texample>$var = 
              NULL</SPAN>); 
              <LI>ей еще не было присвоено какое-либо значение; 
              <LI>она была удалена с помощью <SPAN class=texample><SPAN 
              class=keyword>unset</SPAN>()</SPAN>. </LI></UL>
            <P>Существует только одно значение <SPAN class=keyword>типа 
            </SPAN><SPAN class=keyword>NULL</SPAN> – регистронезависимое 
            ключевое слово <SPAN class=texample>NULL</SPAN>. </P>
            <H3>Решение задачи</H3>
            <P>Теперь вернемся к задаче, которую мы поставили в самом начале 
            лекции. Напомним, что она состояла в <SPAN class=keyword>составлении 
            письма</SPAN> разным людям по поводу разных событий. Попытаемся 
            использовать для решения этой задачи изученные средства – <SPAN 
            class=keyword>переменные</SPAN>, <SPAN 
            class=keyword>операторы</SPAN>, <SPAN 
            class=keyword>константы</SPAN>, <SPAN class=keyword>строки</SPAN> и 
            <SPAN class=keyword>массивы</SPAN>. В зависимости от получателя 
            изменяется событие и обращение, указанные в письме, поэтому 
            естественно вынести эти величины в <SPAN 
            class=keyword>переменные</SPAN>. Более того, поскольку событий и 
            людей много, удобно использовать <SPAN 
            class=keyword>переменные</SPAN><SPAN class=keyword> типа 
            </SPAN><SPAN class=keyword>массив</SPAN>. Подпись в письме остается 
            постоянной всегда, поэтому логично задать ее как <SPAN 
            class=keyword>константу</SPAN>. Чтобы не писать слишком длинные и 
            громоздкие <SPAN class=keyword>строки</SPAN>, используем <SPAN 
            class=keyword>оператор</SPAN><SPAN class=keyword> 
            конкатенации</SPAN>. Итак, вот что получилось: </P>
            <DIV class=example><PRE>&lt;?
// пусть наша подпись 
// будет константой
define("SIGN","С уважением, Вася"); 
// зададим массивы людей и событий
$names = array("Иван Иванович",
               "Петр Петрович",
               "Семен Семенович");
$events = array(
    "f" =&gt; "день открытых дверей",
    "o" =&gt; "открытие выставки",
    "p" =&gt; "бал выпускников");

// составим текст приглашения
$str = "Уважаемый (ая), $names[0]";
$str .= "&lt;br&gt;Приглашаем Вас на ".
        $events["f"];
$str .= "&lt;br&gt;" . SIGN;
echo $str; // выведем текст на экран
?&gt;
</PRE></DIV>
            <H3>Заключение</H3>
            <P>Итак, в этой лекции мы познакомились с <SPAN 
            class=keyword>основами синтаксиса</SPAN> языка PHP, научились 
            работать с <SPAN class=keyword>переменными</SPAN> различных <SPAN 
            class=keyword>типов</SPAN>, <SPAN class=keyword>константами</SPAN>, 
            <SPAN class=keyword>операторами</SPAN>, познакомились со всеми 
            существующими в PHP <SPAN class=keyword>типами данных</SPAN>. Говоря 
            о таких <SPAN class=keyword>типах данных</SPAN>, как <SPAN 
            class=keyword>строки</SPAN> и <SPAN class=keyword>массивы</SPAN>, мы 
            разобрали только самые основы. Эти конструкции настолько удобны и 
            просты в использовании, что заслуживают отдельного разговора. 
            Подробности будут изложены в последующих лекциях. Решая задачу, мы 
            старались использовать только имеющиеся знания и не забегать вперед, 
            поэтому решение не слишком подходит для практического применения. В 
            следующей лекции мы исправим этот недостаток и создадим более 
            универсальный шаблон электронного письма. </P></TD></TR>
        <TR>
          <TD height=8><IMG height=8 src="Основы синтаксиса.files/empty.gif" 
            width=1></TD></TR></TBODY></TABLE><!-- /content --></TD>
    <TD><IMG height=1 src="Основы синтаксиса.files/empty.gif" 
  width=8></TD></TR></TBODY></TABLE><!-- /bottom -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD class=orang height=1><IMG height=1 
      src="Основы синтаксиса.files/empty.gif" width=1></TD></TR>
  <TR>
    <TD class=ltxt align=middle>© 2003-2005 INTUIT.ru. Все права 
  защищены.</TD></TR></TBODY></TABLE><!-- /bottom --></BODY></HTML>
