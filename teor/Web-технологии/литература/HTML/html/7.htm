<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<title>Основы работы на HTML</title>
<style Type="text/css">
 Body {font-family: verdana, arial; font-size: 10pt; background-color: #ffffff; margin: 10px;}
 Td {font-family: verdana, arial; font-size: 10pt; text-align: justify;}
 A {color: #0000aa;}
</style>
</head>

<body>

<center>
<hr width="90%" size="1" noshade>
[ <A Href="6.htm">Предыдущий раздел</A> ]
[ <A Href="index.htm">Оглавление</A> ]
[ <A Href="8.htm">Следующий раздел</A> ]
<hr width="90%" size="1" noshade>
</center>

<h2 align="center">Windows CGI интерфейс</h2>

<table border="0" cellPadding="0" cellSpacing="0" width="100%">
<tbody>
  <tr>
    <td>&nbsp; <ul>
      <li>Обзор </li>
      <li>Разбор данных HTML форм </li>
      <li>Вызов CGI программ <ul>
          <li>Командная строка </li>
          <li>Метод вызова </li>
        </ul>
      </li>
      <li>CGI файл данных <ul>
          <li>[CGI] секция </li>
          <li>[Accept] секция </li>
          <li>[System] секция </li>
          <li>[Extra Headers] секция </li>
          <li>[Form Literal] секция </li>
          <li>[Form External] секция </li>
          <li>[Form Huge] секция </li>
          <li>[Form File] секция </li>
        </ul>
      </li>
      <li>Пример разбора формы </li>
      <li>Возврат результатов </li>
    </ul>
    <hr color="#000080" SIZE="1" width="90%">
    <h2 align="center">Обзор</h2>
    <p>Большое количество World Wide Web приложений
    основано на использовании внешних программ,
    управляемых Web сервером. Использование данных
    программ позволяет строить Web приложения с
    динамически обновляемой информацией, хнанящейся
    в базах данных или генерирующейся в зависимости
    от бизнес-правил рещаемых задач. Для связи между
    Web сервером и вызываемыми программами широко
    используется Common Gateway Interface (CGI), имеющий
    реализации как для Windows-ориентированных
    программ, так и для приложений, функционирующих в
    среде Unix. Данный документ описывает
    Windows-модификацию интерфейса CG, иначе называемую
    Windows CGI интерфейсом. </p>
    <hr color="#000080" SIZE="1" width="90%">
    <h2 align="center">Разбор данных HTML-форм</h2>
    <p>Windows CGI требует, чтобы Web сервер декодировал
    данные из HTML форм, если они переданы при помощи POST
    метода запроса. Он не требует от сервера
    декодирования параметров, если они переданы в
    качестве строки запроса (&quot;query string&quot;),
    являющейся частью URL. </p>
    <p>Существует два способа, которыми данные из
    форм могут быть переданы серверу броузером: <dl>
      <dt><b>URL-Encoded</b> </dt>
      <dd>Это наиболее используемый формат данных,
        передаваемых из форм. Содержимое полей формы
        выделяются из формы и передаются согласно
        спецификации HTML 1.0, а затем собираются в одну
        строку, где отделяются друг от друга символом
        амперсанда. Тип содержания сообщения
        устанавливается броузером в <tt>application/x-www-form-urlencoded</tt>.
        </dd>
      <dt><b>Multipart Form Data</b> </dt>
      <dd>Данный формат разработан для эффективной
        загрузки файлов на сервер с использованием форм.
        Содержимое полей формы передается как
        многостраничное MIME сообщение. Каждое поле
        содержится в одной странице. Тип содержания,
        устанавливается броузером в <tt>multipart/form-data</tt>. </dd>
    </dl>
    <p><b>&quot;Грамотные&quot; серверы должны уметь
    обрабатывать оба типа данных из форм.</b> </p>
    <hr color="#000080" SIZE="1" width="90%">
    <h2 align="center">Вызов CGI программ</h2>
    <p>Сервер использует функцию <tt>CreateProcess()</tt> для
    вызова CGI программ. Сервер синхронизируется с CGI
    программой, поскольку он должен определить
    момент завершения CGI программы. Это достигается
    использованием функции Win32 <tt>WaitForSingleObject(),</tt>
    ожидающей получения сигнала завершения CGI
    программы.</p>
    <p><a name="launch-cmd"></a></p>
    <h3 align="center">Командная строка</h3>
    <p>Сервер должен вызывать CGI программу
    выполняя функцию <tt>CreateProcess()</tt> с командной
    строкой следующего формата: </p>
    <pre>   WinCGI-exe cgi-data-file</pre>
    <dl>
      <pre>WinCGI-exe</pre>
      <dd>Полный путь к исполняемой CGI программе.
        Сервер не зависит от &quot;текущего каталога&quot; или
        переменной окружения PATH. Примите к сведению, что
        &quot;исполняемая&quot; не обязательно означает .EXE
        файл. Это может быть документ, ассоциирующийся с
        реально исполняемой программой, описанной в WIN.INI
        или System Registry. <pre>cgi-data-file</pre>
      </dd>
    </dl>
    <p><a name="launch-meth"></a></p>
    <h3 align="center">Метод вызова</h3>
    <p>Сервер использует <tt>CreateProcess()</tt> для запуска
    процесса, не имеющего главного окна. Вызванный
    процесс не будет отображаться каким либо образом
    на мониторе сервера. </p>
    <p>Некоторые сервера поддерживают режим
    отладки CGI программ и скриптов, что позоволяет
    серверу запускать CGI программу как обычный
    процесс с созданием главного окна и отображением
    информации на мониторе сервера. Данный способ
    весьма удобен на стадии отладки CGI программ.</p>
    <hr color="#000080" SIZE="1" width="90%">
    <h2 align="center">CGI файл данных</h2>
    <p>Сервер передает данные CGI программам через
    Windows &quot;private profile&quot; afqk, в формате
    &quot;параметр-значение&quot; (windows INI файл). CGI
    программа может прочитать данный файл и получит
    все данные, передаваемые ей из формы, а также
    автоматически генерируемые броузером данные. </p>
    <p>CGI файл данны состоит из следующих секций: <ul>
      <li>[CGI] </li>
      <li>[Accept] </li>
      <li>[System] </li>
      <li>[Extra Headers] </li>
      <li>[Form Literal] </li>
      <li>[Form External] </li>
      <li>[Form Huge] </li>
      <li>[Form File] </li>
    </ul>
    <p><a name="data-cgi"></a></p>
    <h3 align="center">Секция [CGI] </h3>
    <p>Данная секция содержит большинство
    специфических CGI параметров (тип дотупа, тип
    запроса, дополнительные заголовки, определенные
    в других секциях и т.п.). Каждое значение
    представлено ввиде символьной строки. Если
    значение является пустой строкой, значит данный
    параметр был опущен. Tсписок параметров данной
    секции представлен ниже: <dl>
      <pre>Request Protocol</pre>
      <dl>
        <p>Название и модификация информационного
        протокола, использованного для передачи данного
        запроса. Формат: протокол/модификация. Пример:
        &quot;HTTP/1.0&quot;.</p>
      </dl>
    </dl>
    <pre>Request Method</pre>
    <dl>
      <dl>
        <p>Метод, который использовался для данного
        запроса. Для HTTP это &quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot; и
        т.д.</p>
      </dl>
    </dl>
    <pre>Executable Path</pre>
    <dl>
      <dl>
        <p>Логический путь к исполняемой CGI программе,
        необходимый для ссылки CGI программе на саму себя.</p>
      </dl>
    </dl>
    <pre>Logical Path</pre>
    <dl>
      <dl>
        <p>Запрос также может указывать к ресурсам,
        необходимым для выполнения данного запроса.
        Данный параметр содержит путь в том виде, который
        был получен сервером без мэпирования его на
        физический путь на диске.</p>
      </dl>
    </dl>
    <pre>Physical Path</pre>
    <dl>
      <dl>
        <p>Если запрос содержит информацию о
        логическом пути, сервер преобразует его к
        физическому пути (например, к пути к файлу на
        диске) досупа согасно синтаксическим правилам
        операционной системы.</p>
      </dl>
    </dl>
    <pre>Query String</pre>
    <dl>
      <dd>Информация, размещающаяся после ? в URL
        вызываемой CGI программы. Сервер оставляет эту
        информацию без изменений в том виде, в котором
        она была помещена в URL. </dd>
    </dl>
    <pre>Request Range</pre>
    <dl>
      <dd>Byte-range спецификация получаемая вместе с
        запросом (если есть). Смотри текущий Internet Draft (или
        RFC), описывающий расширение HTTP для получения
        более полной информации. Сервер должен
        поддерживать работу CGI программ в byte-ranging. </dd>
    </dl>
    <pre>Referer</pre>
    <dl>
      <dd>URL документа, содержащего ссылку на данную CGI
        программу. Надо заметить, что некоторые броузеры
        закрывают данную возможность и не дают ее
        использовать. </dd>
    </dl>
    <pre>From</pre>
    <dl>
      <dd>E-mail адрес пользователя броузера. Надо
        заметить, что данный параметр присутствует с
        спецификации HTTP, но не используется большинством
        броузером из соображений секретности. </dd>
    </dl>
    <pre>User Agent</pre>
    <dl>
      <dd>Строка, описывающая программное
        обеспечение броузера. Не генерируется
        большинством броузеров. </dd>
    </dl>
    <pre>Content Type</pre>
    <dl>
      <dd>Данный параметр содержит MIME-тип данных,
        посланных клиентом вместе с полями из формы, если
        эти данные были посланы. Формат: type/subtype. </dd>
    </dl>
    <pre>Content Length</pre>
    <dl>
      <dd>Для запросов, с которыми посланы
        дополнительные данные в это поле заносится длина
        посланных данных в байтах. </dd>
    </dl>
    <pre>Content File</pre>
    <dl>
      <dd>Для запросов, содержащих дополнительные
        данные, посланные пользователем, этот параметр
        содержит имя файла, в которое WEB-сервер
        записывает эти данные. В дальнейшем,
        пользовательская программа может считать эти
        данные. Параметр содержит полнуй путь к файлу
        данных. </dd>
    </dl>
    <pre>Server Software</pre>
    <dl>
      <dd>Название и версия серверного программного
        обеспечения, обработавшего запрос и вызвавшего
        CGI-программу. Формат: name/version. </dd>
    </dl>
    <pre>Server Name</pre>
    <dl>
      <dd>Сетевое имя сервера или псевдоним,
        необходимый для ссылающихся на себя URL Этот
        параметр (в комбанации с параметром ServerPort) может
        быть использован для вычисления полного URL к
        серверу. </dd>
    </dl>
    <pre>Server Port</pre>
    <dl>
      <dd>Номер порта, по которому работает сервер. </dd>
    </dl>
    <pre>Server Admin</pre>
    <dl>
      <dd>E-mail адрес администратора сервера. Данный
        параметр необходим длягенерации сообщений об
        ошибках и отправки данных сообщений
        администратору сервера или для генерации форм с
        URL &quot;mailto:&quot;. </dd>
    </dl>
    <pre>CGI Version</pre>
    <dl>
      <dd>Версия спецификации CGI. Формат: CGI/версия. Для
        данной версии, &quot;CGI/1.2 (Win)&quot;. <pre>Remote Host</pre>
        <dl>
          <dd>Сетевое имя хоста клиента, если доступно.
            Данный параметр может быть использован для
            опознавание клиента. </dd>
        </dl>
        <pre>Remote Address</pre>
        <dl>
          <dd>Сетевой (IP) адрес клиента. Данный параметр
            может быть использован для проверки
            пользователя если отсутствует сетевое имя. </dd>
        </dl>
        <pre>Authentication Method</pre>
        <dl>
          <dd>Если используется защищенный вызов CGI
            программы, это протокол-зависимый метод
            аутентификации, используемый для аутентификации
            пользователя. </dd>
        </dl>
        <pre>Authentication Realm</pre>
        <dl>
          <dd>Если используется защищенный вызов CGI
            программы, это протокол-зависимый сервис,
            используемый для аутентификации пользователя.
            Список пользователей для полученного вида
            сервиса iпроверяется для аутентификации
            пользователя. </dd>
        </dl>
        <pre>Authenticated Username</pre>
        <dl>
          <dd>Если используется защищенный вызов CGI
            программы, это имя пользователя, которое клиент
            использует для аутентификации при доступе к
            CGI-программе. </dd>
        </dl>
        <p><a name="data-accept"></a></p>
        <h3 align="center">Секция [Accept] </h3>
        <p>Данная секция содержит типы данных,
        посылаемых клиентом, найденные в заголовке
        запроса в виде </p>
        <pre>Accept: type/subtype {parameters}</pre>
        <p>Если данные параметры присутствуют
        (например, &quot;q=0.100&quot;) , они передаются как
        значения параметра Accept. Для каждого типа
        передаваемых данных заводится свой параметр Accept.
        </p>
        <p><a name="data-system"></a></p>
        <h3 align="center">Секция [System]</h3>
        <p>Данная секция содержит параметры,
        специфические для Windows реализации CGI: <dl>
          <pre>GMT Offset</pre>
          <dd>Количество секунд, которое необходимо
            добавить к времени по Гринвичу для вычисления
            локального времени клиента. </dd>
        </dl>
        <pre>Debug Mode</pre>
        <dl>
          <dd>Данный параметр имеет значение &quot;Yes&quot;
            если включен режим &quot;CGI/script tracing&quot; на сервере. </dd>
        </dl>
        <pre>Output File</pre>
        <dl>
          <dd>Полный путь к файлу, в который необходимо
            поместить данные, отсылаемые сервером клиенту
            после завершения работы программы. </dd>
        </dl>
        <pre>Content File</pre>
        <dl>
          <dd>Полный путь к файл у в котором содержится
            дополнительная информация, поступающая вместе с
            запросом. </dd>
        </dl>
        <p><a name="data-extra"></a></p>
        <h3 align="center">Секция [Extra Headers] </h3>
        <p>Данная секция содержит
        &quot;дополнительные&quot; заголовки, которые
        включены в запрос в виде
        &quot;параметр=значение&quot;. Сервер должен
        раскодировать как параметр, так и его значение
        прежде чем они будут помещены в файл данных CGI. </p>
        <p><a name="data-formlit"></a></p>
        <h3 align="center">Секция [Form Literal]</h3>
        <p>Если запрос от клиента пришел в виде HTTP POST
        из HTML формы (с типом содержимого
        application/x-www-form-urlencoded или multipart/form-data), то сервер
        раскодирует данные из формы и поместит их в
        секцию [Form Literal].</p>
        <p>Для URL-кодированных данных формы, строка
        передаваемых параметров выглядит как
        &quot;параметр=значение&amp;параметр=значение&amp;...&quot;,
        где значения находятся в url-кодированном формате.
        Сервер разделяет &quot;параметр=значение&quot; по
        символу '&amp;', затем разделяет собственно
        &quot;параметр&quot; и &quot;значение&quot;, декодирует
        &quot;значение&quot; и помещает результат в виде
        &quot;параметр=раскодированное_значение&quot; в
        секцию [Form Literal].</p>
        <p>Для многостраничных данных строка данных
        представляется в многостраничном MIME формате, где
        каждое поле представлено как отдельная часть
        (файл). сервер декодирует имена и значение каждой
        части и размещает их в формате
        &quot;параметр=значение&quot; в секции [Form Literal].</p>
        <p>Если форма содержит какие-либо элементы <tt>SELECT
        MULTIPLE</tt>, то будет создано несколько строк с вида
        &quot;параметр=значение&quot; с одинаковым именем
        &quot;параметра&quot;. В этом случае генерирует
        нормальную строку &quot;параметр=значение&quot; для
        первого встречающегося элемента, а каждый
        следующий представляет в виде
        &quot;параметр_X=значение&quot;, где &quot;X&quot; -
        увеличивающийся счетчик. </p>
        <p><a name="data-formext"></a></p>
        <h3 align="center">Секция [Form External]</h3>
        <p>Если размер декодированной строки
        превышает 254 символа или декодированная строка
        содержит управляющие символы, такие, как перевод
        строки, возврат каретки, двойные кавычки и т.д., то
        сервер помещает данное значение в отдельный
        временный файл, а в секцию [Form External] помещает
        строку в виде: </p>
        <pre>  параметр=путь длина </pre>
        <p>где <i>путь</i> - это полный путь и имя
        временного файла, содержащего декодированное
        значение параметра, а длина - длина в байтах этого
        файла.</p>
        <p><a name="data-formhug"></a></p>
        <h3 align="center">Секция [Form Huge] </h3>
        <p>Если общая длина строки с кодированными
        параметрами превышает 65,535 байт, то сервер не
        выполняет декодирование, а оставляет данный в
        Content File, а в секцию [Form Huge] помещает строки в виде: </p>
        <pre>  параметр=смещение длина</pre>
        <p>где <i>смещение</i> - это смещение от начала
        Content File по которому находится требуемый параметр,
        а <i>длина</i> - длина в байтах значения выбранного
        параметра. Вы можте использовать <i>смещение</i>
        для выполнения поиска начала значения
        выбранного вами параметра и использовать длину
        для чтения значения выбранного параметра. Не
        забывайте, что если параметр закодирован, то вам
        необходимо раскодировать его перед
        использованием.</p>
        <p><a name="data-formfile"></a></p>
        <h3 align="center">Секция [Form File]</h3>
        <p>Если запрос пришел в виде <tt>multipart/form-data</tt>,
        то он может содержать один или несколько
        загруженных с клиента файлов. В этом случае
        каждый загруженный файл размещается в
        специальном временном файле, а в секции [Form File]
        строки имеют тот же формат, что и секции [Form External].
        каждая строка параметра в этом случае выглядит
        так: </p>
        <pre>  параметр=[полный_путь_к_файлу] длина тип ссылка [имя_файла]</pre>
        <ul>
          <p>где <i>полный_путь_к_файлу </i>- это путь к
          временному файлу, содержащему загруженный файл, <i>длина</i>
          - длина в байтах загруженного файла, <i>тип</i> - тип
          &nbsp;MIME загруженного файла, <i>ссылка</i> - способ
          кодировки загруженного файла и <i>имя_файла</i> -
          исходное название загруженного файла.
          Использование квадратных скобок обязательно,
          поскольку имя файла и путь могут содержать
          символы пробела. </p>
        </ul>
        <p><a name="formex"></a></p>
        <h3 align="center">Пример декодированных значений
        формы</h3>
        <p>В данном примере форма содержит небольшое
        поле, SELECT MULTIPLE с 2-мя небольшими секциями, поле
        длиной 300 символов, поле, содержащее специальные
        символы и поле длиной 230KB. </p>
        <p>[Form Literal] <br>
        smallfield=123 Main St. #122 <br>
        multiple=first selection <br>
        multiple_1=second selection <br>
        <br>
        [Form External] <br>
        field300chars=C:\TEMP\HS19AF6C.000 300 <br>
        fieldwithlinebreaks=C:\TEMP\HS19AF6C.001 43 <br>
        <br>
        [Form Huge] <br>
        field230K=C:\TEMP\HS19AF6C.002 276920 <br>
        </p>
        <hr color="#000080" SIZE="1" width="90%">
        <h2 align="center">Обработка результата</h2>
        <p>CGI программа возвращает результат работы,
        отвечающий (явно или неявно) целям запроса.
        Сервер кодирует результат работы в соответствии
        со стандартом HTTP и использует HTTP для отправки
        результата клиенту. Это означает, что сервер
        добавляет необходимый HTTP заголовки в сообщение,
        формируемое CGI программой.</p>
        <p>Результат работы CGI программы состоит из
        двух частей: <i>заголовка</i> и <i>тела сообщения</i>.
        Заголовок состоит из одной или более строк
        текста, отделенных от тела пустой строкой. Тело
        сообщения содержит данные, представленные в MIME
        формате, указанном в заголовке.</p>
        <p>Сервер не изменяет тело документа, что
        означает, что сервер передает сформированный CGI
        программой ответ &quot;как он есть&quot;.T</p>
        <h3 align="center">Специальные строки заголовка</h3>
        <p>Сервер распознает следующие строки
        заголовка в выходном потоке: <dl>
          <pre>Content-Type:</pre>
          <dd>Указывает на MIME тип тела сообщения. Значение
            этого параметра должно быть в формате <i>type/subtype</i>.
            </dd>
        </dl>
        <pre>URI: &lt;<i>value</i>&gt; (value enclosed in angle brackets)</pre>
        <dl>
          <dd>Данное значение указывает на полный URL или
            ссылку на локальный файл, сообщение из которого
            будет возвращено клиенту в теле сообщения. Если
            значение является локальным файлом, сервер
            отсылает его как результат запроса, как будто
            клиент воспольхзовался методом GET при генерации
            запроса. Если значение является полным URL, то
            сервер возвращает сообщение &quot;401 redirect&quot; для
            обеспечения прямой загрузки указанного объекта. </dd>
        </dl>
        <pre>Location:</pre>
        <dl>
          <dd>То же самое, что и URI, но данная форма сейчас
            не используется. Параметр <i>value</i> НЕ должен быть
            взят в угловые скобки. </dd>
        </dl>
        <h3 align="center">Другие заголовки</h3>
        <p>Другие заголовки передаются клиенту в том
        виде, в котором они представлены.</p>
        <hr color="#000080" SIZE="1" width="90%">
        <h2 align="center">Прямой возврат</h2>
        <p>Сервер позволяет конечному приложению
        осуществлять прямой возврат результата запроса
        клиенту. Это осуществляется посредством
        включение в заголовок возвращаемого сообщения
        его информационного протокола. Это позволяет CGI
        программам формировать непосредственный ответ
        клиенту с указанием HTTP заголовка без
        предварительной обработки его сервером.. </p>
        <p>Сервер анализирует результат запроса,
        помещаемиый CGI программой в выходной файл (Output
        File), и, если первая строка &quot;<tt>HTTP/1.0</tt>&quot;, он
        предполагает, что сообщение содержит полный HTTP
        ответ и отсылает его клиенту без упаковки.</p>
      </dd>
    </dl>
    </td>
  </tr>
</tbody>
</table>

<br><br>
<center>
<hr width="90%" size="1" noshade>
[ <A Href="6.htm"> Предыдущий раздел</A> ]
[ <A Href="index.htm">Оглавление</A> ]
[ <A Href="8.htm">Следующий раздел</A> ]
<hr width="90%" size="1" noshade>
</center>
</body>
</html>
