<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE></TITLE>
<META content="TEXT/HTML; CHARSET=WINDOWS-1251" http-equiv=CONTENT-TYPE>
<META content="Microsoft FrontPage 4.0" name=GENERATOR>
<STYLE></STYLE>
</HEAD>
<body background=../fon.jpg>
<ul>

  <li><a href="#a"><font face="Times New Roman" size=3>Глава 5.
    Массивы</font> </a> </li>
  <ul>
    <li><a href="#b"><font face="Times New Roman" size="3">Создание
      массивов</font>
      </a>
    </li>
    <li><a href="#c"><font face="Times New Roman" size="3">Многомерные
      массивы</font>
      </a>
    </li>
    <li><a href="#d"><font face="Times New Roman" size="3">Ссылки на
      многомерные массивы</font>
      </a>
    </li>
    <li><a href="#e"><font face="Times New Roman" size="3">Поиск
      элементов массива</font>
      </a>
    </li>
    <li><a href="#f"><font face="Times New Roman" size="3">Добавление
      и удаление элементов</font>
      </a>
    </li>
    <li><a href="#g"><font face="Times New Roman" size="3">Перебор
      элементов</font>
      </a>
    </li>
    <li><a href="#h"><font face="Times New Roman" size="3">Размер
      массива</font>
      </a>
    </li>
    <li><a href="#i"><font face="Times New Roman" size="3">Сортировка
      массивов</font>
      </a>
    </li>
    <li><a href="#j"><font face="Times New Roman" size="3">Другие
      полезные функции</font>
      </a>
    </li>
    <li><a href="#k"><font face="Times New Roman" size="3">Итоги</font>
      </a>
    </li>
  </ul>
</ul>
<A NAME="a"></A>
<p>&nbsp;</p>
<p><font color="#000000" face="Times New Roman" size="5">ГЛАВА 5</font></p>
<p><font color="#000000" face="Times New Roman" size="5">Массивы</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В главе 2
были представлены две разновидности
массивов, используемых в программах РНР, —
индексируемые и ассоциативные. Вероятно, вы
помните, что в индексируемых массивах при
обращении к элементу указывается его
позиция, а в ассоциативных массивах для
этой цели используется специальный ключ.
Обе разновидности массивов обладают
гибкими и мощными средствами для работы с
большими объемами данных</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В этой главе
рассматриваются различные средства РНР по
работе с массивами. К концу этой главы вы
познакомитесь с одномерными и многомерными
массивами, сортировкой и перебором
элементов, а также с другими возможностями,
часто используемыми при работе с массивами.
Книгу не стоит рассматривать как подробный
справочник по всем существующим функциям,
хотя так уж получилось, что в этой главе
рассматриваются практически все функции
массивов. Последнюю версию списка функций
можно найти на домашней странице РНР по
адресу <a href="http://www.php.net">http://www.php.net</a>.</font></p>
<b>
<p><A NAME="b"></A><font color="#000000" face="Times New Roman" size="4">Создание
массивов</font></p>
</b><i>
<p><font COLOR="#000000" size="3" face="Times New Roman">Массив </font></i><font size="3" face="Times New Roman"><font COLOR="#000000">представляет
собой совокупность объектов, имеющих
одинаковые размер и тип. Каждый объект в
массиве называется </font><i><font COLOR="#000000">элементом
массива. </font></i><font COLOR="#000000">Создать новый
массив в РНР несложно. При объявлении
индексируемого массива после имени
переменной ставится пара квадратных скобок
([ ]):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages [ ] = &quot;Spanish&quot;;&nbsp;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">
// $languages[0] = &quot;Spanish&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">После этого
в массив можно добавлять новые элементы,
как показано ниже. Обратите внимание: новые
элементы добавляются без явного указания
индекса. В этом случае новый элемент
добавляется в позицию, равную длине массива
плюс 1:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages[ ] = &quot;English&quot;;
// $1anguages[l] = &quot;English&quot;;&nbsp;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New"> $languagest ] = &quot;Gaelic&quot;; //
$languages[2] = &quot;Gaelic&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Кроме того,
новые элементы можно добавлять в
конкретную позицию массива. Для этого
указывается индекс нрвого элемента:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages[15] = &quot;Italian&quot;;&nbsp;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages[22] = &quot;French&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Ассоциативные
массивы создаются аналогичным образом:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages[&quot;Spain&quot;]
= &quot;Spanish&quot;;&nbsp;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages[&quot;France&quot;] = &quot;French&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">При создании
массивов используются три стандартные
языковые конструкции:</font></p>
<ul>
  <li><font COLOR="#000000" size="3" face="Times New Roman">аrrау( );</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">list( );</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">range( ).</font></li>
</ul>
<p><font COLOR="#000000" size="3" face="Times New Roman">Хотя все три
случая приводят к одному результату —
созданию массива, в некоторых случаях одна
конструкция может оказаться
предпочтительнее других. Далее приведены
описания и примеры использования каждой
конструкции.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">аггау( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array( ) получает ноль или более </font><i><font COLOR="#000000">элементов
</font></i><font COLOR="#000000">и возвращает массив,
состоящий из указанных элементов. Ее
синтаксис:</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array
array ( [элемент1, элемент2...] )</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Вероятно, array(
)
является всего лишь более наглядной
записью для создания массива, используемой
для удобства программиста. Ниже показан
пример использования array( ) для создания
индексируемого массива:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages = array
(&quot;English&quot;. &quot;Gaelic&quot;. &quot;Spanish&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages[0] =
&quot;English&quot;. $languages[1] = &quot;Gaelic&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages[2] =
&quot;Spanish&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">А вот как array(
)
используется при создании ассоциативных
массивов:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages = array(&quot;Spain&quot;
=&gt; &quot;Spanish&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Ireland&quot;
=&gt; &quot;Gaelic&quot;.</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;United States&quot;
=&gt; &quot;English&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages[&quot;Spain&quot;] = &quot;Spanish&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages[&quot;Ireland&quot;] = &quot;Gaelic&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages[&quot;United
States&quot;] = &quot;English&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Ассоциативные
массивы особенно удобны в тех ситуациях,
когда числовые индексы не имеют
логического соответствия. Например, в
предыдущем примере названия стран вполне
естественно ассоциируются с языками.
Попробуйте-ка воплотить эту логическую
связь при помощи цифр!</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">list( )</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Конструкция
list( ) похожа на аrrау( ), однако ее главная
задача — одновременное присваивание
значений, извлеченных из массива, сразу
нескольким переменным. Синтаксис команды
list( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">void
list (переменная1 [. переменная2 , ...] )</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Конструкция
list() особенно удобна при чтении информации
из базы данных или файла. Допустим, вы
хотите отформатировать и вывести данные,
прочитанные из текстового файла. Каждая
строка файла содержит сведения о
пользователе (имя,</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">профессия и
любимый цвет); компоненты записи
разделяются вертикальной чертой (|).
Типичная строка выглядит так:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">Nino Sanzi|Professional
Golfer|green</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">При помощи
list ( ) можно написать простой цикл, который
будет читать каждую строку, присваивать ее
компоненты переменным, форматировать и
отображать данные. Приведенный ниже
листинг демонстрирует возможность
одновременного присваивания нескольким
переменным с использованием list ( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Читать
строки, пока не будет достигнут конец файла&nbsp;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">
while ($line = fgets ($user_file. 4096)) :</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Разделить
строку функцией split( ).</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Компоненты
присваиваются переменным Sname. $occupation и Scolor.</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">list ($name,
$occupation, $color) = split( &quot;|&quot;, $line);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">//
Отформатировать и вывести данные</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;Name: Sname
&lt;br&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;Occupation:
Soccupation &lt;br&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;Favorite
color: Scolor &lt;br&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">endwhile;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Каждая
строка файла читается, форматируется и
выводится в следующем виде:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">Name: Nino Sanzi</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">Occupation:
Professional Golfer</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">Favorite color: green</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В
приведенном примере применение list( ) зависит
от разделения строки на элементы функцией
split( ). Элементы, полученные в результате
деления, присваиваются, соответственно,
переменным $name, $occupation и $color. Дальше все
сводится к форматированию данных для
вывода в конкретном браузере. Удобные
средства лексического анализа текстовых
файлов являются одной из сильных сторон РНР.
Эта тема подробно рассматривается в главах
7 и 8.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">range ( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Конструкция
range( ) позволяет легко и быстро создать
массив целых чисел из интервала,
определяемого верхней и нижней границами.
Range( ) возвращает массив, состоящий из всех
целых чисел указанного интервала.
Синтаксис range( ):</font></font></p>
<p><font COLOR="#000000" face="Courier New" size="3">array range (int нижняя_граница,
int верхняя граница)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Следующий
пример наглядно показывает, насколько
удобна эта конструкция:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$lottery = range(0,9);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $lottery = array(0,1,2,3,4,5,6,7,8,9)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Как видно из
приведенного фрагмента, в параметрах range( )
был указан интервал от 0 до 9 и массив $lottery
был заполнен целыми числами из этого
интервала.</font></p>
<b>
<p><A NAME="c"></A><font color="#000000" face="Times New Roman" size="4">Многомерные
массивы</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Со
временем ваши программы станут более
сложными, и возможностей простых
одномерных массивов окажется недостаточно
для хранения необходимой информации. </font><i><font COLOR="#000000">Многомерный
массив </font></i><font COLOR="#000000">(массив массивов)
предоставляет в распоряжение про</font></font><font COLOR="#000000" size="3" face="Times New Roman">граммиста
более эффективные средства для хранения
информации, требующей дополнительного
структурирования. Создать многомерный
массив несложно — просто добавьте
дополнительную пару квадратных скобок,
чтобы вывести массив в новое измерение:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$chessboard [1] [4] =
&quot;King&quot;; // Двухмерный массив</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$capitals[&quot;USA&quot;]
[&quot;Ohio&quot;] = &quot;Columbus&quot;: // Двухмерный массив</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$streets[&quot;USA&quot;][&quot;Ohio&quot;][&quot;Columbus&quot;] = &quot;Harrison&quot;;
// Трехмерный массив</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В качестве
примера рассмотрим массив, в котором
хранится информация о десертах и
особенностях их приготовления. Обойтись
одномерным массивом было бы довольно
трудно, но двухмерный массив подходит как
нельзя лучше:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$desserts = аrrау(</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Fruit Cup&quot;
=&gt; array (</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;calories&quot;
=&gt; &quot;low&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;served&quot; -&gt; &quot;cold&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;preparation&quot;
=&gt; &quot;10 minutes&quot;</font></p>
<p><font color="#000000" size="3" face="Courier New">),</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Brownies&quot;
=&gt; array (</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;calories&quot;
-&gt; &quot;high&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;served&quot; =&gt; &quot;piping hot&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;preparation&quot;
=&gt; &quot;45 minutes&quot;</font></p>
<p><font color="#000000" size="3" face="Courier New">)</font></p>
<p><font color="#000000" size="3" face="Courier New">);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">После
создания массива к его элементам можно
обращаться по соответствующим ключам:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$desserts[&quot;Fruit
Cup&quot;][&quot;preparation&quot;] // возвращает &quot;10 minutes&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$desserts[&quot;Brownies&quot;][&quot;calories&quot;] // возвращает
&quot;high&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Присваивание
значений элементам многомерных массивов
выполняется так же, как и в одномерных
массивах:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$desserts[&quot;Cake&quot;][&quot;calories&quot;]
= &quot;too many&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">//
Присваивает свойству &quot;calories&quot; объекта
&quot;Cake&quot; значение &quot;too many&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Хотя в
многомерных массивах появляются новые
уровни логической организации данных,
многомерные массивы создаются практически
так же, как и одномерные. Впрочем, ссылки на
многомерные массивы в строках требуют
особого внимания; этой теме посвящен
следующий раздел.</font></p>
<b>
<p><A NAME="d"></A><font color="#000000" face="Times New Roman" size="4">Ссылки на
многомерные массивы</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Ссылки на
элементы многомерных массивов внутри строк
несколько отличаются от ссылок на другие
типы данных. Возможны два варианта. Во-первых,
можно воспользоваться оператором
конкатенации:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;Brownies
are good, but the calories content is &quot;.</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$desserts[&quot;Brownies&quot;][&quot;calories&quot;];</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Во-вторых,
ссылку на элемент многомерного массива
можно заключить в фигурные скобки ({ }):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;Brownies
are good, but the calories content is</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">{$desserts[Brownies][calories]}&quot;;</font></p>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Обратите
внимание на отсутствие кавычек вокруг
ключей. Также следует помнить, что между
фигурными скобками и ссылкой не должно быть
лишних пробелов. Если хотя бы одно из этих
условий не выполняется, произойдет ошибка.
Впрочем, годятся оба способа. Я рекомендую
выбрать один формат и придерживаться его,
чтобы ваши программы выглядели более
последовательно. Если </font><i><font COLOR="#000000">не
использовать </font></i><font COLOR="#000000">какой-либо
из этих способов форматирования, ссылки на
многомерные массивы будут
интерпретироваться буквально, что
наверняка приведет к непредвиденным
результатам.</font></font></p>
<b>
<p><A NAME="e"></A><font color="#000000" face="Times New Roman" size="4">Поиск
элементов массива</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Поиск
элементов относится к числу важнейших
операций с массивами. В РНР существует
несколько стандартных функций, позволяющих
легко находить в массиве нужные ключи и
значения.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">in_array( )</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция i
n_array ( ) проверяет, присутствует ли в массиве
заданный элемент. Если поиск окажется
удачным, функция возвращает TRUE, в противном
случае возвращается FALSE. Синтаксис функции
in_array( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">bool in_array(mixed элемент,
array массив) </font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Эта функция
особенно удобна тем, что вам не приходится в
цикле перебирать весь массив в поисках
нужного элемента. В следующем примере
функция in_array( ) ищет элемент &quot;Russian&quot; в
массиве $languages:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages = array(&quot;English&quot;,
&quot;Gaelic&quot;, &quot;Spanish&quot;):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$exists = in_array(&quot;Russian&quot;,
$languages); // $exists присваивается FALSE</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$exists = in_array(&quot;English&quot;,
$languages): // $exists присваивается TRUE</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция in_array(
)
часто встречается в управляющих
конструкциях, когда ее возвращаемое
значение (TRUE/FALSE) используется для выбора
одного из двух вариантов продолжения. В
следующем примере функция in_array( )
используется для выбора одного из двух
вариантов в условной команде if:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Ввод
данных пользователем</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$language = &quot;French&quot;; $email =
&quot;wjgilmore@hotmail.com&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Если язык присутствует
в массиве</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">if (in_array($language.
$languages)) :</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Подписать
пользователя на бюллетень.</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Обратите
внимание: в РНР нет стандартной функции с
именем</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// subscribe_user(). В
данном примере эта функция просто
имитирует</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// процесс
подписки.</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">subscribe_user($email,
$language);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;You are now
subscribed to the $language edition of the newsletter.&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Язык
отсутствует в массиве</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">else :</font></p>
<p><font size="3" face="Courier New"><font color="#000000">print &quot;We're sorry,
but we don't yet offer a $language edition of the newsletter&quot;.</font></font></p>
<p><font color="#000000" size="3" face="Courier New">endif;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Что
происходит в этом примере? Допустим,
переменные $language и $email содержат данные,
введенные пользователем. Вы хотите
убедиться в том, что указанный язык
поддерживается вашей системой, и
используете для этой цели функцию in_array( ).
Если название языка присутствует в массиве,
пользователь подписывается на бюллетень и
получает соответствующее сообщение. В
противном случае программа сообщает, что на
указанном языке бюллетень не
распространяется. Конечно, в настоящей
программе пользователь не должен гадать,
какие языки поддерживаются вашей
программой. Задача решается при помощи
раскрывающегося списка — эта тема подробно
рассматривается в главе 10. Здесь этот
пример всего лишь демонстрирует
возможности работы с массивами.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_keys( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_keys( ) возвращает массив, содержащий все
ключи исходного массива, переданного в
качестве параметра. Если при вызове
передается дополнительный параметр
искомый_элемент, возвращаются только ключи,
которым соответствует заданное значение; в
противном случае возвращаются все ключи
массива. Синтаксис функции array_keys( ):</font></font></p>
<p><font COLOR="#000000" face="Courier New" size="3">array array_keys (array массив
[, mixed искомый_элемент])</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Рассмотрим
пример использования функции array_keys( ) для
получения ключа заданного элемента:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$great_wines = array
(&quot;Australia&quot; =&gt; &quot;Clarendon Hills 96&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;France&quot;
=&gt; &quot;Comte George de Vogue 97&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Austria&quot; =&gt; &quot;Feiler
Artinger 97&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$great_labels = array_keys($great_wines);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $great_labels =
array(&quot;Australia&quot;, &quot;France&quot;, &quot;Austria&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$great_labels =
array_keys($great_wines, &quot;Clarendon Hills 96&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $great_labels =
array(&quot;Australia&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция
array_keys( ) позволяет очень легко получить все
ключи ассоциативного массива — например, в
предыдущем случае ими были названия стран,
в которых производятся различные сорта вин.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_values( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_values( ) возвращает массив, состоящий из
всех значений исходного массива,
переданного в качестве параметра.
Синтаксис функции array_values( ):
</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array array_values(array массив)
</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Вернемся к
предыдущему примеру, в котором функция
array_keys( ) использовалась для получения всех
значений ключей. На этот раз функция array_values(
)
возвращает все значения, соответствующие
ключам:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $great_wines = array
(&quot;Australia&quot; =&gt; &quot;Clarendon Hills 96&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// &quot;France&quot;
=&gt; &quot;Comte George de Vogue 97&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// &quot;Austria&quot; =&gt; &quot;Feiler
Artinger 97&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$great_labels =
array_values($great_wines);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $great_labels = аrrау(&quot;Clarendon
Hills 96&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// &quot;Comte George
de Vogue 97&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// &quot;Feiler
Artinger 97&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функции
array_keys( ) и array_values( ) дополняют друг друга,
позволяя при необходимости получить все
составляющие той или иной стороны
ассоциативного массива.</font></p>
<b>
<p><A NAME="f"></A><font color="#000000" face="Times New Roman" size="4">Добавление и
удаление элементов</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">К счастью, в
РНР при создании массива не нужно указывать
максимальное количество элементов. Это
увеличивает свободу действий при операциях
с массивами, поскольку вам не приходится
беспокоиться о случайном выходе за границы
массива, если количество элементов
превысит ожидаемый порог. В РНР существует
несколько функций для увеличения размеров
массива. Некоторые из них были созданы для
удобства программистов, привыкших работать
с различными типами очередей и стеков (FIFO,
FILO и т. д.), что отражается в названиях
функций (push, pop, shift и unshift). Но даже если вы не
знаете, что такое «очередь» или «стек», не
огорчайтесь — в этих функциях нет ничего
сложного.</font></p>
<p><img border="0" src="prim.gif" align=left width="36" height="35"><i><font COLOR="#000000" size="3" face="Times New Roman">Очередью
(queue) называется структура данных, из
которой элементы извлекаются в порядке
поступления. Стеком (stack) называется
структура данных, из которой элементы
извлекаются в порядке, обратном порядку их
поступления.</font></p>
</i><b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_push( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_push( ) присоединяет (то есть дописывает в
конец массива) один или несколько новых
элементов. Синтаксис функции array_push( ):
</font></font></p>
<p><font COLOR="#000000" face="Courier New" size="3">int array_push(array массив, mixed элемент
[,
...])
</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Длина
массива возрастает прямо пропорционально
количеству его элементов. Это
продемонстрировано в следующем примере:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages = array(&quot;Spanish&quot;,
&quot;English&quot;, &quot;French&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array_push($languages, &quot;Russian&quot;,
&quot;German&quot;, &quot;Gaelic&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages = array(&quot;Spanish&quot;,
&quot;English&quot;, &quot;French&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// &quot;Russian&quot;, &quot;German&quot;,
&quot;Gaelic&quot;)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">У функции
array_push( ), как и у многих стандартных функций
РНР, существует «двойник» — функция аrrау_рор(
),
предназначенная для извлечения элементов
из массива. Главное различие между этими
функциями заключается в том, что array_push( )
может добавлять несколько элементов
одновременно, а аrrау_рор( ) удаляет элементы
только по одному.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">аrrау_рор( )</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Результат
работы функции аrrау_рор( ) прямо
противоположен array_push( ) — эта функция
извлекает (то есть удаляет) последний
элемент из массива. Извлеченный элемент
возвращается функцией. Синтаксис функции аrrау_рор(
):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">аrrау_рор(аrrау массив)
</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">При каждом
выполнении аrrау_рор( ) размер массива
уменьшается на 1. Рассмотрим пример:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages = array(&quot;Spanish&quot;,
&quot;English&quot;, &quot;French&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Russian&quot;,
&quot;German&quot;, &quot;Gaelic&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$a_language = array_pop($languages):</font>
<font COLOR="#000000" size="3" face="Courier New">// $a_language = &quot;Gaelic&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$a_language = array_pop($languages):</font>
<font COLOR="#000000" size="3" face="Courier New">//
$a_language = &quot;German&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages = array (&quot;Spanish&quot;,
&quot;English&quot;, &quot;French&quot;, &quot;Russian&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функции
array_push( ), и array_pop( ) удобны тем, что с их помощью
можно выполнять операции с элементами и
управлять размером массива, не беспокоясь о
неинициализированных или пустых элементах.
Такое решение работает намного эффективнее,
чем любые попытки управления этими
факторами со стороны программиста.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_shift( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_shift( ) аналогична аrrау_рор( ) с одним
отличием: элемент удаляется из начала (левого
края) массива. Все остальные элементы
массива сдвигаются на одну позицию к началу
массива. У функции array_shift( ) такой же
синтаксис, как и у аггау_рор( ): </font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array_shift(array массив) </font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">При работе с
функцией array_shift( ) необходимо помнить, что
элементы удаляются из начала массива, как
показывает следующий пример:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages = array(&quot;Spanish&quot;,
&quot;English&quot;, &quot;French&quot;, &quot;Russian&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$a_language =
array_shift($languages); // $a_language = &quot;Spanish&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages =
array(&quot;English&quot;, &quot;French&quot;, &quot;Russian&quot;);</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_unshift( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_unshift( ) дополняет array_shift( ) — новый элемент
вставляется в начало массива, а остальные
элементы сдвигаются на одну позицию вправо.
Синтаксис команды array_unshift( ):
</font></font></p>
<p><font COLOR="#000000" face="Courier New" size="3">1nt array_unshift(array массив, mixed переменная1
[....переменная2])
</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">При одном
вызове функции можно добавить как один, так
и несколько элементов, при этом размер
массива возрастает пропорционально
количеству добавленных элементов. Пример
добавления нескольких элементов:</font></p>
<p><font color="#000000" size="3" face="Courier New">$</font><font COLOR="#000000" size="3" face="Courier New">languages = array(&quot;French&quot;,
&quot;Italian&quot;, &quot;Spanish&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array_unshift($languages,
&quot;Russian&quot;, &quot;Swahili&quot;, &quot;Chinese&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages = array(&quot;Russian&quot;,
&quot;Swahili&quot;, &quot;Chinese&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// &quot;French&quot;,
&quot;Italian&quot;, &quot;Spanish&quot;);</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_pad( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_pad( ) позволяет быстро увеличить массив до
желаемого размера посредством его
дополнения стандартными элементами.
Синтаксис функции array_pad( ): </font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array arrap_pad(array массив,
int размер, mixed значение): </font></p>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Параметр </font><i><font COLOR="#000000">размер
</font></i><font COLOR="#000000">определяет новую длину
массива. Параметр </font><i><font COLOR="#000000">значение
</font></i><font COLOR="#000000">задает стандартное
значение, присваиваемое элементам во всех
новых позициях массива. При использовании
array_pad( ) необходимо учитывать некоторые
обстоятельства:</font></font></p>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Если </font><i><font COLOR="#000000">размер
</font></i><font COLOR="#000000">положителен, массив
дополняется справа, а если отрицателен —
слева.</font></font></p>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Если
абсолютное значение параметра </font><i><font COLOR="#000000">размер
</font></i><font COLOR="#000000">меньше либо равно длине
массива, никаких действий не выполняется.</font></font></p>
<p><i><font COLOR="#000000" size="3" face="Times New Roman"><img border="0" src="prim.gif" align=left width="36" height="35">Абсолютным
значением (модулем) целого числа называется
его значение без знака. Например,
абсолютное значение чисел 5 и -5 равно 5.</font></p>
</i>
<p><font COLOR="#000000" size="3" face="Times New Roman">Пример
дополнения массива с конца:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$weights = array(1, 3,
5, 10, 15, 25, 50);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$weights = array_pad($weights.
10, 100);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Результат:
$weights = array(1, 3, 5, 10, 15, 25, 50, 100, 100, 100);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Пример
дополнения массива с начала:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$weights = array(1, 3,
5, 10, 15, 25, 50);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$weights = array_pad($weights,
-10, 100);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Результат:
$weights = array(100, 100, 100, 1, 3, 5, 10, 15, 25, 50);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Неправильная
попытка дополнения массива:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$weights = array(1, 3,
5, 10, 15, 25, 50);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$weights = array_pad($weigtits, 3, 100);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Массив
$weights не изменяется:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $weights = array(1, 3, 5, 10, 15, 25,
50);</font></p>
<b>
<p><A NAME="g"></A><font color="#000000" face="Times New Roman" size="4">Перебор
элементов</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">В РНР
существует несколько стандартных функций,
предназначенных для перебора элементов
массива. В совокупности эти функции
обеспечивают гибкие и удобные средства для
быстрой обработки и вывода содержимого
массивов. Вероятно, вы будете часто
использовать эти функции, поскольку они
лежат в основе практически всех алгоритмов
работы с массивами.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">reset( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
reset( ) переводит внутренний указатель
текущей позиции в массиве к первому
элементу. Кроме того, она возвращает
значение первого элемента. Синтаксис
функции reset( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">mixed reset (array массив)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Рассмотрим
следующий массив:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$fruits = array(&quot;apple&quot;,
&quot;orange&quot;, &quot;banana&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Допустим,
указатель текущей позиции в этом массиве
установлен на элемент &quot;orange&quot;. Команда:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$a_fruit = reset($fruits);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">вернет
указатель в начало массива, то есть на
элемент &quot;apple&quot;, и вернет это значение,
если результат вызова reset( ) используется в
программе. Возможен и упрощенный вариант
вызова:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">reset($fruits);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В этом
случае указатель переходит к первому
элементу массива, а возвращаемое значение
не используется.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">each ( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
each( ) при каждом вызове выполняет две
операции: она возвращает пару «ключ/значение»,
на которую ссылается указатель текущей
позиции, и перемещает указатель к
следующему элементу. Синтаксис функции each(
):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array each (array массив)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Для удобства
each ( ) возвращает ключ и значение в виде
массива из четырех элементов; ключами этого
массива являются 0, 1, value и key. Возвращаемый
ключ ассоциируется с ключами 0 и key, а
возвращаемое значение — с ключами 1 и value.</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В следующем
примере функция each ( ) возвращает элемент,
находящийся в текущей позиции:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Объявить
массив из пяти элементов</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$spices = array(&quot;parsley&quot;,
&quot;sage&quot;, &quot;rosemary&quot;, &quot;thyme&quot;, &quot;pepper&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Установить
указатель на первый элемент массива</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">reset($spices);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Создать
массив $a_sp1ce. состоящий из четырех элементов</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$a_spice = each($spices);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В результате
выполнения приведенного фрагмента массив
$a_spice будет содержать следующие пары «ключ/значение»:</font></p>
<ul>
  <li><font COLOR="#000000" size="3" face="Times New Roman">0 =&gt; 0;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">1 =&gt; &quot;parsley&quot;;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">key =&gt; 0;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">value =&gt; &quot;parsley&quot;.</font></li>
</ul>
<p><font COLOR="#000000" size="3" face="Times New Roman">После этого
строку &quot;parsley&quot; можно вывести любой из
следующих команд:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print $a_spice[1]:
print $a_spice[&quot;value&quot;];</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция each()
обычно используется в сочетании с list( ) в
циклических конструкциях для перебора всех
или некоторых элементов массива. При каждой
итерации each( ) возвращает либо следующую
пару «ключ/значение», либо логическую ложь
при достижении последнего элемента массива.
Вернемся к массиву $spices; чтобы вывести все
элементы на экран, можно воспользоваться
следующим сценарием:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Сбросить
указатель текущей позиции</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">reset($spices);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Перебрать
пары &quot;ключ/значение&quot;, ограничиваясь
выводом значения</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">while (list ($key, $val)
= each ($spices) ) :</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;$val &lt;br&gt;&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">endwhile;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Ниже
приведен более интересный пример
использования each( ) в сочетании с другими
функциями, описанными в этой главе. Листинг
5.1 показывает, как при помощи этих функций
вывести отформатированную таблицу стран и
языков.</font></p>
<b><i>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Листинг
5.1. </font></font></i></b><font size="3" face="Times New Roman"><i><font COLOR="#000000">Построение
таблицы HTML по содержимому массива</font></i></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Объявить
ассоциативный массив стран и языков $languages =
array (&quot;Country&quot; =&gt; &quot;Language&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Spain&quot; =&gt;
&quot;Spanish&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;USA&quot; =&gt;
&quot;English&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;France&quot;
=&gt; &quot;French&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Russia&quot;
=&gt; &quot;Russian&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Начать
новую таблицу</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;&lt;table border=l&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">//
Переместить указатель к позиции первого
элемента</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">reset ($languages);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Прочитать
первый ключ и элемент</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$hdl = key ($languages);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">Shd2 = $languages[$hd1];</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Вывести
первый ключ и элемент в виде заголовков
таблицы</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;&lt;tr&gt;&lt;th&gt;$hd1&lt;/th&gt;&lt;th&gt;$hd2&lt;/th&gt;&lt;/tr&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">next($languages);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Выводить
строки таблицы с ключами и элементами
массива</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">while (list ($ctry,$lang) = each
($languages)) :</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;&lt;tr&gt;&lt;td&gt;Sctry&lt;/td&gt;&lt;td&gt;$lang&lt;/td&gt;&lt;/tr&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">endwhile;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Завершить
таблицу print &quot;&lt;/table&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">?&gt;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В результате
выполнения этого кода будет построена
следующая таблица HTML.</font></p>
<table BORDER="1" CELLSPACING="0" CELLPADDING="0" WIDTH="300" height="119">
  <tr>
    <td WIDTH="92" VALIGN="TOP" HEIGHT="19" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman"><b>Country</b></font></p>
    </td>
    <td WIDTH="170" VALIGN="TOP" HEIGHT="19" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman"><b>Language</b></font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="92" VALIGN="TOP" HEIGHT="18" align="center">
      <font COLOR="#000000" size="3" face="Times New Roman">Spain</font>
    </td>
    <td WIDTH="170" VALIGN="TOP" HEIGHT="18" align="center">
      <font COLOR="#000000" size="3" face="Times New Roman">Spanish</font>
    </td>
  </tr>
  <tr>
    <td WIDTH="100" VALIGN="TOP" HEIGHT="16" align="center">
      <font COLOR="#000000" size="3" face="Times New Roman"> USA</font>
    </td>
    <td WIDTH="170" VALIGN="TOP" HEIGHT="16" align="center">
      <font COLOR="#000000" size="3" face="Times New Roman"> English</font>
    </td>
  </tr>
  <tr>
    <td WIDTH="92" VALIGN="TOP" HEIGHT="17" align="center">
      <font COLOR="#000000" size="3" face="Times New Roman">France</font>
    </td>
    <td WIDTH="170" VALIGN="TOP" HEIGHT="17" align="center">
      <font COLOR="#000000" size="3" face="Times New Roman">
      French</font>
    </td>
  </tr>
  <tr>
    <td WIDTH="92" VALIGN="TOP" HEIGHT="19" align="center">
      <font COLOR="#000000" size="3" face="Times New Roman">Russia</font>
    </td>
    <td WIDTH="170" VALIGN="TOP" HEIGHT="19" align="center">
      <font COLOR="#000000" size="3" face="Times New Roman">Russian</font>
    </td>
  </tr>
</table>
<p><font COLOR="#000000" size="3" face="Times New Roman">Этот пример
дает представление о самой сильной стороне
РНР — возможности объединения
динамического кода с HTML для получения
наглядного, отформатированного
представления прочитанных данных.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">end( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
end( ) перемещает указатель к позиции
последнего элемента массива. Синтаксис
функции end( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">end (array массив)</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">next( )</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция next ( )
смещает указатель на одну позицию вперед,
после чего возвращает элемент, находящийся
в новой позиции. Если в результате смещения</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">указатель
выйдет за пределы массива, next ( ) возвращает
ложное значение. Синтаксис функции next ( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">mixed next (array массив)</font></p>
<i>
<p><font COLOR="#000000" size="3" face="Times New Roman"><img border="0" src="prim.gif" align=left width="36" height="35">Недостаток
функции next ( ) заключается в том, что ложное
значение возвращается и для существующих,
но пустых элементов массива. Если вы хотите
провести обычный перебор, воспользуйтесь
функцией each( ).</font></p>
</i><b>
<p><font COLOR="#000000" size="3" face="Times New Roman">prev( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
prev( ) аналогична next ( ) за одним исключением:
указатель смещается на одну позицию к
началу массива, после чего возвращается
элемент, находящийся в новой позиции. Если в
результате смещения указатель окажется
перед первым элементом массива, prev( ) вернет
ложное значение. Синтаксис функции prev( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">mixed prev (array массив)</font></p>
<i>
<p><font COLOR="#000000" size="3" face="Times New Roman"><img border="0" src="prim.gif" align=left width="36" height="35">Недостаток
функции prev( ) заключается в том, что ложное
значение возвращается и для существующих,
но пустых элементов массива. Если вы хотите
провести обычный перебор, воспользуйтесь
функцией each( ).</font></p>
</i><b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_walk( )</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция
array_walk( ) позволяет применить функцию к
нескольким (а возможно, всем) элементам
массива. Синтаксис функции array_walk( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">int array_walk(array
массив, string имя_функции [, mixed данные])</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция,
заданная параметром имя_функции, может
использоваться для различных целей —
например, для поиска элементов с
определенными характеристиками или
модификации содержимого массива. В
ассоциативных массивах функция имя_функции
должна получать минимум два параметра —
элемент массива и ключ. Если указан
необязательный третий параметр данные, он
становится третьим параметром. В следующем
примере функция array_walk( ) используется для
удаления дубликатов из массива:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">function delete_dupes($element)
{</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">static $last=&quot;&quot;;
if ($element == $last)</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">unset($element); else .
''</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$last=$element:</font></p>
<p><font color="#000000" size="3" face="Courier New">}</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$emails = array(&quot;blah@blah.com&quot;,
&quot;chef@wjgilmore.com&quot;, &quot;blah@blah.com&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">sort($emails);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">reset($emails);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array_walk($emails,&quot;delete_dupes&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $emails = array(&quot;chef@wjgilmore.com&quot;,
&quot;blah@blah.com&quot;);</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_reverse( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_reverse( ) позволяет легко перейти к
противоположному порядку элементов,
составляющих массив. Синтаксис функции
array_reverse( ): </font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array array_reverse(array массив) </font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Рассмотрим
пример использования функции array_reverse( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$us_wireproducers =
array (&quot;California&quot;, &quot;Oregon&quot;, &quot;New York&quot;. &quot;Washington&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$us_wine_producers -
array_reverse (Sus_wine_producers);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $us_wine_producers =
array (&quot;Washington&quot;. &quot;New York&quot;, &quot;Oregon&quot;. &quot;California&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">При вызове
array_reverse( ) для ассоциативного массива пары «ключ/значение»
сохраняются, изменяется только порядок
элементов массива.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_flip( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_flip( ) меняет местами ключи и значения
элементов массива. Синтаксис функции array_flip(
): </font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array array_flip(array массив) </font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В следующем
примере функция array_flip( ) меняет местами все
ключи и значения элементов:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages = array(&quot;Spain&quot;
=&gt; &quot;Spanish&quot;, &quot;France&quot; =&gt; &quot;French&quot;, &quot;Italy&quot;
=&gt; &quot;Italian&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$languages = array_flip($languages);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $languages = array(&quot;Spanish&quot;
=&gt; &quot;Spain&quot;, // &quot;French&quot; =&gt; &quot;France&quot;, //
&quot;Italian&quot; =&gt; &quot;Italy&quot;);</font></p>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Помните:
функция array_flip( ) </font><i><font COLOR="#000000">не
изменяет </font></i><font COLOR="#000000">порядок
элементов массива. Для этой цели
используется функция array_reverse( ).</font></font></p>
<b>
<p><A NAME="h"></A><font color="#000000" face="Times New Roman" size="4">Размер
массива</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Наличие
информации о текущем размере массива часто
позволяет повысить эффективность сценария.
Вероятно, размер массива чаще всего
используется при циклическом переборе
элементов:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$us_wine_producers = array (&quot;Washington&quot;. &quot;New York&quot;, &quot;Oregon&quot;, &quot;California&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">for (Si = 0; Si &lt; sizeof
($us_wine_producers); $i++) :</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print &quot;$us_wine_producers[$i]&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">endfor;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Поскольку
массив $us_wine_producers индексируется целыми
числами, мы можем воспользоваться циклом for
для циклического увеличения переменной-счетчика
($i) и вывода каждого элемента в массиве.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">sizeof( )</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция sizeof (
) возвращает количество элементов в
массиве. Синтаксис функции sizeof ( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">int sizeof (array массив) </font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Вероятно,
функция sizeof ( ) будет часто встречаться в
ваших web-приложениях. Ниже приведен краткий
пример ее использования (кстати, предыдущий
пример тоже относится к числу стандартных
применений sizeof ( )):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$pasta = array(&quot;bowties&quot;,
&quot;angelhair&quot;, &quot;rigatoni&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$pasta_size = sizeof($pasta);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">//
$pasta_size = 3</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">У функции
sizeof ( ) существует и другая, расширенная
форма — count ( ) (см. ниже).</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">count( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
count( ) выполняет ту же операцию, что и sizeof ( ), —
она возвращает количество значений,
содержащихся в массиве. Синтаксис функции
count ( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">int count (mixed переменная)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Единственное
различие между sizeof ( ) и count( ) заключается в
том, что в некоторых ситуациях count ( )
возвращает дополнительную информацию:</font></p>
<ul>
  <li><font COLOR="#000000" size="3" face="Times New Roman">если
переменная существует и является массивом,
count ( ) возвращает количество элементов в
массиве;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">если
переменная существует, но не является
массивом, функция возвращает значение 1;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">если
переменная не существует, возвращается
значение 0.</font></li>
</ul>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_count_values( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_count_values( ) является разновидностью sizeof ( ) и
count ( ). Вместо общего количества элементов
она подсчитывает количество экземпляров
каждого значения в массиве. Синтаксис
функции array_count_values( ): </font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">array array_count_values(array
массив): </font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В
возвращаемом массиве ключами будут
значения исходного массива, а значениями —
их частоты:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$states = аrrау(&quot;ОН&quot;,
&quot;ОК&quot;, &quot;СА&quot;, &quot;РА&quot;, &quot;ОН&quot;, &quot;ОН&quot;,
&quot;РА&quot;, &quot;АК&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$state_freq =
array_count_values($states);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Массив
$state_freq заполняется следующими
ассоциативными парами «ключ/значение»:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$state_freq = аrrау(&quot;ОН&quot; =&gt; 3, &quot;ОК&quot; =&gt; 1,
&quot;СА&quot; =&gt; 1, &quot;РА&quot; =&gt; 2, &quot;АК&quot; =&gt; 1);</font></p>
<b>
<p><A NAME="i"></A><font color="#000000" face="Times New Roman" size="4">Сортировка
массивов</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Сортировка
занимает важное место в программировании и
часто встречается на практике в таких
Интернет-приложениях, как коммерческие
сайты (сортировка категорий товаров в
алфавитном порядке, сортировка цен) или
поисковые системы (сортировка программ по
количеству загрузок). В РНР существует
девять стандартных функций сортировки (табл.
5.1), причем каждая функция сортирует массив
особым образом.</font></p>
<p><font size="3" face="Times New Roman"><font COLOR="#000000"><b>Таблица
5.1.</b><i>
<b> </b></i> </font></font><i><font size="3" face="Times New Roman"><font COLOR="#000000">Функции
сортировки</font></font></p>
</i>
<table BORDER="1" CELLSPACING="0" CELLPADDING="0" WIDTH="500">
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="19" align="center"><b>
      <p><font COLOR="#000000" size="3" face="Times New Roman">Функция</font></p>
      </b></td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="19" align="center"><b>
      <p><font COLOR="#000000" size="3" face="Times New Roman">Сортировка</font></p>
      </b></td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="19" align="center"><b>
      <p><font COLOR="#000000" size="3" face="Times New Roman">Обратный
      порядок</font></p>
      </b></td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="19" align="center"><b>
      <p><font COLOR="#000000" size="3" face="Times New Roman">Сохранение
      пар «ключ/значение»</font></p>
      </b></td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="15">
      <p><font COLOR="#000000" size="3" face="Times New Roman">sort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="15">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Значение</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="15" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Нет</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="15" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Нет</font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">rsort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Значение</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Нет</font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">asort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Значение</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Нет</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="13">
      <p><font COLOR="#000000" size="3" face="Times New Roman">arsort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="13">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Значение</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="13" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="13" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">ksort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Ключ</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Нет</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">krsort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Ключ</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="12">
      <p><font COLOR="#000000" size="3" face="Times New Roman">usort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="12">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Значение</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="12" align="center">
      <p><font color="#000000" size="3" face="Times New Roman">?</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="12" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Нет</font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">uasort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="14">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Значение</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font color="#000000" size="3" face="Times New Roman">?</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="14" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
  </tr>
  <tr>
    <td WIDTH="68" VALIGN="TOP" HEIGHT="18">
      <p><font COLOR="#000000" size="3" face="Times New Roman">uksort</font></p>
    </td>
    <td WIDTH="102" VALIGN="TOP" HEIGHT="18">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Ключ</font></p>
    </td>
    <td WIDTH="121" VALIGN="TOP" HEIGHT="18" align="center">
      <p><font color="#000000" size="3" face="Times New Roman">?</font></p>
    </td>
    <td WIDTH="199" VALIGN="TOP" HEIGHT="18" align="center">
      <p><font COLOR="#000000" size="3" face="Times New Roman">Да</font></p>
    </td>
  </tr>
</table>
<p><font COLOR="#000000" size="3" face="Times New Roman">? относится к
применению пользовательских функций
сортировки, когда порядок сортировки
массива зависит от результатов,
возвращаемых пользовательской функцией.</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Сортировка
элементов массива не ограничивается
стандартными критериями, поскольку три
функции (usort(), uasort( ) и uksort( )) позволяют задать
пользовательский критерий и отсортировать
информацию произвольным образом.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">sort( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Простейшая
функция sort( ) сортирует элементы массива по
возрастанию (от меньших к большим).
Синтаксис функции sort ( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">void sort (array массив)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Нечисловые
элементы сортируются в алфавитном порядке
в соответствии с ASCII-кодами. Следующий
пример демонстрирует применение функции sort(
) при сортировке:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Создать
массив городов.</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$cities = array(&quot;Aprilia&quot;,
&quot;Nettuno&quot;, &quot;Roma&quot;, &quot;Venezia&quot;, &quot;Anzio&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">//
Отсортировать города по возрастанию</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">sort($cities);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Перебрать
содержимое массива и вывести все пары &quot;ключ/значение&quot;.</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">for (reset($cities); $key = key ($cities); next
($cities)):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">print(&quot;cities[$key]
= $cities[$key] &lt;br&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">endfor;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Этот
фрагмент выводит следующий результат:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[0] = Anzio</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[1] = Aprilia</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[2] = Nettuno</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[3] = Roma</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[4] = Venezia</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Как видите,
массив $cities сортируется в алфавитном
порядке. Одна из разновидностей этого
способа сортировки реализована в функции
asort( ), описанной ниже.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">rsort( )</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция rsort (
)
работает точно так же, как функция sort ( ), за
одним исключением: элементы массива
сортируются в обратном порядке. Синтаксис
функции rsort ( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">void rsort (array массив) </font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Вернемся к
массиву $cities из предыдущего примера:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$cities array(&quot;Aprilia&quot;,
&quot;Nettuno&quot;, &quot;Roma&quot;, &quot;Venezia&quot;, &quot;Anzio&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">rsort($cities);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В результате
сортировки массива $cities функцией rsort( )
элементы будут расположены в следующем
порядке:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[0] = Venezia</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[1] = Roma</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[2] = Nettuno</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[3] = Aprilia</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[4] = Anzio</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Массив $cities
также сортируется, но на этот раз в порядке,
обратном алфавитному. Одна из
разновидностей этого способа сортировки
реализована в функции arsort( ), описанной ниже.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">asort( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
asort( ) работает почти так же, как
упоминавшаяся выше функция sort( ), однако она
сохраняет исходную ассоциацию индексов с
элементами независимо от нового порядка
элементов. Синтаксис функции asort( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">void asort(array массив)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Вернемся к
массиву $cities:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$cities = array(&quot;Aprilia&quot;,
&quot;Nettuno&quot;, &quot;Roma&quot;, &quot;Venezia&quot;, &quot;Anzio&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">asort($cities):</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В результате
сортировки массива $cities функцией rsort()
элементы будут расположены в следующем
порядке:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[4] = Anzio</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[0] = Aprilia</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[1] = Nettuno</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[2] = Roma</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[3] = Venezia</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Обратите
внимание на индексы и сравните их с
приведенными в описании функции sort ( ).
Именно в этом и состоит различие между
двумя функциями.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">arsort( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция arsort
( ) представляет собой разновидность asort( ),
которая сохраняет исходную ассоциацию
индексов, но сортирует элементы в обратном
порядке. Синтаксис функции arsort( ):</font></font></p>
<p><font face="Courier New"><i><font COLOR="#000000" size="3">void arsort (array
</font>
</i></font><i><font size="3" face="Courier New"><font COLOR="#000000">массив)</font></font></p>
</i>
<p><font COLOR="#000000" size="3" face="Times New Roman">Воспользуемся
функцией arsort( ) для сортировки массива $cities:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$cities = array(&quot;Aprilia&quot;,
&quot;Nettuno&quot;, &quot;Roma&quot;, &quot;Venezia&quot;, &quot;Anzio&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">arsort($cities);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В результате
сортировки элементы будут расположены в
следующем порядке:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[3] = Venezia</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[2] = Roma</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[l] = Nettuno</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[0] = Aprilia</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">cities[4] = Anzio</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Обратите
внимание на индексы и сравните их с
приведенными в описании функции rsort( ).
Именно в этом и состоит различие между
двумя функциями.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">ksort( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
ksort( ) сортирует массив по ключам, сохраняя
исходные ассоциации ключей со значениями.
Синтаксис функции ksort( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">void ksort (array массив)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Для примера
рассмотрим массив, слегка отличающийся от
исходного массива</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$cities:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$wine_producers = array
(&quot;America&quot; =&gt; &quot;Napa Valley&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Italy&quot; =&gt;
&quot;Tuscany&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Australia&quot; =&gt; &quot;Ruthgerlen&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;France&quot;
=&gt; &quot;Loire&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Chile&quot; =&gt; &quot;Rapel Valley&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В результате
сортировки массива функцией ksort( ) элементы
будут расположены в следующем порядке:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;America&quot;
=&gt; &quot;Napa Valley&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Australia&quot; =&gt; &quot;Ruthgerlen&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Chile&quot; =&gt; &quot;Rapel Valley&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;France&quot; =&gt; &quot;Loire&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Italy&quot; =&gt; &quot;Tuscany&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Сравните с
результатами сортировки $wine_producers функцией
sort ( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;America&quot;
=&gt; &quot;Napa Valley&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Australia&quot; =&gt; &quot;Tuscany&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Chile&quot; =&gt; &quot;Ruthgerlen&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;France&quot; =&gt; &quot;Loire&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Italy&quot; =&gt; &quot;Rapel Valley&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Более чем
сомнительный результат!</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">krsort( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
krsort( ) почти аналогична ksort( ), однако ключи
сортируются в обратном порядке. Синтаксис
функции krsort( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">void krsort (array $массив)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Рассмотрим
сортировку массива $wi reproducers функцией krsort( ):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$wine_producers = array
(&quot;America&quot; =&gt; &quot;Napa Valley&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Italy&quot; =&gt;
&quot;Tuscany&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Australia&quot;
=&gt; &quot;Ruthgerlen&quot;,</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;France&quot;
=&gt; &quot;Loire&quot;.</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Chile&quot; =&gt;
&quot;Rapel Valley&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">krsort($wine_producers);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В результате
сортировки элементы будут расположены в
следующем порядке:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Italy&quot; =&gt;
&quot;Tuscany&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;France&quot; =&gt; &quot;Loire&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Chile&quot; =&gt;
&quot;Rapel Valley&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;Australia&quot; =&gt; &quot;Ruthgerlen&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">&quot;America&quot; =&gt; &quot;Napa Valley&quot;</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Вероятно,
описанных выше функций сортировки будет
вполне достаточно для большинства случаев.
Тем не менее, в некоторых ситуациях может
возникнуть необходимость в определении
собственных критериев сортировки. В РНР
такая возможность реализована в трех
стандартных функциях: usort( ), uasort( ) и uksort( ).</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">usort( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
usort( ) дает возможность отсортировать массив
на основании критерия, определяемого
программистом. Для этого usort( ) в качестве
параметра передается имя функции,
определяющей порядок сортировки. Синтаксис
функции usort( ):</font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">void usort (array массив,
string имя_функции)</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В параметре
массив передается имя сортируемого массива,
а в параметре имя_функции — имя функции, на
основании которой будет осуществляться
сортировка. Допустим, у вас имеется длинный
список греческих имен, которые необходимо
выучить к предстоящему экзамену по истории.
Вы хотите отсортировать слова по длине,
чтобы начать с самых длинных, а затем учить
короткие, когда вы уже устанете. Для
сортировки массива по длине можно
воспользоваться функцией usort( ).</font></p>
<b><i>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Листинг
5.2. </font></font></i></b><i><font size="3" face="Times New Roman"><font COLOR="#000000">Определение
критерия сортировки для функции usort( )</font></font></p>
</i>
<p><font COLOR="#000000" size="3" face="Courier New">$vocab = аrrау(
&quot;Socrates&quot;, &quot;Aristophanes&quot;, &quot;Plato&quot;, &quot;Aeschylus&quot;,
&quot;Thesmophoriazusae&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">function compare_length($str1, $str2) {</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Получить
длину двух следующих слов</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$length1 = strlen($str1);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$length2 = strlen($str2);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Определить,
какая строка имеет меньшую длину</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">if ($length1 ==
$length2) :</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">return 0;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">elseif
($length1 &lt; $length2) :</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">return -1;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">else :</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">return 1;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">endif;</font></p>
<p><font color="#000000" size="3" face="Courier New">}</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Вызвать usort()
с указанием функции compare_length()</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// в качестве
критерия сортировки</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">usort ($vocab, &quot;compare_length&quot;)
:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// Вывести
отсортированный список</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">while (list ($key, $val)
= each ($vocab)) {</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">echo &quot;$val&lt;br&gt;&quot;;</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">}</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В листинге 5.2
функция compare_length ( ) определяет критерий
сортировки массива. В данном случае это
делается посредством сравнения длины
передаваемых элементов. Функция-критерий
должна получать два параметра,
представляющих</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">сравниваемые
элементы массива. Также обратите внимание
на то, как эти элементы неявно передаются
функции-критерию при вызове usort( ), и на то,
что все элементы автоматически
сравниваются этой функцией.</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функции uasort(
)
и uksort( ) представляют собой разновидности usort(
)
с тем же синтаксисом. Функция uasort()
сортирует массив по пользовательскому
критерию с сохранением ассоциаций «ключ/значение».
Функция uksort( ) также сортирует массив по
пользовательскому критерию, однако
сортируются не значения, а ключи.</font></p>
<b>
<p><A NAME="j"></A><font color="#000000" face="Times New Roman" size="4">Другие
полезные функции</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">В этом
разделе описаны некоторые функции, которые
не принадлежат ни к какому конкретному
разделу, но приносят несомненную пользу.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_merge( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
arrayjnerge( ) сливает от 1 до N массивов, объединяя
их в соответствии с порядком перечисления в
параметрах. Синтаксис функции array_merge( ):
</font></font></p>
<p><font face="Courier New"><font COLOR="#000000" size="3">array array_merge(array
</font></font><font size="3" face="Courier New"><font COLOR="#000000">массив1,
array массив2, ..., array массивN]</font></font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Рассмотрим
пример простого объединения массивов
функцией arrayjnerge( );</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$arr_1 = array(&quot;strawberry&quot;,
&quot;grape&quot;, &quot;lemon&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$arr_2 = array(&quot;banana&quot;, &quot;cocoa&quot;,
&quot;lime&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$arr_3 = array(&quot;peach&quot;, &quot;orange&quot;);</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$arr_4 = array_merge
($arr2, $arr_1, $arr_3):</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">// $arr_4 = array(&quot;banana&quot;, &quot;cocoa&quot;,
&quot;lime&quot;, &quot;strawberry&quot;, &quot;grape&quot;, &quot;lemon&quot;,
&quot;peach&quot;, &quot;orange&quot;);</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_slice( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
array_slice( ) возвращает часть массива, начальная
и конечная позиция которой определяется
смещением от начала и необязательным
параметром длины. Синтаксис функции array_slice(
): </font></font></p>
<p><font face="Courier New"><font COLOR="#000000" size="3">array </font><font size="3"><font COLOR="#000000">array_slice(array
массив, int
смещение [, int </font></font></font><font size="3" face="Courier New"><font COLOR="#000000">длина])</font></font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Значения
параметров задаются по определенным
правилам:</font></p>
<ul>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если
смещение положительно, начальная позиция
возвращаемого фрагмента отсчитывается от
начала массива.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если
смещение отрицательно, начальная позиция
возвращаемого фрагмента отсчитывается от
конца массива.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если длина
не указана, в возвращаемый массив
включаются все элементы от начальной
позиции до конца массива.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если указана
положительная длина, возвращаемый фрагмент
состоит из заданного количества элементов.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если указана
отрицательная длина, возвращаемый фрагмент
заканчивается в заданном количестве
элементов от конца массива.</font></li>
</ul>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">array_splice( )</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">Функция
array_spl ice( ) отдаленно напоминает array_slice( ) — она
заменяет часть массива, определяемую
начальной позицией и необязательной длиной,
элементами необязательного параметра-массива.
Синтаксис функции array_splice( ):</font></p>
<p><font COLOR="#000000" face="Courier New" size="3">array_splice(array входной_массив, int
смещение, [int длина], [array заменяющий_массив]);
</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Значения
параметров задаются по определенным
правилам:</font></p>
<ul>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если
смещение положительно, начальная позиция
первого удаляемого элемента отсчитывается
от начала массива.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если
смещение отрицательно, начальная позиция
первого удаляемого элемента отсчитывается
от конца массива.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если длина
не указана, удаляются все элементы от
начальной позиции до конца массива.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если указана
положительная длина, удаляемый фрагмент
состоит из заданного количества элементов.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если указана
отрицательная длина, из массива удаляются
элементы от начальной позиции до позиции,
находящейся на заданном расстоянии от
конца массива.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если
заменяющий_массив не указан, то элементы,
заданные смещением и необязательной длиной,
удаляются из массива.</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">Если
заменяющий_массив указан, он должен быть
заключен в конструкцию аггау() (если он
содержит более одного элемента).</font></li>
</ul>
<p><font COLOR="#000000" size="3" face="Times New Roman">Рассмотрим
несколько примеров, наглядно
демонстрирующих возможности этой функции.
В этих примерах будет использоваться
массив $pasta (см. выше), с которым будут
выполняться различные операции.</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Удаление
всех элементов с пятой позиции до конца
массива:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$pasta = array_splice($pasta,
5);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Удаление
пятого и шестого элементов:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$pasta = array_splice($pasta.
5, 2);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Замена
пятого и шестого элементов новыми
значениями:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$pasta = array_splice($pasta,
5, 2, array(&quot;element1&quot;, &quot;element2&quot;));</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Удаление
всех элементов, начиная с пятого, до
третьего элемента с конца массива:</font></p>
<p><font COLOR="#000000" size="3" face="Courier New">$pasta = array_splice($pasta,
5, -3);</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">Как видно из
приведенных примеров, функция array_splice( )
обеспечивает гибкие возможности удаления
элементов из массива при минимальном
объеме кода.</font></p>
<b>
<p><font COLOR="#000000" size="3" face="Times New Roman">shuffle( )</font></p>
</b>
<p><font size="3" face="Times New Roman"><font COLOR="#000000">Функция
shuffle( ) сортирует элементы массива в
случайном порядке. Синтаксис функции shuffle( ): </font></font></p>
<p><font COLOR="#000000" size="3" face="Courier New">void shuffle(array массив); </font></p>
<b>
<p><A NAME="k"></A><font color="#000000" face="Times New Roman" size="4">Итоги</font></p>
</b>
<p><font COLOR="#000000" size="3" face="Times New Roman">В этой главе
рассматривались массивы и стандартные
функции РНР для работы с массивами. В
частности, рассматривались следующие темы:</font></p>
<ul>
  <li><font COLOR="#000000" size="3" face="Times New Roman">создание
    индексируемых и ассоциативных массивов;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">многомерные
    массивы;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">отображение
    содержимого многомерных массивов;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">поиск
    элементов;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">добавление
    и удаление элементов;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">размер
    массива;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">сортировка;</font></li>
  <li><font COLOR="#000000" size="3" face="Times New Roman">другие
    полезные функции для работы с массивами.</font></li>
</ul>
<p><font COLOR="#000000" size="3" face="Times New Roman">Массивы
являются очень удобными и универсальными
средствами для работы с данными в web-приложениях.
В примерах дальнейших глав массивы будут
неоднократно использоваться для повышения
эффективности и наглядности кода.</font></p>
<p><font COLOR="#000000" size="3" face="Times New Roman">В главе 6 мы
продолжим знакомиться с базовыми
средствами РНР. На этот раз речь пойдет об
объектно-ориентированных возможностях
языка.</font></p>

</BODY></HTML>
