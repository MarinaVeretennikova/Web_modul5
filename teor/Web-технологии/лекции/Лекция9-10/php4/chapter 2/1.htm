<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE></TITLE>
<META content="TEXT/HTML; CHARSET=WINDOWS-1251" http-equiv=CONTENT-TYPE>
<META content="Microsoft FrontPage 4.0" name=GENERATOR>
<STYLE></STYLE>
</HEAD>
<body background=../fon.jpg>
<ul>

  <li><a href="#a"><font face="Times New Roman" size=3>Глава 2.
    Переменные и типы данных</font> </a> </li>
  <ul>
    <li><a href="#b"><font face="Times New Roman" size="3">Целые
      числа</font>
      </a>
    </li>
    <li><a href="#c"><font face="Times New Roman" size="3">Восьмеричная
      и шестнадцатеричная запись</font>
      </a>
    </li>
    <li><a href="#d"><font face="Times New Roman" size="3">Вещественные
      числа</font>
      </a>
      <ul>
        <li><a href="#e"><font face="Times New Roman" size="3">Стандартная
          запись</font></a></li>
        <li><a href="#f"><font face="Times New Roman" size="3">Научная
          запись</font></a></li>
      </ul>
    </li>
    <li><a href="#g"><font face="Times New Roman" size="3">Строковые
      значения</font>
      </a>
      <ul>
        <li><a href="#h"><font face="Times New Roman" size="3">Строковое
          присваивание</font></a></li>
        <li><a href="#i"><font face="Times New Roman" size="3">Синтаксис
          встроенной документации</font></a></li>
        <li><a href="#j"><font face="Times New Roman" size="3">Обращение
          к отдельным символам строк</font></a></li>
      </ul>
    </li>
    <li><a href="#k"><font face="Times New Roman" size="3">Массивы</font>
      </a>
      <ul>
        <li><a href="#l"><font face="Times New Roman" size="3">Одномерные
          индексируемые массивы</font></a></li>
        <li><a href="#m"><font face="Times New Roman" size="3">Одномерные
          ассоциативные массивы</font></a></li>
        <li><a href="#n"><font face="Times New Roman" size="3">Многомерные
          индексируемые массивы</font></a></li>
        <li><a href="#o"><font face="Times New Roman" size="3">Многомерные
          ассоциативные массивы</font></a></li>
        <li><a href="#p"><font face="Times New Roman" size="3">Смешанное
          индексирование</font></a></li>
      </ul>
    </li>
    <li><a href="#q"><font face="Times New Roman" size="3">Объекты</font></a></li>
    <li><a href="#r"><font face="Times New Roman" size="3">Логические
      величины(истина/ложь)</font></a></li>
    <li><a href="#s"><font face="Times New Roman" size="3">Идентификаторы</font></a></li>
    <li><a href="#t"><font face="Times New Roman" size="3">Переменные</font>
      </a>
      <ul>
        <li><a href="#u"><font face="Times New Roman" size="3">Объявление
          переменных</font></a></li>
        <li><a href="#v"><font face="Times New Roman" size="3">Область
          видимых переменных</font></a></li>
        <li><a href="#w"><font face="Times New Roman" size="3">Статические
          переменные</font></a></li>
      </ul>
    </li>
    <li><a href="#x"><font face="Times New Roman" size="3">Переключение
      типов</font></a></li>
    <li><a href="#y"><font face="Times New Roman" size="3">Преобразование
      типов</font></a></li>
    <li><a href="#z"><font face="Times New Roman" size="3">Присваивание</font>
      </a>
      <ul>
        <li><a href="#aa"><font face="Times New Roman" size="3">Присваивание
          по значению</font></a></li>
        <li><a href="#bb"><font face="Times New Roman" size="3">Присваивание
          по ссылке</font></a></li>
      </ul>
    </li>
    <li><a href="#cc"><font face="Times New Roman" size="3">Переменные
      в переменных</font></a></li>
    <li><a href="#dd"><font face="Times New Roman" size="3">Стандартные
      переменные</font></a></li>
    <li><a href="#ee"><font face="Times New Roman" size="3">Константы</font></a></li>
    <li><a href="#ff"><font face="Times New Roman" size="3">Итоги</font></a></li>
  </ul>
</ul>
<A NAME="a"></A>
<p>&nbsp;</p>
<p><font face="Times New Roman" color="#000000" size="5">Глава 2</font></p>
<p><font face="Times New Roman" color="#000000" size="5">Переменные
и типы данных</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Типы данных составляют основу любого
языка программирования и являются
средством, с помощью которого программист
представляет разные типы информации. В РНР
поддерживаются шесть основных типов данных:</p>
<ul>
  <li>целые числа;</li>
  <li>вещественные числа;</li>
  <li>строки;</li>
  <li>массивы;</li>
  <li>объекты;</li>
  <li>логические величины.</li>
</ul>
<p>Одним из столпов любого языка
программирования является поддержка
числовых данных. В РНР поддерживаются как
целые, так и вещественные числа (двойной
точности). Разные числовые форматы подробно
описываются в следующих разделах.</p>
</font><b>
<p><font face="Times New Roman"><A NAME="b"></A><font face="Times New Roman" color="#000000" size="4">Целые
числа</font></b></font></p>
<font face="Times New Roman">
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Целое число не имеет дробной части и
представляется последовательностью из
одной или нескольких цифр. Примеры целых
чисел:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">5</font></p>
<p><font color="#000000" face="Courier New" size="3">591</font></p>
<p><font color="#000000" face="Courier New" size="3">52</font></p>
<b>
<p><font face="Times New Roman"><A NAME="c"></A><font face="Times New Roman" color="#000000" size="4">Восьмеричная и шестнадцатеричная запись</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В РНР поддерживается запись целых чисел в
восьмеричной (по основанию 8) и шестнадцатеричной
(по основанию 16) системах
счисления. Восьмеричные числа начинаются с
цифры 0, после которой следует серия цифр от
0 до 7. Примеры:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">0422</font></p>
<p><font color="#000000" face="Courier New" size="3">0534</font><font FACE="Times New Roman" SIZE="1" COLOR="#000000"></p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Шестнадцатеричные целые числа имеют
префикс 0х или 0Х и могут состоять из цифр от
0 до 9 и букв от а (А) до f (F). Примеры:</p>
</font>
<p><font face="Courier New" color="#000000" size="3">0x3FF</font></p>
<p><font face="Courier New" color="#000000" size="3">0x22abc</font></p>
<b>
<p><font face="Times New Roman"><A NAME="d"></A><font face="Times New Roman" color="#000000" size="4">Вещественные числа</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Вещественные числа (числа с плавающей
точкой) отличаются от целых наличием
дробной части. Они используются для
представления значений, требующих
повышенной точности, — например,
температур или денежных величин. В РНР
поддерживаются два вещественных формата:
стандартная и научная (экспоненциальная)
запись.</p>
</font>
<p><A NAME="e"></A><font color="#000000" size="4" face="Times New Roman">Стандартная запись</font></p>
<i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Стандартная запись </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">удобна
для представления типичных вещественных
чисел — скажем, денежных величин. Примеры:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">12.45</font></p>
<p><font color="#000000" face="Courier New" size="3">98.6</font></p>
<p><A NAME="f"></A><font color="#000000" size="4" face="Times New Roman">Научная запись</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Научная запись лучше подходит для
представления очень больших и очень малых
чисел — скажем, межпланетных расстояний
или размеров атомов. Примеры:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">Зе8</font></p>
<p><font color="#000000" size="3" face="Courier New">5.9736е24</font></p>
<b>
<p><font face="Times New Roman"><A NAME="g"></A><font face="Times New Roman" color="#000000" size="4">Строковые значения</font></font></p>
</b><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Строкой </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">(string)
называется последовательность символов,
которая рассматривается как единое целое,
но при этом обеспечивает доступ к отдельным
символам. Примеры строк:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>thesaurus</p>
<p>49ers</p>
<p>abc</p>
<p>&amp;%/$#</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Обратите внимание: в РНР не
поддерживается символьный тип данных.
Строковый тип может рассматриваться как
единое представление для
последовательностей, состоящих из одного
или нескольких символов.</p>
</font>
<p><A NAME="h"></A><font color="#000000" size="4" face="Times New Roman">Строковое присваивание</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Строки делятся на две категории в
зависимости от типа ограничителя — они
могут ограничиваться парой кавычек (&quot;
&quot;) или апострофов (' '). Между этими
категориями существуют два принципиальных
различия. Во-первых, имена переменных в строках, заключенных в кавычки,
заменяются соответствующими значениями, а
строки в апострофах интерпретируются
буквально, даже если в них присутствуют
имена переменных,</p>
<p>Два следующих объявления дают одинаковый
результат:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$food = &quot;meatloaf&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">$food = 'meatloaf';</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Однако результаты следующих объявлений
сильно различаются:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$sentence = &quot;My favorite food is $food&quot;;</p>
<p>$sentence2 = 'My favorite
food is $food';</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Переменной $sentence присваивается строка</p>
</font>
<p><font color="#000000" size="3" face="Courier New">My favorite food is
meatloaf.</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Обратите внимание: переменная $food
автоматически интерпретируется. С другой
стороны, переменной $sentence2 присваивается
строка</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>My favorite food is $food.</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В отличие от переменной $sentence, в $sentence2
осталась не интерпретированная переменная
$food. Различия обусловлены использованием
кавычек и апострофов при присваивании
переменным $sentence и $sentence2.</p>
<p>Прежде чем рассматривать второе
фундаментальное различие между строками,
заключенными в апострофы и в кавычки,
необходимо познакомиться со служебными
символами, используемыми в строках РНР. В
РНР, как и в большинстве современных языков
программирования, строки могут содержать
служебные символы (например, символы
табуляции или новой строки), перечисленные
в табл. 2.1.</p>
</font><b>
<p><font face="Times New Roman"><font color="#000000" size="3">Таблица
2.1.<i> </i> </font></font></b><i><font color="#000000" size="3">Служебные
символы в строках</font></i></p>
<table border="1" width="450">
  <tr>
    <td width="127">
<b>
<font face="Times New Roman" color="#000000" size="3">Последовательность</font> </b></td>
    <td width="333">
      <p align="center"><b><font face="Times New Roman" size="3" COLOR="#000000">Смысл</font> </b></p>
    </td>
  </tr>
  <tr>
    <td width="127" align="center"><font color="#000000" size="3" face="Times New Roman">\n</font></td>
    <td width="333"><font color="#000000" size="3" face="Times New Roman">Новая строка</font></td>
  </tr>
  <tr>
    <td width="127" align="center"><font color="#000000" size="3" face="Times New Roman">&nbsp;\r</font></td>
    <td width="333"><font color="#000000" size="3" face="Times New Roman">Возврат курсора</font></td>
  </tr>
  <tr>
    <td width="127" align="center"><font color="#000000" size="3" face="Times New Roman">&nbsp;\t</font></td>
    <td width="333"><font color="#000000" size="3" face="Times New Roman">Горизонтальная табуляция</font></td>
  </tr>
  <tr>
    <td width="127" align="center">\\</td>
    <td width="333"><font color="#000000" size="3" face="Times New Roman">Обратная косая черта</font></td>
  </tr>
  <tr>
    <td width="127" align="center"><font color="#000000" size="3" face="Times New Roman">&nbsp; \$</font></td>
    <td width="333"><font color="#000000" size="3" face="Times New Roman">Знак доллара</font></td>
  </tr>
  <tr>
    <td width="127" align="center"><font color="#000000" size="3" face="Times New Roman">\&quot;</font></td>
    <td width="333"><font color="#000000" size="3" face="Times New Roman">Кавычка</font></td>
  </tr>
  <tr>
    <td width="127" align="center"><font color="#000000" size="3" face="Times New Roman">\[0-7]{1,3}</font></td>
    <td width="333"><font color="#000000" size="3" face="Times New Roman">Восьмеричная запись числа (в виде
регулярного выражения)</font></td>
  </tr>
  <tr>
    <td width="127" align="center"><font color="#000000" size="3" face="Times New Roman">&nbsp;\x[0-9A-Fa-f]{l,2}</font></td>
    <td width="333"><font color="#000000" size="3" face="Times New Roman">Шестнадцатиричная запись числа (в виде
регулярного выражения)</font></td>
  </tr>
</table>
<font FACE="Arial" SIZE="1" COLOR="#000000">
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Второе принципиальное различие
заключается в том, что в строках,
заключенных в кавычки, распознаются все
существующие служебные символы, а в строках,
заключенных в апострофы, — только
служебные символы «\\» и «\». Следующий
пример наглядно демонстрирует различия
между присваиванием строк, заключенных в
кавычки и апострофы:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">$double_list = &quot;item1\nitem2\nitem2&quot;;</font></p>
<p><font color="#000000" face="Courier New" size="3">$single_list = 'item1\nitem2\nitem2';</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Если вывести обе строки в браузере,
окажется, что строка в кавычках содержит
внутренние символы новой строки, а в строке
в апострофах последовательность \n
выводится как обычные символы. Хотя многие
служебные символы в браузерах
</font> <font FACE="Times New Roman" SIZE="3" COLOR="#000000">
несущественны, при форматировании для
других условий они играют очень важную роль.
Помните об этом, выбирая между кавычками и
апострофами, и вам удастся избежать многих
неожиданностей.</p>
</font>
<p><A NAME="i"></A><font color="#000000" size="4" face="Times New Roman">Синтаксис встроенной документации</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Второй вариант синтаксиса ограничения
строк, представленный в HTML4, называется </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">встроенной
документацией </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">(here
doc). В этом варианте синтаксиса строка
начинается с символов &lt;&lt;&lt;, за которыми
следует некоторый идентификатор по вашему
выбору, затем строка, присваиваемая
переменной. Конструкция заканчивается
вторым экземпляром того же идентификатора.
Пример:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">$paragraph = &lt;&lt;&lt;DELIM</font></p>
<p><font color="#000000" face="Courier New" size="3">This is a string that</font></p>
<p><font color="#000000" face="Courier New" size="3">Will be interpreted
exactly</font></p>
<p><font color="#000000" face="Courier New" size="3">As it is written in the</font></p>
<p><font color="#000000" face="Courier New" size="3">variable assignment,</font></p>
<p><font color="#000000" face="Courier New" size="3">DELIM;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Выбранный идентификатор не должен
присутствовать в присваиваемой строке.
Более того, первый символ завершающего
идентификатора </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">должен
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">находиться
в первом столбце строки, завершающей
конструкцию.</p>
</font>
<p><A NAME="j"></A><font color="#000000" size="4" face="Times New Roman">Обращение к отдельным символам строк</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>К отдельным символам строки можно
обращаться как к элементам массива с
последовательной нумерацией (см. следующий
раздел). Пример:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$sequence_number = &quot;04efgh&quot;;</p>
<p>$letter = Ssequence_number[4];</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Переменной $ letter будет присвоено значение <i>g.
</i>Как вы узнаете из следующего раздела, в
РНР нумерация элементов массивов
начинается с 0. Соответственно, выражение
$sequence_number[l] будет равно 4.</p>
</font><b>
<p><font face="Times New Roman"><A NAME="k"></A><font color="#000000" size="4">Массивы</font></font></p>
</b><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Массив </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">представляет
собой список однотипных элементов.
Существует два типа массивов,
различающиеся по способу идентификации
элементов. В массивах первого типа элемент
определяется индексом в
последовательности. Массивы второго типа
имеют ассоциативную природу, и для
обращения к элементам используются ключи,
логически связанные со значениями. Впрочем,
на практике операции с массивами обоих
типов выполняются сходным образом. По
размерности массивы делятся на одномерные
и многомерные.</p>
</font>
<p><A NAME="l"></A><font color="#000000" face="Times New Roman" size="4">Одномерные индексируемые массивы</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>При обращении к элементам одномерных
индексируемых массивов используется
целочисленный индекс, определяющий позицию
заданного элемента.</p>
<p>Обобщенный синтаксис элементов
одномерного массива:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$имя[индекс1];</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Одномерные массивы создаются следующим
образом:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$meat[0] = &quot;chicken&quot;;</p>
<p>$meat[l] = &quot;steak&quot;;</p>
<p>$meat[2] = &quot;turkey&quot;;</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>При выполнении следующей команды:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">print $meat[1]:</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>в браузере выводится строка</p>
</font>
<p><font color="#000000" face="Courier New" size="3">steak</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>При создании массивов также можно
воспользоваться функцией array (). Массив $meat
из предыдущего примера создается командой</p>
</font>
<p><font color="#000000" face="Courier New" size="3">$meat = аrrау(&quot;chicken&quot;, &quot;steak&quot;, &quot;turkey&quot;);</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Приведенная выше команда pri nt приводит к
тому же результату — выводу строки steak.</p>
<p>Чтобы включить новый элемент в конец
массива, можно просто присвоить значение
переменной массива без указания индекса.
Следовательно, массив $meat можно создать еще
одним способом:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>Smeat[] = &quot;chicken&quot;;</p>
<p>$meat[] = &quot;steak&quot;;</p>
<p>Smeat[] = &quot;turkey&quot;;</p>
</font>
<p><A NAME="m"></A><font color="#000000" face="Times New Roman" size="4">Одномерные ассоциативные массивы</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Ассоциативные массивы особенно удобны в
ситуациях, когда элементы массива удобнее
связывать со словами, а не с числами.</p>
<p>Предположим, вы хотите сохранить в
массиве лучшие сочетания вин и блюд. Проще
всего было бы хранить в массиве пары «ключ/значение»
— например, присвоить сорт вина названию
блюда. Самым разумным решением будет
использование ассоциативного массива:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">Spairings[&quot;zinfandel&quot;]
= &quot;Broiled Veal Chops&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">$pairings[&quot;merlot&quot;]
= &quot;Baked Ham&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">$pairings[&quot;sauvignon&quot;] = &quot;Prime Rib&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">$pairings[&quot;sauternes&quot;] = &quot;Roasted Salmon&quot;;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Ассоциативный массив заметно экономит
время и объем программного кода,
необходимого для вывода определенных
элементов массива. Допустим, вы хотите
узнать, с каким блюдом лучше всего идет «Мерло».
Нужная информация выводится простой
ссылкой на элемент массива $pairings: print $pairings[&quot;merlot&quot;];
// Выводится строка &quot;Baked Ham&quot;
Ассоциативные массивы также можно
создавать функцией РНР аггау():</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>Spairings = аrrау(</p>
<p>zinfandel =&gt; &quot;Broiled Veal Chops&quot;,</p>
<p>merlot =&gt; &quot;Baked Ham&quot;,</p>
<p>sauvignon =&gt; &quot;Prime Rib&quot;,</p>
<p>sauternes =&gt; &quot;Roasted Salmon&quot;);</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Отличается только способ создания
массива pairings, а функциональные возможности
остаются без изменений.</p>
</font>
<p><A NAME="n"></A><font color="#000000" face="Times New Roman" size="4">Многомерные индексируемые массивы</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Многомерные индексируемые массивы
работают практически так же, как и их
одномерные прототипы, однако элементы в них
определяются несколькими индексами вместо
одного. Теоретически размерность
индексируемого массива не ограничивается,
хотя в большинстве приложений практически
не встречаются массивы с размерностью выше
3.</p>
<p>Обобщенный синтаксис элементов
многомерного массива:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$имя[индекс1][индекс2]..[индексN];</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Пример ссылки на элемент двухмерного
индексируемого массива:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$position = $chess_board[5][4];</font></p>
<p><A NAME="o"></A><font color="#000000" face="Times New Roman" size="4">Многомерные ассоциативные массивы</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Многомерные ассоциативные массивы также
существуют в РНР (и приносят определенную
пользу). Допустим, в массиве $раirings из
предыдущего примера должна храниться
информация не только о сорте, но и о
производителе вина. Это можно сделать
следующим образом:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$pairings[&quot;Martinelli&quot;][&quot;zinfandel&quot;] = &quot;Broiled Veal
Chops&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">$pairings[&quot;Beringer&quot;][&quot;merlot&quot;] = &quot;Baked
Ham&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">$pairings[&quot;Jarvis&quot;][&quot;sauvignon&quot;] = &quot;Prime
Rib&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">$pairings[&quot;Climens&quot;][&quot;sauternes&quot;] = &quot;Roasted
Salmon&quot;;</font></p>
<p><font size="4"><A NAME="p"></A><font color="#000000" face="Times New Roman" size="4">Смешанное индексирование</font></font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В многомерных массивах допускается
смешанное индексирование (числовое и
ассоциативное). Допустим, вы хотите
расширить модель одномерного
ассоциативного массива для хранения
информации об игроках первого и второго
состава футбольной команды. Решение может
выглядеть следующим образом:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$Buckeyes[&quot;quarterback&quot;] [1] = &quot;Bellisari&quot;;</p>
<p>$Buckeyes[&quot;quarterback&quot;] [2] = &quot;Moherman&quot;:</p>
<p>$Buckeyes[&quot;quarterback&quot;] [3] = &quot;Wiley&quot;;</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В РНР существует множество функций для
создания массивов и операций с ними — эта
тема настолько обширна, что заслуживает
отдельной главы. Работа с массивами в РНР
подробно описана в главе 13.</p>
</font><b>
<p><A NAME="q"></A><font size="4">Объекты</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>К пятому типу данных РНР относятся
объекты. </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">Объект
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">представляет
собой переменную, экземпляр которой
создается по специальному шаблону,
называемому классом. Концепции объектов и
классов являются неотъемлемой частью
парадигмы объектно-ориентированного
программирования (ООП).</p>
<p>В отличие от других типов данных,
поддерживаемых в языке РНР, объекты должны
объявляться явно. Необходимо понимать, что
объект — всего лишь конкретный экземпляр
класса, используемого в качестве шаблона
для создания объектов с конкретными
характеристиками и функциональными
возможностями. Следовательно, объявление
класса должно предшествовать объявлению
объектов, создаваемых на их основе. Пример
объявления класса и последующего создания
объектов на его основе:</p>
</font>
<p><font face="Courier New" size="3" color="#000000">
class appliance {
</font></p>
<p><font face="Courier New" size="3" color="#000000">
var power:
</font></p>
<p><font face="Courier New" size="3" color="#000000">
function set_power($on_off) {
</font></p>
<p><font face="Courier New" size="3" color="#000000">
$this-&gt;power = $on_off;&nbsp;
</font></p>
<p><font face="Courier New" size="3" color="#000000">
}
</font></p>
<p><font face="Courier New" size="3">}</font></p>
<font face="Times New Roman">
<p><font face="Courier New">...</font></p>
<p><font face="Courier New" size="3" color="#000000">
$blender = new appliance;
</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Определение класса задает атрибуты и
функции, связанные с некоторой структурой
данных — в данном примере это структура с
именем appliance (устройство). У этой структуры
имеется всего один атрибут power (мощность).
Для изменения этого атрибута создается
метод set_power.</p>
<p>Помните: определение класса — всего лишь
шаблон, и выполнять операции с ним в
программе невозможно; сначала нужно
создать объекты на основе этого шаблона.
Объекты создаются при помощи ключевого
слова new. Например, в приведенном выше
фрагменте создается объект $blender класса
appliance.</p>
<p>После создания объекта $blender можно задать
его мощность при помощи метода</p>
</font>
<p><font color="#000000" face="Courier New" size="3">set_power: $blender-&gt;set_power(&quot;on&quot;);</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Объектно-ориентированное
программирование занимает столь важное
место в современных стандартах
программирования, что его применение в РНР
заслуживает отдельной главы. Реализация
ООП в РНР описана в главе 6.</p>
</font><b>
<p><A NAME="r"></A><font color="#000000" size="4" face="Times New Roman">Логические величины (истина/ложь)</font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Логический тип данных принимает всего два
значения: истинное (true) и ложное (false).
Логические величины создаются двумя
способами: при проверке условий и в виде
значений переменных. Обе ситуации
достаточно просты.</p>
<p>Сравнения существуют в нескольких формах.
Чаще всего они встречаются при
использовании оператора = в условной
команде if. Пример:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">if ($sum == 40) :</font></p>
<p><font color="#000000" size="3" face="Courier New">...</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Результатом проверки является либо
истина, либо ложь: переменная $sum либо равна
40, либо не равна. Если переменная $sum равна 40,
проверка дает истинный результат. В
противном случае результат равен false.</p>
<p>Логические величины также могут
определяться явным присваиванием
переменной истинного или ложного значения.
Пример:</font></p>
<p><font color="#000000" face="Courier New" size="3">$flag = TRUE;</font></p>
<p><font color="#000000" face="Courier New" size="3">if ($flag </font></font><font color="#000000" face="Courier New" size="3">==</font>
<font face="Times New Roman">
<font color="#000000" face="Courier New" size="3"> TRUE) :</font></p>
<p><font color="#000000" face="Courier New" size="3">print &quot;The flag is true!&quot;;</font></p>
<p><font color="#000000" face="Courier New" size="3">else :</font></p>
<p><font color="#000000" face="Courier New" size="3">print &quot;The flag is false!&quot;;</font></p>
<p><font color="#000000" face="Courier New" size="3">endif;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Если переменная $flag истинна, выводится
первое сообщение, а если ложна — второе
сообщение.</p>
<p>Возможен и другой вариант —
представление истинных и ложных логических
величин в виде значений 1 и 0 соответственно.
В этом случае предыдущий пример выглядит
так:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$flag = 1;</font></p>
<p><font color="#000000" size="3" face="Courier New">if ($flag == TRUE) ;</font></p>
<p><font color="#000000" size="3" face="Courier New">print &quot;The flag is true!&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">else :</font></p>
<p><font color="#000000" size="3" face="Courier New">print &quot;The flag is false!&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">endif;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Наконец, существует еще один способ:</p>
</font>
<p><font face="Courier New" size="3" color="#000000">
$flag = TRUE:
</font></p>
<p><font face="Courier New" size="3" color="#000000">
// При выполнении этой команды косвенно&nbsp;
</font></p>
<p><font face="Courier New" size="3" color="#000000">
 //
проверяется условие &quot;if ($flag == TRUE)&quot;
</font></p>
<p><font size="3" color="#000000" face="Courier New">if ($flag)
:</font></p>
<p><font face="Courier New" size="3" color="#000000">
print &quot;The flag is true!&quot;;
</font></p>
<p><font size="3" color="#000000" face="Courier New">else :</font></p>
<p><font face="Courier New" size="3" color="#000000">
print &quot;The flag is false!&quot;;
</font></p>
<p><font size="3" color="#000000" face="Courier New">endif:</font></p>
<b>
<p><font size="4"><A NAME="s"></A><font color="#000000">Идентификаторы</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Общий термин </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">идентификатор
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">применяется
к переменным, функциям и другим объектам,
определяемым пользователем.
Идентификаторы РНР должны удовлетворять
нескольким условиям:</p>
<p>Идентификатор состоит из одного или
нескольких символов и начинается с буквы
или символа подчеркивания. Идентификатор
может содержать только буквы, цифры,
символы подчеркивания и другие ASCII-символы
с кодами от 127 до 255. Примеры:</p>
</font>
<table border="1">
  <tr>
    <td width="250"><b><font color="#000000" size="3" face="Times New Roman">Допустимые
      идентификаторы</font></b></td>
    <td width="250">
      <p align="left"><b><font color="#000000" size="3" face="Times New Roman">Недопустимые
      идентификаторы</font></b></td>
  </tr>
  <font FACE="Times New Roman" SIZE="3" COLOR="#000000">
  <tr>
    <td width="114">
<p><font color="#000000" size="3" face="Times New Roman">my_function</font></p>
    </td>
    <td width="178">
      <p align="left"><font color="#000000" size="3" face="Times New Roman">This&amp;that</font></td>
  </tr>
  <tr>
    <td width="114"><font color="#000000" size="3" face="Times New Roman">Size</font></td>
    <td width="178"><font color="#000000" size="3" face="Times New Roman">!counter</font></td>
  </tr>
  <tr>
    <td width="114"><font color="#000000" size="3" face="Times New Roman">_someword</font></td>
    <td width="178"><font color="#000000" size="3" face="Times New Roman">4ward</font></td>
  </tr>
  </table>
</font><b><font FACE="Arial" SIZE="1" COLOR="#000000">
</font></b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В идентификаторах учитывается регистр
символов. Следовательно, переменная с
именем $recipe отличается от переменных с
именами $Recipe, $rEciPe и $recipE.</p>
<p>Длина идентификаторов не ограничивается.
Это удобно, поскольку программист может
точно описать смысл идентификатора в его
имени.</p>
<p>Идентификатор не может совпадать с каким-либо
из стандартных ключевых слов РНР.</p>
</font><b>
<p><font size="4"><A NAME="t"></A><font color="#000000">Переменные</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В примерах, приведенных выше, я попутно
показал, как происходит присваивание и
изменение значений переменных. И все же
стоит четко сформулировать правила
объявления переменных и выполнения
операций с ними. Ниже приводится подробное
описание этих правил.</p>
</font>
</font>
<p><A NAME="u"></A><font color="#000000" size="4" face="Times New Roman">Объявление переменных</font></p>
<font face="Times New Roman"><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Переменная </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">представляет
собой именованную область памяти,
содержащую данные, с которыми можно
выполнять операции во время выполнения
программы.</p>
<p>Имена переменных всегда начинаются со
знака доллара, $. Ниже приведены примеры
допустимых имен переменных:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$соlоr</font></p>
<p><font color="#000000" size="3" face="Courier New">$operating_system</font></p>
<p><font color="#000000" size="3" face="Courier New">$_some_variable</font></p>
<p><font color="#000000" size="3" face="Courier New">$model</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Имена переменных должны соответствовать
тем же условиям, что и идентификаторы.
Другими словами, имя переменной начинается
с буквы или символа подчеркивания и состоит
из букв, символов подчеркивания, цифр или
других ASCII-символов в интервале от 127 до 255.</p>
<p>Следует заметить, что переменные в РНР,
как и в языке Perl, не требуют специального
объявления. Вместо этого переменная
объявляется при первом ее использовании в
программе. Более того, тип переменной
косвенно определяется по типу хранящихся в
ней данных. Рассмотрим следующий пример:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$sentence = &quot;This is a sentence.&quot;; // $sentence
интерпретируется как строка</font></p>
<p><font color="#000000" size="3" face="Courier New">$price = 42.99: // $price интерпретируется как
вещественное число</font></p>
<p><font color="#000000" size="3" face="Courier New">$weight = 185; // $weight интерпретируется как целое
число</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Переменные могут объявляться в любой
точке сценария РНР, однако от расположения
объявления зависит то, откуда можно
обращаться к данной переменной.</p>
</font>
<p><A NAME="v"></A><font color="#000000" size="4">Область видимости переменных</font></p>
<i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Область видимости </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">(scope)
определяется как область доступности
переменной в той программе, в которой она
была объявлена. В зависимости от области
видимости переменные РНР делятся на четыре
типа:</p>
</font>
<ul>
  <li>&nbsp;<font FACE="Times New Roman" SIZE="3" COLOR="#000000">локальные
    переменные;</li>
    <li>параметры функций;</li>
    <li>глобальные переменные;</li>
    <li>статические переменные.</li>
  </ul>
</font><b>
<p></b></font><b><font color="#000000" size="3" face="Times New Roman">Локальные переменные</font></p>
</b><font face="Times New Roman"><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Переменная, объявленная внутри функции,
считается </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">локальной</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">;<i>
</i>другими словами, на нее можно ссылаться
только в этой функции. При любом
присваивании вне функции будет
использоваться совершенно другая
переменная, которая не имеет ничего общего (кроме
имени) с переменной, объявленной внутри
функции. При выходе из функции, в которой
была объявлена локальная переменная, эта
переменная и ее значение уничтожаются.</p>
<p>Основное достоинство локальных
переменных — отсутствие непредвиденных
побочных эффектов, связанных со случайной
или намеренной модификацией глобальной
переменной. Рассмотрим следующий пример:</p>
</font>
</font>
<p><font face="Courier New" size="3" color="#000000">
$х = 4;
</font></p>
<p><font face="Courier New" size="3" color="#000000">
function assignx () {
</font></p>
<p><font size="3" color="#000000" face="Courier New">$х = 0;</font></p>
<p><font size="3" color="#000000" face="Courier New">print &quot;\$x inside function is $x. &lt;br&gt;&quot;;</font></p>
<p><font size="3" face="Courier New">}</font></p>
<p><font face="Courier New" size="3" color="#000000">
assignx();
</font></p>
<p><font face="Courier New" size="3" color="#000000">
print &quot;\$x outside of function is $x. &lt;br&gt;&quot;;</font></p>
<p>
<font face="Courier New" size="3" COLOR="#000000">
При выполнении этого фрагмента выводится
следующий результат:
</font></p>
<p><font face="Courier New" size="3" COLOR="#000000">
$х inside function is 0.
</font></p>
<p><font face="Courier New" size="3" COLOR="#000000">
$х outside of function is 4.
</font></p>
<font face="Times New Roman"><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Как видите, программа выводит два разных
значения переменной $х. Дело в том, что
переменная $х внутри функции assignx имеет
локальную природу, и изменение ее значения
никак не отражается на значении,
существующем за пределами этой функции.
Справедливо и обратное — модификация $х за
пределами функции никак не отражается на
локальных переменных функции assignx().</p>
</font><b>
<p><font size="3" face="Times New Roman" COLOR="#000000">Параметры функций</font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В РНР, как и во многих других языках
программирования, любые параметры,
передаваемые функции при вызове, должны
быть объявлены в заголовке функции. Хотя
параметрам присваиваются аргументы,
переданные извне, после выхода из функции
они становятся недоступными.</p>
<p>Параметры объявляются в круглых скобках
после имени функции. Объявление параметров
практически не отличается от объявления
типичной переменной:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">// Функция умножает переданное значение на
10 и возвращает результат</font></p>
</font>
<p><font color="#000000" face="Courier New" size="3">function x10 ($value) {</font></p>
<p><font color="#000000" face="Courier New" size="3">$value = $value * 10;</font></p>
<p><font color="#000000" face="Courier New" size="3">return $value;</font></p>
<p><font color="#000000" face="Courier New" size="3">}</font></p>
<font face="Times New Roman">
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Хотя вы можете обращаться к параметрам в
той функции, в которой они были объявлены, и
выполнять с ними необходимые операции,
после завершения функции параметры
уничтожаются.</p>
</font><b>
<p><font size="3" face="Times New Roman" COLOR="#000000">Глобальные переменные</font></p>
</b><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Глобальные переменные, </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">в
отличие от локальных, доступны в любой
точке программы. Но чтобы изменить значение
глобальной переменной, необходимо
специально объявить ее как глобальную в
соответствующей функции. Для этого перед
именем переменной ставится ключевое слово
GLOBAL. Пример:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$somevar = 15;</font></p>
<p><font face="Courier New" SIZE="3" COLOR="#000000">
function addit() {
</font></p>
<p><font face="Courier New" SIZE="3" COLOR="#000000">
GLOBAL $somevar;
</font></p>
<p><font face="Courier New" SIZE="3" COLOR="#000000">
$somevar++;
</font></p>
<p><font face="Courier New" SIZE="3" COLOR="#000000">
print &quot;Somevar is
$somevar&quot;;
</font></p>
<p><font face="Courier New" SIZE="3" COLOR="#000000">
}
</font></p>
<p><font face="Courier New" SIZE="3" COLOR="#000000">
addit();
</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Будет выведено значение $somevar, равное 16.
Допустим, вы забыли включить следующую
строку:</p>
</font>
<p><font face="Courier New" color="#000000" size="3">GLOBAL </font></font>
<font face="Courier New" color="#000000" size="3">$</font><font face="Times New Roman"><font face="Courier New" color="#000000" size="3">somevar;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В этом случае $somevar будет присвоено
значение 1, поскольку эта переменная будет
считаться локальной по отношению к функции
addit( ). Локальная переменная по умолчанию
инициализируется 0, а затем к ней
прибавляется 1; таким образом, будет
выведено значение 1.</p>
<p>Альтернативный способ объявления
глобальных переменных связан с
использованием массива РНР $GLOBALS( ). Давайте
вернемся к предыдущему примеру и
воспользуемся этим массивом для объявления
глобальной переменной $somevar: $somevar = 15;</p>
</font></font>
<p><font face="Courier New" size="3" COLOR="#000000">
function addit() {
</font>
</p>
<p><font face="Courier New" size="3" COLOR="#000000">
$GLOBALS[&quot;somevar&quot;];
</font>
</p>
<p><font face="Courier New" size="3" COLOR="#000000">
$somevar++;
</font>
</p>
<p><font size="3" face="Courier New">}</font></p>
<p><font face="Courier New" color="#000000" size="3">addit();</font></p>
<p><font face="Courier New" color="#000000" size="3">print &quot;Somevar is $somevar&quot;;</font></p>
<font face="Times New Roman">
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Каким бы способом ни обеспечивалась
глобальная видимость переменной, помните,
что неосторожное использование глобальных
переменных нередко приводит к неожиданным
результатам, причиняющим немало хлопот
программистам. Таким образом, хотя
глобальные переменные очень удобны, при их
использовании необходима умеренность.</p>
</font><b>
<p>
</b></font><b>
<A NAME="w"></A><font color="#000000" size="4" face="Times New Roman">Статические переменные</font></p>
</b><font face="Times New Roman"><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Последний тип видимости переменных
называется </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">статическим.
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">В
отличие от переменных, объявленных
параметрами и уничтожаемых при выходе из
функции, статическая переменная сохраняет
свое значение при повторном вызове. Для
объявления статической переменной перед ее
именем ставится ключевое слово STATIC:
</font></p>
</font>
<p><font face="Courier New" SIZE="3" COLOR="#000000">STATIC $somevar;
</font></p>
<p>
<font face="Times New Roman" SIZE="3" COLOR="#000000">
Рассмотрим пример:
</font>
</p>
<p><font face="Courier New" size="3" color="#000000">
function keep_track() {
</font></p>
<p><font face="Courier New" size="3" color="#000000">
STATIC $count = 0;
</font></p>
<p><font size="3" color="#000000" face="Courier New">$count++;</font></p>
<p><font size="3" color="#000000" face="Courier New">print $count;</font></p>
<p><font size="3" color="#000000" face="Courier New">print &quot;&lt;br&gt;&quot;;</font></p>
<p><font face="Courier New" size="3" color="#000000">
}
</font></p>
<p><font face="Courier New" size="3" color="#000000">
keep_track();
</font></p>
<p><font face="Courier New" size="3" color="#000000">
keep_track();
</font></p>
<p><font face="Courier New" size="3" color="#000000">
keep_track();
</font></p>
<font face="Times New Roman">
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Как будут выглядеть результаты работы
этого сценария? Если бы переменная $count </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">не
была </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">объявлена
статической (то есть являлась локальной),
результат выглядел бы так:</p>
</font>
<p><font face="Courier New" SIZE="3" COLOR="#000000">1
</font></p>
<p><font face="Courier New" SIZE="3" COLOR="#000000">1
</font></p>
<p><font face="Courier New" SIZE="3" COLOR="#000000">1
</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Но поскольку переменная $count является
статической, при каждом вызове функции
будет сохраняться ее предыдущее значение,
поэтому результат будет таким:</p>
</font>
<p><font face="Courier New" SIZE="3" COLOR="#000000">1
</font></p>
<p><font color="#000000" size="3" face="Courier New">2</font></p>
<p><font color="#000000" size="3" face="Courier New">3</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Статические переменные особенно удобны
при написании </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">рекурсивных
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">функций
— особого класса функций, которые
многократно вызывают сами себя до
выполнения некоторого условия. Рекурсивные
функции рассматриваются в главе 4.</p>
</font><b>
<p><font size="4"><A NAME="x"></A><font color="#000000">Переключение типов</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Иногда бывает удобно использовать
переменные способами, не предусмотренными
при их создании. Допустим, вам захочется
прибавить строковое значение &quot;15&quot; к
целому числу 12. К счастью, тип переменных
РНР может изменяться и без использования
механизма явного преобразования. Этот
процесс, независимо от того, выполняется ли
он прямо или косвенно, называется </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">переключением
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">(juggling) </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">типов.
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">Лучше
всего продемонстрировать сказанное на
конкретных примерах.</p>
<p>Предположим, вы суммируете две величины —
строку и целое число. Как вы думаете, что при
этом произойдет? Результат зависит от
содержимого строки. Например, при
суммировании целого числа со строковым
представлением числа будет получено целое
число:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$variablel = 1;</p>
<p>$variable2 = &quot;1&quot;;</p>
<p>$variable3 = $variablel + $variable2;</p>
<p>// $variable3 присваивается 4.</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Другой пример переключения типов —
суммирование целого числа с вещественным.
При этом целое число преобразуется к
вещественному типу, чтобы избежать потери
точности:</p>
</font></font><p><font face="Courier New" size="3" color="#000000">$</font><font face="Times New Roman"><font FACE="Courier New" SIZE="3" COLOR="#000000">variablel = 3;</p>
<p>$variable2 = 5.4;</p>
<p>$variable3 = $variablel + $variable2;</p>
</font></font><p><font face="Courier New"><font SIZE="3" COLOR="#000000">// $v</font></font><font face="Times New Roman"><font FACE="Courier New" SIZE="3" COLOR="#000000">ariablel интерпретируется как
вещественное число.</p>
<p>// и $variable3 присваивается 8.4.</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Следует упомянуть о некоторых
малоизвестных особенностях переключения
типов. Что произойдет при попытке
суммирования целого числа и строки, </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">содержащей</font></i>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">целое число, но не являющейся строковым
представлением? Рассмотрим следующий
пример:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$variablel = 5;</p>
<p>$variable2 = &quot;100 bottles of beer on the wall&quot;;</p>
<p>$variable3 = ;variable1 + $variable2;</p>
<p>// $variable3 присваивается 105</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В результате переменной ;variable3
присваивается значение 105. Это происходит
из-за того, что лексический анализатор РНР
определяет тип по началу строки. Допустим,
мы привели переменную $variable2 к виду &quot;There are
100 bottles of beer on the wall&quot;. Поскольку алфавитные
символы трудно интерпретировать как целое
число, строка интерпретируется как 0, и
переменной $variable3 присваивается 5.</p>
<p>Хотя в большинстве случаев переключение
типов обеспечивает желаемый результат,
существует способ явного приведения
переменных к конкретному типу. Эта тема
рассматривается в следующем разделе.</p>
</font><b>
<p><font size="4"><A NAME="y"></A><font color="#000000">Преобразование типов</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Явное приведение переменной к типу,
отличному от того, который изначально
предназначался для нее, называется </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">преобразованием
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">(casting)
типа. Изменение типа может быть как
временным, одноразовым, так и постоянным.</p>
<p>Чтобы временно привести переменную к
другому типу, достаточно воспользоваться
оператором преобразования типа — указать
нужный тип перед именем переменной в
круглых скобках (табл. 2.2).</p>
</font><b>
<p><font color="#000000" size="3">Таблица 2.2. </font></b><font color="#000000" size="3"><i>Операторы
преобразования типа переменных</i></font></p>
<table border="1" width="405">
  <tr>
    <td width="250"><b><font color="#000000" size="3" face="Times New Roman">Оператор преобразования типа</font></b></td>
    <td width="153"><b><font color="#000000" size="3" face="Times New Roman"> Новый тип</font></b></td>
  </tr>
  <tr>
    <td width="231"><font color="#000000" size="3" face="Times New Roman">&nbsp;(int) или
      (integer)</font></td>
    <td width="150"><font color="#000000" size="3" face="Times New Roman">Целое
      число</font></td>
  </tr>
  <tr>
    <td width="231"><font color="#000000" size="3" face="Times New Roman">(real),
      (double) или (float)</font></td>
    <td width="153"><font color="#000000" size="3" face="Times New Roman">Вещественное
      число</font></td>
  </tr>
  <tr>
    <td width="231"><font color="#000000" size="3" face="Times New Roman">(string)</font></td>
    <td width="153"><font color="#000000" size="3" face="Times New Roman">Строка</font></td>
  </tr>
  <tr>
    <td width="231"><font size="3" face="Times New Roman" COLOR="#000000">(array)</font></td>
    <td width="160"><font color="#000000" size="3" face="Times New Roman">Массив</font></td>
  </tr>
  <tr>
    <td width="231"><font size="3" face="Times New Roman" COLOR="#000000">(object)</font></td>
    <td width="153"><font color="#000000" size="3" face="Times New Roman">Объект</font></td>
  </tr>
</table>
<p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
Простой пример преобразования типов:
</font></p>
<p><font color="#000000" size="3" face="Courier New">$variable1= 13; // $variable1 присваивается целое
число 13</font></p>
<p><font color="#000000" size="3" face="Courier New">$variable2 = (double) $variable1; // $variable2
присваивается 13.0</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Хотя переменная $variable1 первоначально
содержала целое число 13, преобразование (double)
преобразует ее к вещественному типу (поэтому
число 13 превращается в 13.0). Полученное
значение присваивается переменной $variable2.</p>
<p>Из предыдущего раздела вы знаете, что при
суммировании целого числа с вещественным
получается вещественный результат. Однако
тип результата можно изменить посредством
явного преобразования типа:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$variablel = 4.0;</font></p>
<p><font color="#000000" size="3" face="Courier New">$variable2 = 5;</font></p>
<p><font color="#000000" size="3" face="Courier New">$variable3 = (int) $variable1 + $variable2; // $variable3 = 9</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Следует заметить, что преобразование
вещественного типа к целому всегда
сопровождается округлением:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">$variablel = 14.7:</font></p>
<p><font color="#000000" face="Courier New" size="3">$variable2 = (int) $varlable1; // $variable2 = 14:</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Строку или переменную другого типа также
можно преобразовать в элемент массива. В
этом случае преобразованная переменная
становится первым элементом массива:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$variable1 = 1114;</p>
<p>$array1 = (array) $varable1;</p>
<p>print $array1[0]; // Выводится значение 1114</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Наконец, любой тип данных можно
преобразовать в объект. Переменная
становится атрибутом объекта, и ей
присваивается имя scalar:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">$model = &quot;Toyota&quot;;</font></p>
<p><font color="#000000" size="3" face="Courier New">$new_obj = (object)</font> <font color="#000000" size="3" face="Courier New">$model;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Ссылка на исходное строковое значение
выглядит так:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">print $new_obj-&gt;scalar;</font></p>
<b>
<p><font size="4"><A NAME="z"></A><font color="#000000">Присваивание</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Вы уже знаете, как присвоить значение
переменной в сценарии РНР. Тем не менее,
некоторые тонкости, связанные с
присваиванием, стоит выделить особо.
Вероятно, вам хорошо знаком механизм
присваивания </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">по
значению, </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">при
котором именованной переменной
присваивается конкретное значение —
например, целое число 1 или строка &quot;ciao&quot;.
Однако существует и второй механизм —
присваивание </font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">по
ссылке, </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">также
открывающее перед программистами немало
полезных возможностей. В следующих
разделах оба механизма рассматриваются
более подробно.</p>
</font>
<p><font size="4"><A NAME="aa"></A><font color="#000000">Присваивание по значению</font></font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Это самый распространенный способ
присваивания, при котором значение просто
заносится в область памяти, представленную
именем переменной. Примеры присваивания по
значению:</p>
</font>
<p><font face="Courier New" size="3" color="#000000">
$vehicle = &quot;car&quot;;
</font></p>
<p><font face="Courier New" size="3" color="#000000">
$amount =10.23;
</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В результате выполнения этих двух команд
по адресу памяти, представленному именем
$vehicle, сохраняется строка &quot;car&quot;, а по
адресу, представленному именем $amount, —
значение 10.23.</p>
<p>Присваивание по значению также может
выполняться в результате выполнения
команды return в функциях:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">function simple () {</font></p>
<p><font color="#000000" face="Courier New" size="3">return 5;</font></p>
<p><font color="#000000" face="Courier New" size="3">}</font></p>
<p><font color="#000000" face="Courier New" size="3">$return_value = simple();</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Функция simple( ) всего лишь возвращает
значение 5, которое присваивается некоторой
переменной. В данном примере значение 5
будет присвоен</font><font SIZE="3" COLOR="#000000">о переменной
</font><font SIZE="3" COLOR="#000000">
$return_value.
</font>
</p>
<p><font size="4"><A NAME="bb"></A><font color="#000000">Присваивание по ссылке</font></font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Другой способ заключается в присваивании
переменной ссылки на область памяти,
занимаемую другой переменной. Вместо
конкретного значения переменная-приемник
связывается с указателем (или ссылкой) на
область памяти, поэтому фактическое
копирование не выполняется.</p>
<p>Чтобы присвоить значение по ссылке,
укажите перед именем переменной-источника
символ &amp; (амперсанд):</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>$dessert = &quot;cake&quot;;</p>
<p>$dessert2 = $Sdessert;</p>
<p>$dessert2 = &quot;cookies&quot;;</p>
<p>print &quot;$dessert2 &lt;br&gt;&quot;; // Выводится строка
cookies</p>
<p>print Sdessert; // Снова выводится строка cookies</p>
</font>
<p><font FACE="Times New Roman" SIZE="3" COLOR="#000000">Как видно из приведенного фрагмента,
после связывания переменной $dessert2 со
ссылкой на область памяти, занимаемую
переменной $dessert, любые изменения $dessert2
приводят к автоматической модификации $dessert
(и всех остальных переменных, ссылающихся
на эту же область памяти).</p>
</font><b>
<p><font size="4"><A NAME="cc"></A><font color="#000000">Переменные в переменных</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В некоторых ситуациях бывает удобно
использовать переменные, содержимое
которых может динамически
интерпретироваться как имя другой
переменной. Рассмотрим типичный случай
присваивания:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">$recipe = &quot;spaghetti&quot;;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Оказывается, строку &quot;spaghetti&quot; можно
интерпретировать как имя переменной — для
этого в команде присваивания перед именем
исходной переменной ставится второй знак $:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">$$recipe = &quot;&amp; meatballs&quot;</font></font><font color="#000000" face="Courier New" size="3">;</font></p>
<font face="Times New Roman">
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Эта команда присваивает строку &quot;&amp;
meatballs&quot; переменной с именем &quot;spaghetti&quot;.
Следовательно, следующие две команды
выводят одинаковые результаты:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">print $recipe $spaghetti;</font></p>
<p><font color="#000000" size="3" face="Courier New">print $recipe $($recipe);</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В обоих случаях будет выведена строка &quot;spaghetti
&amp; meatballs&quot;.</p>
</font><b>
<p><font size="4"><A NAME="dd"></A><font color="#000000">Стандартные переменные</font></font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В РНР поддерживается ряд стандартных
переменных, предоставляющих в распоряжение
программиста довольно подробную
информацию о внутренней</font> <font FACE="Times New Roman" SIZE="3" COLOR="#000000">
конфигурации. Значения одних переменных
задаются РНР, другие изменяются в</font><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
</font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">зависимости
от операционной системы и web-сервера, с
которыми работает РНР.</p>
<p>Вместо подробного описания всех
стандартных переменных я выделю лишь те
переменные и функции, которые используются
на практике многими программистами.</p>
<p>Чтобы получить полный список переменных
web-сервера, окружения и РНР, определенных
для вашей конфигурации системы, достаточно
выполнить следующий фрагмент:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>while (list($var,$value) = each($GLOBALS)) :</p>
<p>echo &quot;&lt;BR&gt;$var =&gt;
</font></font><font face="Courier New" size="3" color="#000000">$</font><font face="Times New Roman"><font FACE="Courier New" SIZE="3" COLOR="#000000">value&quot;;</p>
<p>endwhile;</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В результате выводится список наподобие
приведенного ниже. Потратьте немного
времени на просмотр полученных данных, а
затем разберите приведенные примеры.</p>
</font>
<p><font size="3" color="#000000" face="Courier New">GLOBALS =&gt;</font></p>
<p><font face="Courier New" size="3" color="#000000">
HTTP_GET_VARS =&gt; Array
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HTTP_COOKIE_VARS =&gt; Array
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HOSTSIZE =&gt; 1000
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HOSTNAME =&gt; server1.apress.com
</font></p>
<p><font face="Courier New" size="3" color="#000000">
LOGNAME =&gt; unstrung
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HISTFILESIZE =&gt; 1000
</font></p>
<p><font face="Courier New" size="3" color="#000000">
REMOTEHOST =&gt; apress.com
</font></p>
<p><font face="Courier New" size="3" color="#000000">
MAIL -&gt; /var/spool/mail/apress
</font></p>
<p><font face="Courier New" size="3" color="#000000">
MACHTYPE =&gt; 1386
</font></p>
<p><font face="Courier New" size="3" color="#000000">
TERM =&gt; vt100
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HOSTTYPE =&gt; i386-linux
</font></p>
<p><font face="Courier New" size="3" color="#000000">
PATH =&gt;
</font></p>
<p><font face="Courier New" size="3" color="#000000">
/usr/sbin:/sbin:/usr/local /bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/Java/bin
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HOME =&gt; /root
</font></p>
<p><font face="Courier New" size="3" color="#000000">
INPUTRC =&gt; /etc/inputrc
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SHELL =&gt; /bin/csh
</font></p>
<p><font face="Courier New" size="3" color="#000000">
USER =&gt; nobody
</font></p>
<p><font face="Courier New" size="3" color="#000000">
VENDOR =&gt; intel
</font></p>
<p><font face="Courier New" size="3" color="#000000">
GROUP =&gt; root
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HOST =&gt; server1.apress.com
</font></p>
<p><font face="Courier New" size="3" color="#000000">
OSTYPE =&gt; linux
</font></p>
<p><font face="Courier New" size="3" color="#000000">
PWD =&gt; /www/bin
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SHLVL =&gt; 3_ =&gt; /www/bin/httpd
</font></p>
<p><font face="Courier New" size="3" color="#000000">
DOCUMENT_ROOT =&gt; /usr/local/apress/site.apress
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HTTP_ACCEPT =&gt; */*
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HTTP_ACCEPT_ENCODING =&gt; gzip, deflate
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HTTP_ACCEPT_LANGUAGE =&gt; it.en-us;q=0.5
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HTTP_CONNECTION -&gt; Keep-Alive
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HTTP_HOST =&gt; www.apress.com
</font></p>
<p><font face="Courier New" size="3" color="#000000">
HTTP_USER_AGENT =&gt; Mozilla/4.0 (compatible; MSIE 5.0: Windows 98;
</font></p>
<p><font face="Courier New" size="3" color="#000000">
CNETHomeBuild051099)
</font></p>
<p><font face="Courier New" size="3" color="#000000">
REMOTE_ADOR =&gt; 127.0.0.1
</font></p>
<p><font face="Courier New" size="3" color="#000000">
REMQTE_PORT =&gt; 3207
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SCRIPT_FILENAME =&gt; /usr/local/apress/site.apress/j/environment_vars.php
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SERVER_ADDR =&gt; 127.0.0.1
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SERVER_AOMIN =&gt; admin@apress.com
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SERVER_NAME =&gt; www.apress.com
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SERVERJORT =&gt; 80
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SERVER SIGNATURE =&gt;
</font></p>
<p><font face="Courier New" size="3" color="#000000">
Apache/1.3.12 Server at www.apress.com Port 80
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SERVER_SOFTWARE =&gt; Apache/1.3.12 (Unix) PHP/4.0.1
</font></p>
<p><font face="Courier New" size="3" color="#000000">
GATEWAY_INTERFACE =&gt; CGI/1.1
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SERVER_PROTOCOL =&gt; HTTP/1.1
</font></p>
<p><font face="Courier New" size="3" color="#000000">
REQUEST_METHOD =&gt; GET
</font></p>
<p><font face="Courier New" size="3" color="#000000">
QUERY_STRING =&gt;
</font></p>
<p><font face="Courier New" size="3" color="#000000">
REQUEST_URI =&gt; /j/environment_vars.php
</font></p>
<p><font face="Courier New" size="3" color="#000000">
SCRIPT_NAME =&gt; /j/environment_vars.php
</font></p>
<p><font face="Courier New" size="3" color="#000000">
PATH_TRANSLAETD =&gt; /usr/local/apress/site.apress/j/environment_vars.php
</font></p>
<p><font face="Courier New" size="3" color="#000000">
PHP_SELF =&gt; /j/environment_vars.php
</font></p>
<p><font face="Courier New" size="3" color="#000000">
argv =&gt; Array
</font></p>
<p><font face="Courier New" size="3" color="#000000">
argc =&gt; 0
</font></p>
<p><font face="Courier New" size="3" color="#000000">
var =&gt; argc
</font></p>
<p><font face="Courier New" size="3" color="#000000">
value =&gt; argc
</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Как видите, стандартные переменные
содержат разнообразные сведения — как
полезные, так и не очень. Вы можете вывести
любую из этих переменных по имени. Например,
следующая команда выводит IP-адрес
пользователя:</p>
</font>
<p><font face="Courier New" color="#000000" size="3">print &quot;Hi! Your IP address is: $REMOTE_ADDR&quot;;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>IP-адрес выводится в числовой форме (например,
208.247.106.187).</p>
<p>Кроме того, стандартные переменные могут
использоваться для сбора информации о
браузере и операционной системе
пользователя. Команда</p>
</font>
<p><font face="Courier New" color="#000000" size="3">print &quot;Your browser is: $HTTP_USER_AGENT&quot;;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>возвращает информацию следующего вида:</p>
</font>
<p><font color="#000000" size="3" face="Courier New">Your browser is: Mozina/4.0 (compatible: MSIE 5.0; Windows 98:
CNETHomeBuild051099)</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Информация о браузере и операционной
системе, в которой он работает, может
пригодиться при построении страниц,
рассчитанных на специфические форматы
конкретных браузеров.</p>
</font>
<p><i><font face="Times New Roman" color="#000000" size="3"><img border="0" src="prim.gif" align=left width="36" height="35">Для
работы с массивами стандартных переменных
необходимо включить директиву track_vars в файл
php.ini. В РНР версии 4.0.3 директива track_vars
включена постоянно.</font></i></p>
<b>
<p><font size="4" face="Times New Roman"><A NAME="ee"></A><font color="#000000">Константы</font></font></p>
</b><i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Константой </font></i><font FACE="Times New Roman" SIZE="3" COLOR="#000000">называется
именованная величина, которая не
изменяется в процессе выполнения программы.
Константы особенно удобны при работе с
заведомо постоянными величинами —
например, числом &#960; (3,141592) или количеством
футов в миле (5280).</p>
<p>В РНР константы определяются функцией define(
). После того как константа будет
определена, вы не сможете изменить (или
переопределить) ее в этой программе.</p>
<p>Например, определение числа я в сценарии
РНР может выглядеть так:</p>
</font>
<p><font face="Courier New" SIZE="3" COLOR="#000000">define(&quot;'PI&quot;, &quot;3.141592&quot;);
</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Определенную константу можно
использовать в программе:</p>
</font>
<p><font color="#000000" face="Courier New" size="3">print &quot;The value of pi is&quot;. PI.&quot;&lt;br&gt;&quot;;</font></p>
<p><font color="#000000" face="Courier New" size="3">$pi2 - 2 * PI:</font></p>
<p><font color="#000000" face="Courier New" size="3">print &quot;Pi doubled equals $pi2.&quot;;</font></p>
<font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>Результат работы этого фрагмента будет
таким:</p>
</font><font FACE="Courier New" SIZE="3" COLOR="#000000">
<p>The value of pi is 3.141592.</p>
<p>Pi doubled equals 6.283184.</p>
</font><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В этом фрагменте следует обратить
внимание на два обстоятельства. Во-первых, в
именах констант не указывается знак
доллара. Во-вторых, константу невозможно
модифицировать (например, присвоить ей
величину 2*РI); если константа используется в
вычислениях, то результат приходится
сохранять в другой переменной.</p>
</font><b>
<p><font size="4" face="Times New Roman"><A NAME="ff"></A></font><font face="Times New Roman" color="#000000" size="4">Итоги</font></p>
</b><font FACE="Times New Roman" SIZE="3" COLOR="#000000">
<p>В этой главе был изложен довольно
обширный материал, необходимый для
понимания и самостоятельного написания
простых программ на РНР. В частности, мы
рассмотрели следующие темы:</p>
<ul>
  <li>допустимые типы данных (целые и
вещественные числа, строки, массивы,
объекты, логические величины);</li>
  <li>идентификаторы;</li>
  <li>переменные (объявление, область действия);</li>
  <li>переключение типов;</li>
  <li>преобразование типов;</li>
  <li>присваивание значений переменным (по
значению, по ссылке);</li>
  <li>константы.</li>
</ul>
<p>Этот материал закладывает основу для
создания более сложных сценариев. В
следующей главе мы перейдем к подробному
изучению выражений, операторов и
управляющих конструкций языка РНР. К концу
главы 3 ваших новых знаний хватит для того,
чтобы построить первое приложение РНР —
простейший календарь.</p>
</font>

</BODY></HTML>
